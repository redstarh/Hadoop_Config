<code bash>
#!/bin/bash
# SKInfosec System Script
SCRIPT_VERSION=201604

if [ `id | grep "uid=0" | wc -l` -eq 0 ] ; then
    echo "[-] Need 'root' Permission..."
    exit
fi



ToInt() {
    TARGET=$1
    RESULT=`echo ${TARGET} | awk '{printf "%1.0f", $1 * 100}'`
    echo ${RESULT}
}



Check_Permission() {
    TARGET=$1
    STANDARD_PERM=$2
    if [ `ls -alLd ${TARGET} | awk '{print $1}' | grep "${STANDARD_PERM}" | wc -l` -eq 1 ] ; then
        echo 1
    else
        echo 0
    fi
}


Check_Owner() {
    TARGET=$1
    STANDARD_USER=$2
    if [ `ls -alLd ${TARGET} | awk '{print $3}'` = ${STANDARD_USER} ] ; then
        echo 1
    else
        echo 0
    fi
}


Check_DBMS_Oracle() {
    if [ `ps -ef | grep oracle | grep -v grep | grep LISTENER | wc -l` -eq 0 ] ; then
	return 0
    else
        su - oracle -c "env"
    fi

    TMP=`ps -ef | grep tns`
    echo ${TMP}
}

Check_DBMS_MySQL() {
    MYSQLD="-"
    TMP=`ps -ef | grep mysql | grep -v grep | grep -v _safe`
    if [ "${TMP}-" = "-" ] ; then
	return 0
    else
        for LINE in ${TMP}
	do
	    for DD in ${LINE}
	    do
	        if [ `echo ${DD} | grep mysqld | wc -l` -eq 1 ] ; then
		    MYSQLD=${DD}
		    break
		fi
	    done
	    if [ ${MYSQLD} != "-" ]; then
	        break
	    fi
	done

	
	if [ ${MYSQLD} != "-" ]; then
	    ${MYSQLD} -V
	fi
    fi

}


Check_DBMS_DB2() {
    TMP=`db2licm -l 2> /dev/null`
    if [ "${TMP}-" = "-" ] ; then
	return 0
    else
        echo ${TMP}
    fi
}

Check_DBMS_ALTIBASE() {
    if [ `ps -ef | grep alti | grep -v grep | wc -l` -eq 0 ] ; then
	return 0
    else
        ps -ef | grep alti | grep -v grep
    fi
}

Check_DBMS_Telcobase() {
    if [ `ps -ef | grep telco | grep -v grep | wc -l` -eq 0 ] ; then
	return 0
    else
        ps -ef | grep telco | grep -v grep
    fi
}

Check_WEB() {
    HTTPD="-"
    TMP=`ps -ef | egrep "httpd|apache" | grep -v grep`
    if [ "${TMP}-" = "-" ] ; then
	return 0
    else
        for LINE in ${TMP}
	do
	    for DD in ${LINE}
	    do
	        if [ `echo ${DD} | grep httpd | wc -l` -eq 1 ] ; then
		    HTTPD=${DD}
		    break
		fi
	    done
	    if [ ${HTTPD} != "-" ]; then
	        break
	    fi
	done

	
	if [ ${HTTPD} != "-" ]; then
	    ${HTTPD} -v
	fi
    fi
}


Check_WAS_TOMCAT() {
    WAS="-"
    TMP=`ps -ef | grep "Dcatalina.home" | grep -v grep`
    if [ "${TMP}-" = "-" ] ; then
	return 0
    else
        for LINE in ${TMP}
	do
	    for DD in ${LINE}
	    do
	        if [ `echo ${DD} | "Dcatalina.home" | wc -l` -eq 1 ] ; then
		    WAS=${DD}
		    break
		fi
	    done
	    if [ ${WAS} != "-" ]; then
	        break
	    fi
	done

	
	if [ ${WAS} != "-" ]; then
	    WAS_HOME=`echo ${WAS} | awk -F= '{print $2}'`
	    ${WAS_HOME}/bin/version.sh
	fi
    fi
}


Check_WAS_WebSphere() {
    WAS="-"
    TMP=`ps -ef | grep "phere" | grep -v grep`
    if [ "${TMP}-" = "-" ] ; then
	return 0
    else
        echo ${TMP}
    fi
}

Check_WAS_JBoss() {
    WAS="-"
    TMP=`ps -ef | grep "jboss" | grep -v grep`
    if [ "${TMP}-" = "-" ] ; then
	return 0
    else
        echo ${TMP}
    fi
}


###############################################
############ Default Check File Path ##########
###############################################
PASSWD="/etc/passwd"
PROFILE="/etc/profile"
INETD_CONF="/etc/inetd.conf"
XINETD_CONF="/etc/xinetd.conf"
XINETD_DIR="/etc/xinetd.d"
HOSTS_ALLOW="/etc/hosts.allow"
HOSTS_DENY="/etc/hosts.deny"
HOSTS_EQUIV="/etc/hosts.equiv"
HOSTS_LPD="/etc/hosts.lpd"
HOSTS="/etc/hosts"

ISSUE="/etc/issue"
SSH_CONF="/etc/ssh/sshd_config"
CRONTABS="/var/spool/cron/crontabs/"
GROUP="/etc/group"
SERVICES="/etc/services"
SMTP_CONF="/etc/mail/sendmail.cf"
SNMP_CONF="/etc/snmp/conf/snmpd.conf /etc/snmp/snmpd.conf /etc/snmpd.conf"
DNS_CONF="/etc/named.conf"
SYSLOG_CONF="/etc/syslog.conf"
RSYSLOG_CONF="/etc/rsyslog.conf"
SULOG_CONF="/etc/pam.conf"
CHECK_DIRS_SUID="/usr/dt/bin/dtaction /usr/dt/bin/dtterm /usr/bin/X11/xlock /usr/sbin/mount /usr/sbin/lchangelv"
CHECK_DIRS_SUID=$CHECK_DIRS_SUID"/usr/bin/admintool /usr/dt/bin/dtprintinfo /usr/platform/sun4u/sbin/prtdiag"
CHECK_DIRS_SUID=$CHECK_DIRS_SUID" /usr/bin/at /usr/dt/bin/sdtcm_convert /usr/sbin/arp"
CHECK_DIRS_SUID=$CHECK_DIRS_SUID" /usr/bin/atq /usr/lib/fs/ufs/ufsdump /usr/sbin/lpmove"
CHECK_DIRS_SUID=$CHECK_DIRS_SUID" /usr/bin/atrm /usr/lib/fs/ufs/ufsrestore /usr/sbin/prtconf"
CHECK_DIRS_SUID=$CHECK_DIRS_SUID" /usr/bin/lpset /usr/lib/lp/bin/netpr /usr/sbin/sysdef"
CHECK_DIRS_SUID=$CHECK_DIRS_SUID" /usr/bin/newgrp /usr/openwin/bin/ff.core /usr/sbin/sparcv7/prtconf"
CHECK_DIRS_SUID=$CHECK_DIRS_SUID" /usr/bin/nispasswd /usr/openwin/bin/kcms_calibrate /usr/sbin/sparcv7/sysdef"
CHECK_DIRS_SUID=$CHECK_DIRS_SUID" /usr/bin/rdist /usr/openwin/bin/kcms_configure /usr/sbin/sparcv9/prtconf"
CHECK_DIRS_SUID=$CHECK_DIRS_SUID" /usr/bin/yppasswd /usr/openwin/bin/xlock /usr/sbin/sparcv9/sysdef /usr/dt/bin/dtappgather"
CHECK_DIRS_SUID=$CHECK_DIRS_SUID"/sbin/dump /usr/bin/lpq-lpd /sbin/restore /usr/bin/lpr /usr/sbin/lpc /sbin/unix_chkpwd /usr/bin/lpr-lpd"
CHECK_DIRS_SUID=$CHECK_DIRS_SUID"/usr/sbin/lpc-lpd  /usr/bin/lprm /usr/sbin/traceroute /usr/bin/lpq /usr/bin/lprm-lpd"
CHECK_CRONDIRS="/etc/cron.daily /etc/cron.hourly /etc/cron.monthly /etc/cron.weekly /var/spool/cron"
CHECH_CRONFILES="/etc/crontab"
CHECK_FTPUSERS="/etc/ftpusers /etc/ftpd/ftpusers"
CHECK_FTPUSERS_VS="/etc/vsftpd/ftpusers /etc/vsftpd.ftpusers"
CHECK_FTPUSERLIST_VS="/etc/vsftpd/user_list /etc/vsftpd.user_list"
CHECK_FTP_CONFIG_FILES="/etc/ftpd.conf /etc/vsftpd.conf /etc/vsftpd/vsftpd.conf /usr/local/etc/proftpd.conf /usr/local/proftpd/etc/proftpd.conf /etc/proftpd.conf /etc/proftpd/proftpd.conf"
CHECK_BANNER="/usr/local/proftpd/etc/proftpd.conf /usr/local/etc/proftpd.conf /etc/proftpd.conf /etc/proftpd/proftpd.conf"
CHECK_LOG_FILES=`ls -ad /var/log/*`" /var/adm/wtmpx /var/adm/utmpx /var/adm/wtmp /var/adm/utmp /var/log/syslog /var/adm/sulog /var/adm/pacct /var/log/authlog /var/adm/messages /var/adm/loginlog /var/adm/lastlog "
CHECK_SYSTEM="/etc/system"
CEHCK_KERNEL="/usr/sbin/ndd"
CHECK_ISN="/etc/default/inetinit"
CHECK_SU=`which su`
CHECK_RPC_LIST="rpc.cmsd|users|rstd|rpc.statd|kcms_server|rpc.ttdberverd|Walld|rpc.nids|rpc.ypupdated|cachefsd|sadmind|srayd|rpc.pcnfsd|rexd|rpc.rquotad|rpc.ttdbserverd|rusersd|sprayd|rstatd|rpc.nisd"
CHECK_NOT_NEED_SERVICE_LIST="echo|discard|daytime|chargen|time|tftp|finger|sftp|uucp-path|nntp|ntp|netbios_ns|netbios_dgm|netbios_ssn|bftp|ldap|printer|talk|ntalk|uucp|pcserver|ldaps|ingreslock|www-ldap-gw|nfsd|dtspcd"
CHECK_NOT_NEED_SERVICE_LIST_2="echo discard daytime chargen time tftp finger sftp uucp-path nntp ntp netbios_ns netbios_dgm netbios_ssn bftp ldap printer talk ntalk uucp pcserver ldaps ingreslock www-ldap-gw nfsd dtspcd"

###############################################
############# Get Information #################
###############################################
#OS LIST = AIX, HP-UX, Linux, SunOS
SYSTEM_OS=`uname -a | awk '{print $1}'`
HOSTNAME=`uname -a | awk '{print $2}'`
if [ ${SYSTEM_OS} = "AIX" ] ; then
    VERSION=`uname -a | awk '{print $3"."$4}'`
else
    VERSION=`uname -a | awk '{print $3}'`
fi


if [ ${SYSTEM_OS} = "Linux" ] ; then
   #Linux Maker List = CendOS, RedHat
   SYSTEM_OS_MAKER=`cat /etc/redhat-release | awk '{print $1}'`
   VERSION=`cat /etc/redhat-release | awk '{print $3}'`
fi


if [ ${SYSTEM_OS} = "Linux" ] ; then
    if [ `ifconfig -a | grep "inet" | grep -v "127.0.0.1" | awk '{print $2}' | grep ":" | wc -l` -eq 0 ]
    then
        IPADDR_LIST=`ifconfig -a | grep "inet" | grep -v "127.0.0.1" | awk '{print $2}' | grep -v ":"`
    else
        IPADDR_LIST=`ifconfig -a | grep "inet" | grep -v "127.0.0.1" | awk '{print $2}' | awk -F: '{print $2}' | grep "\." | grep -v ":"`
    fi
    SHADOW="/etc/shadow"
    PASSWD_CONF="/etc/login.defs"
    LOGIN_CONF="/etc/pam.d/login"
    TELNET_BANNER="/etc/issue.net"
    FTP_BANNER="/etc/welcome.msg"
    CHECK_SESSION_TIMEOUT="/etc/.login"
    NFS_CONF="/etc/exports"
    AT_ALLOW="/etc/at.allow"
    AT_DENY="/etc/at.deny"
elif [ ${SYSTEM_OS} = "HP-UX" ] ; then
    IPADDR_LIST=`cat /etc/hosts | grep -v "#" | grep "." | grep -v '127.0.0.1' | awk '{print $1}' | grep -v ":"`
    SHADOW="/etc/shadow"
    PASSWD_CONF="/etc/default/security"
    LOGIN_CONF="/etc/securetty"
    TELNET_BANNER="/etc/default/telnetd"
    FTP_BANNER="/etc/default/ftpd"
    CHECK_SESSION_TIMEOUT="/etc/csh.login"
    NFS_CONF="/etc/rc.config.d/nfsconf"
    AT_ALLOW="/usr/lib/cron/at.allow"
    AT_DENY="/usr/lib/cron/at.deny"
    SULOG="/var/adm/sulog"
elif [ ${SYSTEM_OS} = "SunOS" ] ;then
    IPADDR_LIST=`ifconfig -a | grep "inet" | grep -v "127.0.0.1" | awk '{print $2}' | grep -v ":"`
    SHADOW="/etc/shadow"
    PASSWD_CONF="/etc/default/passwd"
    LOGIN_CONF="/etc/default/login"
    TELNET_BANNER="/etc/default/telnetd"
    FTP_BANNER="/etc/ftpd/ftpaccess"
    NFS_CONF="/etc/dfs/dfstab"
    AT_ALLOW="/etc/cron.d/at.allow"
    AT_DENY="/etc/cron.d/at.deny"
    SULOG_CONF="/etc/default/su"

elif [ ${SYSTEM_OS} = "AIX" ] ; then
    IPADDR_LIST=`ifconfig -a | grep "inet" | grep -v "127.0.0.1" | awk '{print $2}' | grep -v ":"`
    SHADOW="/etc/security/passwd"
    PASSWD_CONF="/etc/security/user"
    LOGIN_CONF="/etc/security/login.cfg"
    TELNET_BANNER="/etc/security/login.cfg"
    FTP_BANNER="/tmp/ftpd.msg"
    CHECK_SESSION_TIMEOUT="/etc/.login"
    NFS_CONF="/etc/exports"
    AT_ALLOW="/etc/at.allow"
    AT_DENY="/etc/at.deny"
    SULOG_CONF="/etc/pam.conf"
else
    echo "[-] In that OS it can not proceed."
    exit
fi

CHECK_USER_LIST=`cat ${SHADOW} | sed 's/*/#/g' | sed 's/!!/#/g' | grep -v "#:" | grep -v ":NP:" | awk -F":" '{print $1}'`



for IP in ${IPADDR_LIST}
do
    IPADDR=${IPADDR}_${IP}
    REPORT_IP=${IP}
done


DEFAULT_NAME="${HOSTNAME}@${REPORT_IP}@${SYSTEM_OS}"

CREATE_LOG_FILE="${DEFAULT_NAME}.log"
CREATE_XML_FILE="${DEFAULT_NAME}.xml"
CREATE_PATCH_FILE="${DEFAULT_NAME}_PATCH.log"
CREATE_PWD_FILE="${DEFAULT_NAME}_PWD.log"
CREATE_TAR_FILE="${DEFAULT_NAME}.zip"


rm -rf ${CREATE_TAR_FILE} ${CREATE_LOG_FILE} ${CREATE_XML_FILE} ${CREATE_PATCH_FILE} ${CREATE_PWD_FILE}



get_information () {
    echo "#####################   $*   ############################"
    echo "#####################   $*   ############################" >> $CREATE_LOG_FILE 2>&1
    $* >> $CREATE_LOG_FILE 2>&1
    echo " " >> $CREATE_LOG_FILE 2>&1
}

echo "" > $CREATE_LOG_FILE 2>&1
echo "##################   $SYSTEM_OS($VERSION) Security Check [$SCRIPT_VERSION]   ########################"
echo "##################   $SYSTEM_OS($VERSION) Security Check [$SCRIPT_VERSION]   ########################" >> $CREATE_LOG_FILE 2>&1
echo "##############   ■  edited by d1n0@sk.com  ■     ##############"
echo "##############   ■  edited by d1n0@sk.com  ■     ##############" >> $CREATE_LOG_FILE 2>&1
echo "==================== System Information Query Start ====================="
echo "==================== System Information Query Start =====================" >> $CREATE_LOG_FILE 2>&1
echo "SYSTEM_OS=${SYSTEM_OS}" >> $CREATE_LOG_FILE 2>&1
echo "SYSTEM_OS_MAKER=${SYSTEM_OS_MAKER}" >> $CREATE_LOG_FILE 2>&1
echo "VERSION=${VERSION}" >> $CREATE_LOG_FILE 2>&1
echo "IP_LIST=${IPADDR_LIST}" >> $CREATE_LOG_FILE 2>&1
echo " " >> $CREATE_LOG_FILE 2>&1
Start_Time="date"
Kernel_Information="uname -a"
IP_Information="ifconfig -a"
if [ ${SYSTEM_OS} = "SunOS" ] ;then
    Network_Status="netstat -an"
else
    Network_Status="netstat -anp"
fi
Routing_Information="netstat -rn"
Proces_Status="ps -ef"
User_Env="env"
if [ ${SYSTEM_OS} = "SunOS" ] ;then
    PKG_LIST="pkginfo -l"
elif [ ${SYSTEM_OS} = "HP-UX" ] ; then
    PKG_LIST="swlist -l fileset"
elif [ ${SYSTEM_OS} = "AIX" ] ; then
    PKG_LIST="lslpp -w"
else
    PKG_LIST="rpm -qa"
fi

if [ ${SYSTEM_OS} = "SunOS" ] ;then
    PATCH_LIST="showrev -p"
elif [ ${SYSTEM_OS} = "HP-UX" ] ; then
    PATCH_LIST="swlist"
elif [ ${SYSTEM_OS} = "AIX" ] ; then
    PATCH_LIST="instfix"
else
    PATCH_LIST="rpm -qa"
fi



get_information ${Start_Time}
get_information ${Kernel_Information}
get_information ${IP_Information}
get_information ${Network_Status}
get_information ${Routing_Information}
get_information ${Proces_Status}
get_information ${User_Env}
get_information ${PKG_LIST}
get_information ${PATCH_LIST}



echo "#####################   Check_DBMS_Oracle   ############################"
echo "#####################   Check_DBMS_Oracle   ############################" >> $CREATE_LOG_FILE 2>&1
Check_DBMS_Oracle >> $CREATE_LOG_FILE 2>&1
echo " " >> $CREATE_LOG_FILE 2>&1

echo "#####################   Check_DBMS_MySQL   ############################"
echo "#####################   Check_DBMS_MySQL   ############################" >> $CREATE_LOG_FILE 2>&1
Check_DBMS_MySQL >> $CREATE_LOG_FILE 2>&1
echo " " >> $CREATE_LOG_FILE 2>&1

echo "#####################   Check_DBMS_DB2   ############################"
echo "#####################   Check_DBMS_DB2   ############################" >> $CREATE_LOG_FILE 2>&1
Check_DBMS_DB2 >> $CREATE_LOG_FILE 2>&1
echo " " >> $CREATE_LOG_FILE 2>&1

echo "#####################   Check_DBMS_ALTIBASE   ############################"
echo "#####################   Check_DBMS_ALTIBASE   ############################" >> $CREATE_LOG_FILE 2>&1
Check_DBMS_ALTIBASE >> $CREATE_LOG_FILE 2>&1
echo " " >> $CREATE_LOG_FILE 2>&1

echo "#####################   Check_DBMS_Telcobase   ############################"
echo "#####################   Check_DBMS_Telcobase   ############################" >> $CREATE_LOG_FILE 2>&1
Check_DBMS_Telcobase >> $CREATE_LOG_FILE 2>&1
echo " " >> $CREATE_LOG_FILE 2>&1

echo "#####################   Check_WEB   ############################"
echo "#####################   Check_WEB   ############################" >> $CREATE_LOG_FILE 2>&1
Check_WEB >> $CREATE_LOG_FILE 2>&1
echo " " >> $CREATE_LOG_FILE 2>&1

echo "#####################   Check_WAS_TOMCAT   ############################"
echo "#####################   Check_WAS_TOMCAT   ############################" >> $CREATE_LOG_FILE 2>&1
Check_WAS_TOMCAT >> $CREATE_LOG_FILE 2>&1
echo " " >> $CREATE_LOG_FILE 2>&1

echo "#####################   Check_WAS_WebSphere   ############################"
echo "#####################   Check_WAS_WebSphere   ############################" >> $CREATE_LOG_FILE 2>&1
Check_WAS_WebSphere >> $CREATE_LOG_FILE 2>&1
echo " " >> $CREATE_LOG_FILE 2>&1

echo "#####################   Check_WAS_JBoss   ############################"
echo "#####################   Check_WAS_JBoss   ############################" >> $CREATE_LOG_FILE 2>&1
Check_WAS_JBoss >> $CREATE_LOG_FILE 2>&1
echo " " >> $CREATE_LOG_FILE 2>&1



echo "* 설정파일 저장 "	>> $CREATE_LOG_FILE 2>&1
echo " ">> $CREATE_LOG_FILE 2>&1
CHECK_CONFIG_LIST="${PASSWD} ${SHADOW} ${PROFILE} ${INETD_CONF} ${XINETD_DIR} ${HOSTS_ALLOW} ${HOSTS_DENY}"
CHECK_CONFIG_LIST=$CHECK_CONFIG_LIST" ${HOSTS_EQUIV} ${HOSTS} ${ISSUE} ${SSH_CONF} ${CRONTABS} ${AT_ALLOW} ${AT_DENY}"
CHECK_CONFIG_LIST=$CHECK_CONFIG_LIST" ${GROUP} ${SNMP_CONF} ${DNS_CONF} ${SYSLOG_CONF}"
CHECK_CONFIG_LIST=$CHECK_CONFIG_LIST" ${RSYSLOG_CONF} ${SULOG_CONF} ${PASSWD_CONF} ${LOGIN_CONF} ${TELNET_BANNER}"
CHECK_CONFIG_LIST=$CHECK_CONFIG_LIST" ${FTP_BANNER} ${NFS_CONF} ${SERVICES} ${SMTP_CONF}"
for CHECK_FILE in ${CHECK_CONFIG_LIST}
do
    echo "######### "${CHECK_FILE} >> $CREATE_LOG_FILE 2>&1
    if [ -f ${CHECK_FILE} ]; then
        cat ${CHECK_FILE} | grep -v "^#" | grep -v "^ *$" >> $CREATE_LOG_FILE 2>&1
    else
        echo "[-] Not Exist File... ${CHECK_FILE}" >> $CREATE_LOG_FILE 2>&1
    fi
    echo " " >> $CREATE_LOG_FILE 2>&1
done





echo "================ System Information Query End ==========================="
echo "================ System Information Query End ===========================" >> $CREATE_LOG_FILE 2>&1
echo " " >> $CREATE_LOG_FILE 2>&1

echo "*************************** START ***************************************"
echo "*************************** START ***************************************" >> $CREATE_LOG_FILE 2>&1
echo "=========================================================================" 
echo "=========================================================================" >> $CREATE_LOG_FILE 2>&1

echo "<?xml version=\"1.0\" encoding=\"euc-kr\"?>" > $CREATE_XML_FILE 2>&1
echo "<rows>" >> $CREATE_XML_FILE 2>&1




NA_CHECK() {
for NL in $*
do
    if [ ${NL} = ${SYSTEM_OS} ]; then
        echo 1
	return
    fi
done
echo 0
}



Classification="1. 계정관리"
Item="1.01 로그인 설정"
ItemCode="${SCRIPT_VERSION}_0101"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
NA_LIST="AIX HP-UX Linux"
if [ ${SYSTEM_OS} = "SunOS" ]; then
    ### 기준설명 ###
    echo "<Standard>" >> $CREATE_XML_FILE 2>&1
    echo "${LOGIN_CONF}에서 PASSREQ 설정이 YES가 아닌 경우 취약" >> $CREATE_XML_FILE 2>&1
    echo "</Standard>" >> $CREATE_XML_FILE 2>&1
    ### 조치방법 ###
    echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
    echo "${LOGIN_CONF}에 PASSREQ 값을 YES로 설정" >> $CREATE_XML_FILE 2>&1
    echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
    ### 현재설정 ###
    echo "<Issue>" >> $CREATE_XML_FILE 2>&1
    if [ `cat $LOGIN_CONF | grep -i "PASSREQ" | grep -v "^#" | wc -l` -eq 0 ] ; then
        echo "PASSREQ 값이 존재하지 않습니다."  >> $CREATE_XML_FILE 2>&1
        result="BAD"
    else
        cat $LOGIN_CONF | grep -i "PASSREQ" | grep -v "^#" >> $CREATE_XML_FILE 2>&1
        if [ `cat $LOGIN_CONF | grep -i "PASSREQ" | grep -v "^#" | grep -i "YES" | wc -l` -eq 0 ] ; then
            echo "취약: PASSREQ 값이 YES가 아님"  >> $CREATE_XML_FILE 2>&1
            result="BAD"
        else
            echo "양호"  >> $CREATE_XML_FILE 2>&1
            result="GOOD"
        fi
    fi
    echo "</Issue>" >> $CREATE_XML_FILE 2>&1
    ### 진단결과 ###
    echo "<Result>" >> $CREATE_XML_FILE 2>&1
    echo ${result}
    echo ${result} >> $CREATE_XML_FILE 2>&1
    echo "</Result>" >> $CREATE_XML_FILE 2>&1
    echo "</row>" >> $CREATE_XML_FILE 2>&1
    ### end ###
else
    RESULT="N/A"
    ### 기준설명 ###
    echo "<Standard>" >> $CREATE_XML_FILE 2>&1
    echo "해당 OS는 해당사항 없음" >> $CREATE_XML_FILE 2>&1
    echo "</Standard>" >> $CREATE_XML_FILE 2>&1
    ### 조치방법 ###
    echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
    echo "해당 OS는 해당사항 없음" >> $CREATE_XML_FILE 2>&1
    echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
    ### 현재설정 ###
    echo "<Issue>" >> $CREATE_XML_FILE 2>&1
    echo "해당 OS는 해당사항 없음" >> $CREATE_XML_FILE 2>&1
    echo "</Issue>" >> $CREATE_XML_FILE 2>&1
    ### 진단결과 ###
    echo "<Result>" >> $CREATE_XML_FILE 2>&1
    echo ${RESULT}
    echo ${RESULT} >> $CREATE_XML_FILE 2>&1
    echo "</Result>" >> $CREATE_XML_FILE 2>&1
    echo "</row>" >> $CREATE_XML_FILE 2>&1
    ### end ###
fi







Classification="1. 계정관리"
Item="1.02 Default 계정 삭제"
ItemCode="${SCRIPT_VERSION}_0102"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "가. lp, uucp, nuucp 계정이 로그인 가능할 경우 취약" >> $CREATE_XML_FILE 2>&1
echo "나. 일반계정(UID가 500이상)이 2개 이상 존재할 경우 확인필요" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "가. lp, uucp, nuucp 계정삭제 또는 로그인불가하도록 설정" >> $CREATE_XML_FILE 2>&1
echo "나. 일반계정 중 불필요한 계정삭제 또는 로그인불가하도록 설정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1

echo "가. Default 계정[lp,uucp,nuucp] 존재여부 " >> $CREATE_XML_FILE 2>&1
result_1="GOOD"
NOT_USER_LISTS="lp uucp nuucp"
for CHECK_USER in ${NOT_USER_LISTS}
do
	echo "["$CHECK_USER"] 점검"  >> $CREATE_XML_FILE 2>&1
	CHECK_PWD=`cat $PASSWD | grep "^$CHECK_USER:"`
	 
	if [ `cat $PASSWD | grep "^$CHECK_USER:" | wc -l` -eq 0 ]
	then
		echo  $CHECK_USER"계정 없음" >> $CREATE_XML_FILE 2>&1
	else
		
		
		echo  "["$PASSWD"]"$CHECK_PWD  >> $CREATE_XML_FILE 2>&1
		if [ `echo $CHECK_PWD | egrep -v "nologin|false" | wc -l` -eq 0 ]
		then
			echo "양호: "$CHECK_USER" 계정 비활성화 설정됨" >> $CREATE_XML_FILE 2>&1
		else
			CHECK_SHADOW=`cat $SHADOW | grep "^$CHECK_USER:"`
			echo  "["$SHADOW"]"$CHECK_SHADOW >> $CREATE_XML_FILE 2>&1
			if [ `echo $CHECK_SHADOW | grep -v ":\*LK\*:" | grep -v ":NP:" | grep -v ":\!\!:" | grep -v ":\*:"  | wc -l` -eq 0 ]
			then
				echo "양호: "$CHECK_USER" 계정 LOCK 설정됨" >> $CREATE_XML_FILE 2>&1
			else
				echo "취약: "$CHECK_USER" 계정 활성화 및 LOCK 설정 안됨" >> $CREATE_XML_FILE 2>&1
				result_1="VUL"
			fi
		fi
	fi

done

if [ ${SYSTEM_OS} = "SunOS" ]; then
    CHECK_UID=99
else
    CHECK_UID=499
fi

echo "____________________________________________________________" >> $CREATE_XML_FILE 2>&1
echo "나. 퇴직, 전배, 휴직, 계약 해지자 계정 존재여부 " >> $CREATE_XML_FILE 2>&1
echo "(실행계정 중 불필요한 계정 여부확인) " >> $CREATE_XML_FILE 2>&1
result_2="CHECK"
if [ `cat $PASSWD | egrep -v "nologin|false" | awk -F: '{if ($3 > $CHECK_UID) print $0}' | wc -l` -gt 1 ]
   then
      echo "추가된 일반계정(UID > ${CHECK_UID})이 존재하지 않습니다" >> $CREATE_XML_FILE 2>&1
      result_2="GOOD"
   else
	echo "확인필요: 일반계정이 존재하므로 확인이 필요합니다."  >> $CREATE_XML_FILE 2>&1
      cat $PASSWD | egrep -v "nologin|false" | awk -F: '{if ($3 > $CHECK_UID) print $0}' >> $CREATE_XML_FILE 2>&1
      result_2="CHECK"
fi

if [ $result_1 = "VUL" ] ; then
    result="BAD"
else	
    if [ $result_2 = "CHECK" ] ; then
        result="CHECK"
    else
        if [ $result_2 = "VUL" ]; then
            result="BAD"
	else
	    result="GOOD"
	fi
    fi
fi



echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###




Classification="1. 계정관리"
Item="1.03 일반계정 root 권한 관리"
ItemCode="${SCRIPT_VERSION}_0103"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "root를 제외한 계정 중 UID가 0인 계정이 존재할 경우 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "root 외에 UID값은 0 이 아닌 다른 값으로 설정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
echo "가. root를 제외한 계정 중 UID가 0인 계정 존재여부 " >> $CREATE_XML_FILE 2>&1
if [ `cat $PASSWD | grep -v "^root:" | awk -F: '{if($3 == 0 ) print $0}' | wc -l` -eq 0 ] ; then
    echo " 양호: root외에 UID가 0인 계정이 없습니다." >> $CREATE_XML_FILE 2>&1
    result="GOOD"
else
    echo "취약: root외에 UID가 0인 계정이 존재합니다." >> $CREATE_XML_FILE 2>&1
    cat $PASSWD | grep -v "^root:" | awk -F: '{if($3 == 0) print $0}' >> $CREATE_XML_FILE 2>&1
    result="BAD"
fi
echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###




Classification="1. 계정관리"
Item="1.04 /etc/passwd 파일 권한 설정"
ItemCode="${SCRIPT_VERSION}_0104"
Risk="H"
TARGET_FILE=${PASSWD}
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "${TARGET_FILE}의 소유주가 root이고, 644이하일 경우 양호" >> $CREATE_XML_FILE 2>&1
echo "그 외에는 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "${TARGET_FILE}의 소유주=root, 권한=644이하로 설정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
ls -alLd ${TARGET_FILE} >> $CREATE_XML_FILE 2>&1
echo "가. ${TARGET_FILE} 파일의 소유가 root 여부 " >> $CREATE_XML_FILE 2>&1
if [ `Check_Owner ${TARGET_FILE} "root"` -eq 1 ] ; then
    echo "양호: ${TARGET_FILE} 파일의 소유주는 root로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
else
    echo "취약: ${TARGET_FILE} 파일의 소유주는 root와 다릅니다." >> $CREATE_XML_FILE 2>&1
    result="BAD"
fi

echo "____________________________________________________________" >> $CREATE_XML_FILE 2>&1
echo "나. ${TARGET_FILE} 파일의 권한이 644 이하 여부 " >> $CREATE_XML_FILE 2>&1
if [ `Check_Permission ${TARGET_FILE} "...-.--.--"` -eq 1 ] ; then
    echo "양호: ${TARGET_FILE} 파일의 권한은 적절하게 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
else
    echo "취약: ${TARGET_FILE} 파일의 권한은 기준(644)와 다릅니다." >> $CREATE_XML_FILE 2>&1
    result="BAD"
fi
echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###




Classification="1. 계정관리"
Item="1.05 /etc/group 파일 권한 설정"
ItemCode="${SCRIPT_VERSION}_0105"
Risk="H"
TARGET_FILE=${GROUP}
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "${TARGET_FILE}의 소유주가 root이고, 644이하일 경우 양호" >> $CREATE_XML_FILE 2>&1
echo "그 외에는 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "${TARGET_FILE}의 소유주=root, 권한=644이하로 설정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
ls -alLd ${TARGET_FILE} >> $CREATE_XML_FILE 2>&1
echo "가. ${TARGET_FILE} 파일의 소유가 root 여부 " >> $CREATE_XML_FILE 2>&1
if [ `Check_Owner ${TARGET_FILE} "root"` -eq 1 ] ; then
    echo "양호: ${TARGET_FILE} 파일의 소유주는 root로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
else
    echo "취약: ${TARGET_FILE} 파일의 소유주는 root와 다릅니다." >> $CREATE_XML_FILE 2>&1
    result="BAD"
fi

echo "____________________________________________________________" >> $CREATE_XML_FILE 2>&1
echo "나. ${TARGET_FILE} 파일의 권한이 644 이하 여부 " >> $CREATE_XML_FILE 2>&1
if [ `Check_Permission ${TARGET_FILE} "...-.--.--"` -eq 1 ] ; then
    echo "양호: ${TARGET_FILE} 파일의 권한은 적절하게 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
else
    echo "취약: ${TARGET_FILE} 파일의 권한은 기준(644)와 다릅니다." >> $CREATE_XML_FILE 2>&1
    result="BAD"
fi
echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###




Classification="1. 계정관리"
Item="1.06 /etc/shadow 파일 권한 설정"
ItemCode="${SCRIPT_VERSION}_0106"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1

NA_LIST="HP-UX"
if [ `NA_CHECK ${NA_LIST}` -eq 1 ]; then
    result="N/A"
    ### 기준설명 ###
    echo "<Standard>" >> $CREATE_XML_FILE 2>&1
    echo "해당 OS는 해당사항 없음" >> $CREATE_XML_FILE 2>&1
    echo "</Standard>" >> $CREATE_XML_FILE 2>&1
    ### 조치방법 ###
    echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
    echo "해당 OS는 해당사항 없음" >> $CREATE_XML_FILE 2>&1
    echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
    ### 현재설정 ###
    echo "<Issue>" >> $CREATE_XML_FILE 2>&1
    echo "해당 OS는 해당사항 없음" >> $CREATE_XML_FILE 2>&1
    echo "</Issue>" >> $CREATE_XML_FILE 2>&1
    ### 진단결과 ###
    echo "<Result>" >> $CREATE_XML_FILE 2>&1
    echo ${result}
    echo ${result} >> $CREATE_XML_FILE 2>&1
    echo "</Result>" >> $CREATE_XML_FILE 2>&1
    echo "</row>" >> $CREATE_XML_FILE 2>&1
    ### end ###
else
    result="GOOD"
    TARGET_FILE=${SHADOW}
    ### 기준설명 ###
    echo "<Standard>" >> $CREATE_XML_FILE 2>&1
    echo "${TARGET_FILE}의 소유주가 root이고, 400이하일 경우 양호" >> $CREATE_XML_FILE 2>&1
    echo "그 외에는 취약" >> $CREATE_XML_FILE 2>&1
    echo "</Standard>" >> $CREATE_XML_FILE 2>&1
    ### 조치방법 ###
    echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
    echo "${TARGET_FILE}의 소유주=root, 권한=400이하로 설정" >> $CREATE_XML_FILE 2>&1
    echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
    ### 현재설정 ###
    echo "<Issue>" >> $CREATE_XML_FILE 2>&1
    ls -alLd ${TARGET_FILE} >> $CREATE_XML_FILE 2>&1
    echo "가. ${TARGET_FILE} 파일의 소유가 root 여부 " >> $CREATE_XML_FILE 2>&1
    if [ `Check_Owner ${TARGET_FILE} "root"` -eq 1 ] ; then
        echo "양호: ${TARGET_FILE} 파일의 소유주는 root로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: ${TARGET_FILE} 파일의 소유주는 root와 다릅니다." >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi

    echo "____________________________________________________________" >> $CREATE_XML_FILE 2>&1
    echo "나. ${TARGET_FILE} 파일의 권한이 400 이하 여부 " >> $CREATE_XML_FILE 2>&1
    if [ `Check_Permission ${TARGET_FILE} "..--------"` -eq 1 ] ; then
        echo "양호: ${TARGET_FILE} 파일의 권한은 적절하게 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: ${TARGET_FILE} 파일의 권한은 기준(644)와 다릅니다." >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi
    echo "</Issue>" >> $CREATE_XML_FILE 2>&1
    ### 진단결과 ###
    echo "<Result>" >> $CREATE_XML_FILE 2>&1
    echo ${result}
    echo ${result} >> $CREATE_XML_FILE 2>&1
    echo "</Result>" >> $CREATE_XML_FILE 2>&1
    echo "</row>" >> $CREATE_XML_FILE 2>&1
    ### end ###
fi




Classification="1. 계정관리"
Item="1.07 패스워드 사용규칙 적용"
ItemCode="${SCRIPT_VERSION}_0107"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "패스워드 최소길이 : 8자리(이상)" >> $CREATE_XML_FILE 2>&1
echo "패스워드 최대 사용기간 : 10주/70일(이하)" >> $CREATE_XML_FILE 2>&1
echo "패스워드 최소 사용기간 : 1주/7일(이상)" >> $CREATE_XML_FILE 2>&1
echo "최근 사용된 암호기억 : 12개(이상)" >> $CREATE_XML_FILE 2>&1
echo "계정잠금 임계값 : 5번(이하)" >> $CREATE_XML_FILE 2>&1
echo "계정잠금 해제시간 : 30분/1800초(이상)" >> $CREATE_XML_FILE 2>&1
echo "위 기준 모두 만족하지 않을 경우 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "진단 기준에 만족하도록 설정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
MIN_LENTH=2016
MAX_USE_DAY=2016
MIN_USE_DAY=2016
PRE_PASSWD_MEMORY=2016
MAX_TRY=2016
TRY_COUNT_ZERO_TIME=2016


if [ ${SYSTEM_OS} = "AIX" ] ; then
    MIN_LENTH=`awk '/default:/,/root:/' $PASSWD_CONF | grep -v '^ *#'| grep -i "minlen" | egrep [0-9]| awk -F= '{print $2}'`
    MAX_USE_DAY=`awk '/default:/,/root:/' $PASSWD_CONF | grep -v '^ *#'| grep -i "maxage" | egrep [0-9]| awk -F= '{print $2}'`
    MIN_USE_DAY=`awk '/default:/,/root:/' $PASSWD_CONF | grep -v '^ *#'| grep -i "minage" | egrep [0-9]| awk -F= '{print $2}'`
    PRE_PASSWD_MEMORY=`awk '/default:/,/root:/' $PASSWD_CONF | grep -v '^ *#'| grep -i "histsize" | egrep [0-9]| awk -F= '{print $2}'`
    MAX_TRY=`cat $PASSWD_CONF | grep -v '^ *#'| grep -i "loginretries" | egrep [0-9]| awk -F= '{print $2}'`
    TRY_COUNT_ZERO_TIME=`cat $LOGIN_CONF | grep -v '^ *#'| grep -i "loginreenable" | grep "=" | awk -F= '{print $2}'`
elif [ ${SYSTEM_OS} = "Linux" ] ; then
    MIN_LENTH=`cat $PASSWD_CONF | grep -v "^#" | grep 'PASS_MIN_LEN' | awk '{print $2}'`
    MAX_USE_DAY=`cat $PASSWD_CONF | grep -v "^#" | grep 'PASS_MAX_DAYS' | awk '{print $2}'`
    MIN_USE_DAY=`cat $PASSWD_CONF | grep -v "^#" | grep 'PASS_MIN_DAYS' | awk '{print $2}'`
    CHECK_FILE="/etc/pam.d/system-auth"
    if [ -f ${CHECK_FILE} ] ; then
        MAX_TRY=`cat /etc/pam.d/system-auth | grep -v "^#" | grep "deny=" | awk -F"deny=" '{print $2}' | awk '{print $1}'`
        TRY_COUNT_ZERO_TIME=`cat /etc/pam.d/system-auth | grep -v "^#" | grep "deny=" | grep "unlock_time=" | awk -F"unlock_time=" '{print $2}' | awk '{print $1}'`
    fi
elif [ ${SYSTEM_OS} = "HP-UX" ] ; then
    MIN_LENTH=`cat $PASSWD_CONF | grep -v "^#" | grep 'MIN_PASSWORD_LENGTH' | awk -F"=" '{print $2}'`
    MAX_USE_DAY=`cat $PASSWD_CONF | grep -v "^#" | grep 'PASSWORD_MAXDAYS' | awk -F"=" '{print $2}'`
    MIN_USE_DAY=`cat $PASSWD_CONF | grep -v "^#" | grep 'PASSWORD_MINDAYS' | awk -F"=" '{print $2}'`
    PRE_PASSWD_MEMORY=`cat $PASSWD_CONF | grep -v "^#" | grep 'PASSWORD_HISTORY_DEPTH' | awk -F"=" '{print $2}'`
    MAX_TRY=`cat $PASSWD_CONF | grep -v "^#" | grep 'AUTH_MAXTRIES' | awk -F"=" '{print $2}'`
elif [ ${SYSTEM_OS} = "SunOS" ] ; then
    MIN_LENTH=`cat $PASSWD_CONF | grep -v "^#" | grep 'PASSLENGTH' | awk -F"=" '{print $2}'`
    MAX_USE_DAY=`cat $PASSWD_CONF | grep -v "^#" | grep 'MAXWEEKS' | awk -F"=" '{print $2}'`
    MIN_USE_DAY=`cat $PASSWD_CONF | grep -v "^#" | grep 'MINWEEKS' | awk -F"=" '{print $2}'`
    MAX_TRY=`cat $PASSWD_CONF | grep -v "^#" | grep 'RETRIES' | awk -F"=" '{print $2}'`
    TRY_COUNT_ZERO_TIME=`cat $PASSWD_CONF | grep -v "^#" | grep 'DISABLETIME' | awk -F"=" '{print $2}'`
    PRE_PASSWD_MEMORY=`cat $PASSWD_CONF | grep -v "^#" | grep 'HISTORY' | awk -F"=" '{print $2}'`
    if [ -f ${LOGIN_CONF} ] ; then
 	MAX_TRY=`cat ${LOGIN_CONF} | grep -v "^#" | grep 'RETRIES' | awk -F"=" '{print $2}'`
	TRY_COUNT_ZERO_TIME=`cat ${LOGIN_CONF} | grep -v "^#" | grep 'DISABLETIME' | awk -F"=" '{print $2}'`
    fi
fi


result="GOOD"
CHECK_VALUE=${MIN_LENTH}
STANDARD_VALUE=8
if [ "${CHECK_VALUE}-" = "-" ] ; then
    echo "취약: 패스워드 최소길이 설정이 없습니다." >> $CREATE_XML_FILE 2>&1
    result="BAD"
elif [ "${CHECK_VALUE}" = "2016" ] ; then
    echo "패스워드 최소길이 점검 ... [N/A]" >> $CREATE_XML_FILE 2>&1
else
    echo "패스워드 최소길이 점검 ... [기준(이상): ${STANDARD_VALUE} / 현재설정값: ${CHECK_VALUE}]" >> $CREATE_XML_FILE 2>&1
    if [ ${CHECK_VALUE} -ge ${STANDARD_VALUE} ] ; then
        echo "양호: 패스워드 최소길이는 기준(${STANDARD_VALUE}) 이상 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: 패스워드 최소길이는 기준(${STANDARD_VALUE}) 미만으로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
	result="BAD"
    fi
fi


CHECK_VALUE=${MAX_USE_DAY}
if [ ${SYSTEM_OS} = "HP-UX" ] || [ ${SYSTEM_OS} = "Linux" ] ; then
    STANDARD_VALUE=70
else
    STANDARD_VALUE=10
fi
if [ "${CHECK_VALUE}-" = "-" ] ; then
    echo "취약: 패스워드 최대사용기간 설정이 없습니다." >> $CREATE_XML_FILE 2>&1
    result="BAD"
elif [ "${CHECK_VALUE}" = "2016" ] ; then
    echo "패스워드 최대사용기간 점검 ... [N/A]" >> $CREATE_XML_FILE 2>&1
else
    echo "패스워드 최대사용기간 점검 ... [기준(이하): ${STANDARD_VALUE} / 현재설정값: ${CHECK_VALUE}]" >> $CREATE_XML_FILE 2>&1
    if [ ${CHECK_VALUE} -le ${STANDARD_VALUE} ] ; then
        echo "양호: 패스워드 최대사용기간은 기준(${STANDARD_VALUE}) 이하 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: 패스워드 최대사용기간은 기준(${STANDARD_VALUE}) 초과로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
	result="BAD"
    fi
fi


CHECK_VALUE=${MIN_USE_DAY}
if [ ${SYSTEM_OS} = "HP-UX" ] || [ ${SYSTEM_OS} = "Linux" ] ; then
    STANDARD_VALUE=7
else
    STANDARD_VALUE=1
fi
if [ "${CHECK_VALUE}-" = "-" ] ; then
    echo "취약: 패스워드 최소사용기간 설정이 없습니다." >> $CREATE_XML_FILE 2>&1
    result="BAD"
elif [ "${CHECK_VALUE}" = "2016" ] ; then
    echo "패스워드 최소사용기간 점검 ... [N/A]" >> $CREATE_XML_FILE 2>&1
else
    echo "패스워드 최소사용기간 점검 ... [기준(이상): ${STANDARD_VALUE} / 현재설정값: ${CHECK_VALUE}]" >> $CREATE_XML_FILE 2>&1
    if [ ${CHECK_VALUE} -ge ${STANDARD_VALUE} ] ; then
        echo "양호: 패스워드 최소사용기간은 기준(${STANDARD_VALUE}) 이상 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: 패스워드 최소사용기간은 기준(${STANDARD_VALUE}) 미만으로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
	result="BAD"
    fi
fi


CHECK_VALUE=${PRE_PASSWD_MEMORY}
STANDARD_VALUE=12
if [ "${CHECK_VALUE}-" = "-" ] ; then
    echo "취약: 최근 암호사용 기억개수 설정이 없습니다." >> $CREATE_XML_FILE 2>&1
    result="BAD"
elif [ "${CHECK_VALUE}" = "2016" ] ; then
    echo "최근 암호사용 기억개수 점검 ... [N/A]" >> $CREATE_XML_FILE 2>&1
else
    echo "최근 암호사용 기억개수 점검 ... [기준(이상): ${STANDARD_VALUE} / 현재설정값: ${CHECK_VALUE}]" >> $CREATE_XML_FILE 2>&1
    if [ ${CHECK_VALUE} -ge ${STANDARD_VALUE} ] ; then
        echo "양호: 최근 암호사용 기억개수는 기준(${STANDARD_VALUE}) 이상 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: 최근 암호사용 기억개수는 기준(${STANDARD_VALUE}) 미만으로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
	result="BAD"
    fi
fi




CHECK_VALUE=${MAX_TRY}
if [ ${SYSTEM_OS} = "HP-UX" ] ; then
    STANDARD_VALUE=10
else
    STANDARD_VALUE=5
fi
if [ "${CHECK_VALUE}-" = "-" ] ; then
    echo "취약: 계정잠금 임계값 설정이 없습니다." >> $CREATE_XML_FILE 2>&1
    result="BAD"
elif [ "${CHECK_VALUE}" = "2016" ] ; then
    echo "계정잠금 임계값 점검 ... [N/A]" >> $CREATE_XML_FILE 2>&1
else
    echo "계정잠금 임계값 점검 ... [기준(이하): ${STANDARD_VALUE} / 현재설정값: ${CHECK_VALUE}]" >> $CREATE_XML_FILE 2>&1
    if [ ${CHECK_VALUE} -le ${STANDARD_VALUE} ] ; then
        echo "양호: 계정잠금 임계값은 기준(${STANDARD_VALUE}) 이하 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: 계정잠금 임계값은 기준(${STANDARD_VALUE}) 초과로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
	result="BAD"
    fi
fi

CHECK_VALUE=${TRY_COUNT_ZERO_TIME}
if [ ${SYSTEM_OS} = "AIX" ] ; then
    STANDARD_VALUE=30
else
    STANDARD_VALUE=1800
fi
if [ "${CHECK_VALUE}-" = "-" ] ; then
    echo "취약: 계정잠금 초기화 시간 설정이 없습니다." >> $CREATE_XML_FILE 2>&1
    result="BAD"
elif [ "${CHECK_VALUE}" = "2016" ] ; then
    echo "계정잠금 초기화 시간 점검 ... [N/A]" >> $CREATE_XML_FILE 2>&1
else
    echo "계정잠금 초기화 시간 점검 ... [기준(이상): ${STANDARD_VALUE} / 현재설정값: ${CHECK_VALUE}]" >> $CREATE_XML_FILE 2>&1
    if [ ${CHECK_VALUE} -ge ${STANDARD_VALUE} ] ; then
        echo "양호: 계정잠금 초기화 시간은 기준(${STANDARD_VALUE}) 이상으로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: 계정잠금 초기화 시간은 기준(${STANDARD_VALUE}) 미만으로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
	result="BAD"
    fi
fi


echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###




Classification="1. 계정관리"
Item="1.08 취약한 패스워드 점검"
ItemCode="${SCRIPT_VERSION}_0108"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "패스워드 암호화된 값이 크랙될 정도의 패스워드가 설정되어 있는 경우 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "- 영문/숫자/기호 포함, 8자리 이상" >> $CREATE_XML_FILE 2>&1
echo "- Null 패스워드 사용 금지" >> $CREATE_XML_FILE 2>&1
echo "- 문자 또는 숫자만으로 구성 금지" >> $CREATE_XML_FILE 2>&1
echo "- 사용자 ID와 동일한 패스워드 금지" >> $CREATE_XML_FILE 2>&1
echo "- 연속적인 문자/숫자(예. 1111, 1234, abcd) 사용 금지" >> $CREATE_XML_FILE 2>&1
echo "- 주기성 패스워드 재사용 금지" >> $CREATE_XML_FILE 2>&1
echo "- 전화번호, 생일, 계정명, hostname 같이 추측하기 쉬운 패스워드 사용 금지" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="CHECK"
if [ ${SYSTEM_OS} = "AIX" ] ; then
    if [ -f $SHADOW ] ; then
        cat $SHADOW | sed 's/*/#/g' | sed 's/!!/#/g' | grep -v "#:" | grep -v ":NP:"  >> $CREATE_XML_FILE 2>&1
        echo "☞ Crack 파일 " >> $CREATE_XML_FILE 2>&1
        echo " " >> $CREATE_XML_FILE 2>&1
        (
        awk '
        /^[a-zA-Z0-9]+:/ {
        curruser = $1;
        next;
        }
        $1 == "password" {
        print "STAG:" curruser $3;
        }' < $SHADOW
        sed -e 's/^/PTAG:/' < $PASSWD
        ) |
        awk -F: '
        BEGIN {
        OFS=":";
        }
        $1 == "STAG" {
        pw[$2] = $3;
        next;
        }
        $1 == "PTAG"{
        $3 = pw[$2];
        print $0;
        }' |
        sed -e 's/^PTAG://'  >> $CREATE_PWD_FILE
    else
        echo "패스워드 파일("$SHADOW")이 없음" >> $CREATE_XML_FILE 2>&1
    fi
elif [ ${SYSTEM_OS} = "HP-UX" ] ; then
    if [ -f ${PASSWD} ] ; then
        echo "☞ ${PASSWD} 파일 " >> $CREATE_XML_FILE 2>&1
        cat ${PASSWD} > $CREATE_PWD_FILE 2>&1
    else
        echo "${PASSWD} 파일이 없습니다. " >> $CREATE_XML_FILE 2>&1
    fi


    echo " " >> $CREATE_XML_FILE 2>&1
    CHECK_DIR="/tcb/files/auth"
    if [ -d ${CHECK_DIR} ] ;   then
        echo "☞ ${CHECK_DIR} 파일 " >> $CREATE_XML_FILE 2>&1
        ls -1 ${CHECK_DIR}  > Passwd1
        for i in `cat Passwd1`
        do
            ls -1 ${CHECK_DIR}/$i > Passwd2
            for j in `cat Passwd2`
            do
                cat ${CHECK_DIR}/$i/$j | awk 'BEGIN {
				find_pass = 0
				}
			NR > 0 { length_acc = index($1, ":u_name=")
				if(length_acc != 0){
					account_name = substr($1, 1, length_acc-1)
					find_pass++
					}
				identifier = substr($1, 1, 7)
				if(identifier == ":u_pwd="){
					passwd = substr($1, 8, length($1))
					find_pass++
					}
				}
			END { if(find_pass == 2){
					printf "%s:%s::::::\n", account_name, passwd
					}
				}'  >> $CREATE_PWD_FILE
            done
        done
    fi
    
    rm -rf Passwd1 Passwd2
else
    cat $SHADOW | sed 's/*/#/g' | sed 's/!!/#/g' | grep -v "#:" | grep -v ":NP:"  > $CREATE_PWD_FILE
fi

cat $CREATE_PWD_FILE >> $CREATE_XML_FILE 2>&1


echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###




Classification="1. 계정관리"
Item="1.09 로그인 불필요한 계정 shell 제한"
ItemCode="${SCRIPT_VERSION}_0109"
Risk="M"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "로그인이 필요하지 않은 아래 계정의 /bin/false(nologin) 쉘이 부여되어 있지 않을 경우 취약" >> $CREATE_XML_FILE 2>&1
echo "/etc/passwd 에 불필요한계정(daemon bin sys adm listen nobody nobody4 noaccess diag listen operator games gopher)에 대한 shell확인 " >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "예) daemon 계정이 로그인 하지 못하도록 설정" >> $CREATE_XML_FILE 2>&1
echo "# vi /etc/passwd" >> $CREATE_XML_FILE 2>&1
echo "(수정 전) daemon:x:1:1::/:/sbin/ksh" >> $CREATE_XML_FILE 2>&1
echo "(수정 후) daemon:x:1:1::/:/bin/false" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
USERLIST="daemon bin sys adm listen nobody nobody4 noaccess diag listen operator games gopher"

for check_user in $USERLIST
do
	if [ `cat $PASSWD | grep "^$check_user:" | wc -l` -eq 0 ] 
	then
		echo "[${check_user}] 양호 (계정없음)" >> $CREATE_XML_FILE 2>&1
	else
		SHELL_SET=`cat $PASSWD | grep "^$check_user:" | awk -F":" '{print $7}'`
		USER_SET=`cat $PASSWD | grep "^$check_user:"`
		if [ `echo ${SHELL_SET} | egrep -i "false|nologin" | wc -l` -eq 0 ]
		then
			echo "[${check_user}] 취약 (${USER_SET})" >> $CREATE_XML_FILE 2>&1
			result="BAD"
		else
			echo "[${check_user}] 양호 (${USER_SET})" >> $CREATE_XML_FILE 2>&1
		fi
	fi
done

echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###




Classification="1. 계정관리"
Item="1.10 SU 사용 제한"
ItemCode="${SCRIPT_VERSION}_0110"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "su명령어를 모든 사용자가 사용하도록 되어 있을 경우 (ohter에 권한 있는 경우) 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "- ${CHECK_SU} 파일의 권한에 대하여 ohter에 권한 제거" >> $CREATE_XML_FILE 2>&1
echo "- ${CHECK_SU} 그룹에 실행권한 및 사용가능할 그룹명 지정" >> $CREATE_XML_FILE 2>&1
echo "- SU 사용할 계정에 대해 그룹지정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
ls -alL ${CHECK_SU}  >> $CREATE_XML_FILE 2>&1
SU_GROUP=`ls -alL ${CHECK_SU} | awk '{print $4}'`
echo "확인: 현재 su의 절대경로는 [${CHECK_SU}]이고 설정된 그룹은 [${SU_GROUP}]입니다." >> $CREATE_XML_FILE 2>&1
if [ `Check_Permission ${CHECK_SU} "...s..x---"` -eq 1 ] ; then
    echo "양호: ${CHECK_SU} 파일의 권한은 적절하게 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
else
    if [ ${SYSTEM_OS} = "Linux" ] ; then
        echo "확인: ${CHECK_SU} 파일의 권한은 기준(other에 대한 권한제거)과 다릅니다." >> $CREATE_XML_FILE 2>&1
        echo "Linux의 경우, /etc/pam.d/su 설정점검이 양호일 경우 su퍼미션 점검결과 제외됨"  >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: ${CHECK_SU} 파일의 권한은 기준(other에 대한 권한제거)과 다릅니다." >> $CREATE_XML_FILE 2>&1
	result="BAD"
    fi
fi

if [ ${SYSTEM_OS} = "Linux" ] ; then
    if [ -f /etc/pam.d/su ] ; then
	echo "- /etc/pam.d/su 파일 점검"  >> $CREATE_XML_FILE 2>&1
	
	if [ `cat /etc/pam.d/su | grep 'pam_wheel.so' | grep "required" | grep '^#' | wc -l` -eq 0 ]
	then
		if [ `cat /etc/pam.d/su | grep 'pam_wheel.so' | grep "required" | wc -l` -eq 0 ]
		then
			echo "취약: /etc/pam.d/su 내에 pam_wheel.so 설정이 없습니다."  >> $CREATE_XML_FILE 2>&1
			result="BAD"
		else
			echo "양호: /etc/pam.d/su 내에 pam_wheel.so 설정되어 있습니다."  >> $CREATE_XML_FILE 2>&1
			result="GOOD"
		fi
	else
		echo "취약: /etc/pam.d/su 내에 pam_wheel.so 설정이 주석처리 되어 있습니다." >> $CREATE_XML_FILE 2>&1
		result="BAD"
		cat /etc/pam.d/su | grep 'pam_wheel.so' | grep "required" | grep '^#' >> $CREATE_XML_FILE 2>&1
	fi


    fi

fi
echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###




Classification="2. 파일시스템"
Item="2.01 사용자 UMASK 설정"
ItemCode="${SCRIPT_VERSION}_0201"
Risk="L"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "UMASK가 022와 다를 경우 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "1) # vi /etc/bashrc" >> $CREATE_XML_FILE 2>&1
echo "umask 022 행 추가" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "2) # vi /etc/profile" >> $CREATE_XML_FILE 2>&1
echo "umask 022 행 추가" >> $CREATE_XML_FILE 2>&1
echo "(bash shell을 사용하지 않을 경우에는 /etc/profile에 설정)" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"

UMASK_VALUE=`umask`
UMASK_VALUE_U=`echo "${UMASK_VALUE}/100" | bc`
UMASK_VALUE_G=`echo "(${UMASK_VALUE}-${UMASK_VALUE_U}*100)/10" | bc`
UMASK_VALUE_O=`echo "${UMASK_VALUE}-${UMASK_VALUE_U}*100-${UMASK_VALUE_G}*10" | bc`

echo "현재 umask값은 [${UMASK_VALUE}] 입니다." >> $CREATE_XML_FILE 2>&1
if [ ${UMASK_VALUE_G} -eq 0 -o ${UMASK_VALUE_G} -eq 1 -o ${UMASK_VALUE_G} -eq 4 -o ${UMASK_VALUE_G} -eq 5 ] ; then
    echo "취약: Group에 대한 umask값[${UMASK_VALUE_G}]은 쓰기권한이 존재함." >> $CREATE_XML_FILE 2>&1
    result="BAD"
else
    echo "양호: Group에 대한 umask값[${UMASK_VALUE_G}]은 쓰기권한이 없음." >> $CREATE_XML_FILE 2>&1
fi

if [ ${UMASK_VALUE_O} -eq 0 -o ${UMASK_VALUE_O} -eq 1 -o ${UMASK_VALUE_O} -eq 4 -o ${UMASK_VALUE_O} -eq 5 ] ; then
    echo "취약: Other에 대한 umask값[${UMASK_VALUE_O}]은 쓰기권한이 존재함." >> $CREATE_XML_FILE 2>&1
    result="BAD"
else
    echo "양호: Other에 대한 umask값[${UMASK_VALUE_O}]은 쓰기권한이 없음." >> $CREATE_XML_FILE 2>&1
fi

echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###





Classification="2. 파일시스템"
Item="2.02 SUID, SGID 설정"
ItemCode="${SCRIPT_VERSION}_0202"
Risk="L"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "다음 주요 파일들에 대해 setUID 또는 setGID 설정되어 있는 경우 취약" >> $CREATE_XML_FILE 2>&1
echo "${CHECK_DIRS_SUID}" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "위 파일에 대해 SUID, SGID를 제거" >> $CREATE_XML_FILE 2>&1
echo "# chmod -s [파일명] " >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1

result="GOOD"
for CHECK_FILE in ${CHECK_DIRS_SUID}
do
    if [ -f ${CHECK_FILE} ] ; then
        CHECK_PERM=`ls -alL ${CHECK_FILE} | awk '{print $1}'`
        if [ `echo ${CHECK_PERM} | grep -i "s" | wc -l` -eq 0 ] ; then
             echo "${CHECK_FILE}:양호 (${CHECK_PERM})" >> $CREATE_XML_FILE 2>&1
        else
             echo "${CHECK_FILE}:취약 (${CHECK_PERM})" >> $CREATE_XML_FILE 2>&1
             result="BAD"
        fi
     else
        echo "${CHECK_FILE}:파일없음" >> $CREATE_XML_FILE 2>&1
     fi
done
echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###






Classification="2. 파일시스템"
Item="2.03 /etc/(x)inetd.conf 파일 권한 설정"
ItemCode="${SCRIPT_VERSION}_0203"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "/etc/(x)inetd.conf의 소유주가 root이고, other에 쓰기 권한이 없는 경우 양호" >> $CREATE_XML_FILE 2>&1
echo "그 외에는 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "/etc/(x)inetd.conf의 소유주=root, 권한=other의 쓰기권한 없음 설정" >> $CREATE_XML_FILE 2>&1
echo "(보안 강화 적용 방법 - /etc/inetd.conf)" >> $CREATE_XML_FILE 2>&1
echo "# chown root /etc/inetd.conf " >> $CREATE_XML_FILE 2>&1
echo "# chmod o-w /etc/inetd.conf " >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "(보안 강화 적용 방법 - /etc/xinetd.conf)" >> $CREATE_XML_FILE 2>&1
echo "# chown root /etc/xinetd.conf" >> $CREATE_XML_FILE 2>&1
echo "# chmod o-w /etc/xinetd.conf" >> $CREATE_XML_FILE 2>&1
echo "# chmod o-w /etc/xinetd.d/*" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
CHECK_FILES="${INETD_CONF} ${XINETD_CONF}"
for TARGET_FILE in ${CHECK_FILES}
do
    if [ -f ${TARGET_FILE} ] ; then
        echo "* ${TARGET_FILE} 점검..." >> $CREATE_XML_FILE 2>&1
        ls -alLd ${TARGET_FILE} >> $CREATE_XML_FILE 2>&1
        echo "가. ${TARGET_FILE} 파일의 소유가 root 여부 " >> $CREATE_XML_FILE 2>&1
        if [ `Check_Owner ${TARGET_FILE} "root"` -eq 1 ] ; then
            echo "양호: ${TARGET_FILE} 파일의 소유주는 root로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
        else
            echo "취약: ${TARGET_FILE} 파일의 소유주는 root와 다릅니다." >> $CREATE_XML_FILE 2>&1
            result="BAD"
        fi

        echo "____________________________________________________________" >> $CREATE_XML_FILE 2>&1
        echo "나. ${TARGET_FILE} 파일의 권한이 other의 쓰기권한 제거 여부 " >> $CREATE_XML_FILE 2>&1
        if [ `Check_Permission ${TARGET_FILE} "........w."` -eq 1 ] ; then
            echo "취약: ${TARGET_FILE} 파일의 권한은 other에 쓰기권한이 존재합니다." >> $CREATE_XML_FILE 2>&1
            result="BAD"
        else
            echo "양호: ${TARGET_FILE} 파일의 권한은 적절하게 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
        fi
    fi
done

echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###






Classification="2. 파일시스템"
Item="2.04 .history 파일 권한 설정"
ItemCode="${SCRIPT_VERSION}_0204"
Risk="M"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "해당 파일의 권한이 600 이상이거나 소유자는 자신으로 설정되어 있지 않을 경우 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "# chown 사용자ID /[사용자 홈디렉토리 경로]/.bash_history" >> $CREATE_XML_FILE 2>&1
echo "# chown 사용자ID /[사용자 홈디렉토리 경로]/.history" >> $CREATE_XML_FILE 2>&1
echo "# chown 사용자ID /[사용자 홈디렉토리 경로]/.sh_history" >> $CREATE_XML_FILE 2>&1
echo "# chmod 600 [사용자 홈디렉토리 경로]/.bash_history" >> $CREATE_XML_FILE 2>&1
echo "# chmod 600 [사용자 홈디렉토리 경로]/.history" >> $CREATE_XML_FILE 2>&1
echo "# chmod 600 [사용자 홈디렉토리 경로]/.sh_history" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
HOMEDIRS=''
for USER_ID in $CHECK_USER_LIST
do	
	HOMEDIRS=$HOMEDIRS`cat ${PASSWD} | grep "^$USER_ID:" | egrep -v 'false|nologin' | awk -F":" 'length($6) > 0 {print $1":"$6}' | sort -u|uniq`' '
done

echo $HOMEDIRS >> $CREATE_XML_FILE 2>&1

FILES=".sh_history .history .bash_history"
for USERS in $HOMEDIRS
do
	echo "- "$USERS" 점검 -" >> $CREATE_XML_FILE 2>&1
	for file in $FILES
	do
		user=`echo $USERS | awk -F":" '{print $1}'`
		dir=`echo $USERS | awk -F":" '{print $2}'`
		FILE=$dir/$file
		 
		if [ -f $FILE ]
		then	
			echo "["$FILE"] 점검"  >> $CREATE_XML_FILE 2>&1
			if [ $dir = "/" ]
			then
				if [ $user = "root" ]
				then
					ls -ald $FILE  >> $CREATE_XML_FILE 2>&1
					if [ `ls -ald $FILE | awk '{print $1}' | grep "...-------" | wc -l` -eq 0 ] 
					then
						echo "취약: 권한이 600보다 높게 설정되었습니다."   >> $CREATE_XML_FILE 2>&1
						result="BAD"
					else
						echo "양호: 권한이 600 이하로 설정되었습니다."   >> $CREATE_XML_FILE 2>&1
					fi	
					if [ `ls -ald $FILE | awk '{print $3}' | grep "$user" | wc -l` -eq 0 ]
					then
						echo "취약: 소유주가 "$user"가 아닙니다."  >> $CREATE_XML_FILE 2>&1
						result="BAD"
					else
						echo "양호: 소유주가 "$user"입니다."  >> $CREATE_XML_FILE 2>&1
					fi
				fi
			else

				ls -ald $FILE  >> $CREATE_XML_FILE 2>&1
				if [ `ls -ald $FILE | awk '{print $1}' | grep "...-------" | wc -l` -eq 0 ] 
				then
					echo "취약: 권한이 600보다 높게 설정되었습니다."  >> $CREATE_XML_FILE 2>&1 
					result="BAD"
				else
					echo "양호: 권한이 600 이하로 설정되었습니다." >> $CREATE_XML_FILE 2>&1  
				fi	
				if [ `ls -ald $FILE | awk '{print $3}' | grep "$user" | wc -l` -eq 0 ]
				then
					echo "취약: 소유주가 "$user"가 아닙니다." >> $CREATE_XML_FILE 2>&1 
					result="BAD"
				else
					echo "양호: 소유주가 "$user"입니다."  >> $CREATE_XML_FILE 2>&1
				fi
			fi
		else
			echo "["$FILE"] 해당파일 없음"  >> $CREATE_XML_FILE 2>&1 
		fi
		
	done
	echo "" >> $CREATE_XML_FILE 2>&1
done



echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###






Classification="2. 파일시스템"
Item="2.05 Crontab 파일 권한 설정 및 관리"
ItemCode="${SCRIPT_VERSION}_0205"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "crontab 관련파일의 other에 대한 권한이 존재할 경우 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "1) crontab 관련파일의 타사용자 권한 제거" >> $CREATE_XML_FILE 2>&1
echo "# chmod o-rwx /etc/crontabs " >> $CREATE_XML_FILE 2>&1
echo "# chmod o-rwx /etc/cron.daily/*" >> $CREATE_XML_FILE 2>&1
echo "# chmod o-rwx /etc/cron.hourly/*" >> $CREATE_XML_FILE 2>&1
echo "# chmod o-rwx /etc/cron.monthly/*" >> $CREATE_XML_FILE 2>&1
echo "# chmod o-rwx /etc/cron.weekly/*" >> $CREATE_XML_FILE 2>&1
echo "# chmod o-rwx /var/spool/cron/* " >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
for FILES in ${CHECH_CRONFILES}
do
	if [ -f $FILES ]
	then
		echo "" >> $CREATE_XML_FILE 2>&1
		echo "-----"$FILES"------" >> $CREATE_XML_FILE 2>&1
		CHECK_PERM=`ls -aldA $FILES`
		echo "["$CHECK_PERM"]"  >> $CREATE_XML_FILE 2>&1
		if [ `echo $CHECK_PERM | grep "^l" | wc -l` -eq 1 ]
		then
			LINK_ORIGIN_NAME=`echo $FILES  | awk '{print $NF}'`
			if [ `echo $LINK_ORIGIN_NAME | grep "/" | wc -l` -eq 0 ]
			then
				LINK_ORIGIN_NAME=`echo $FILES | awk -F"/" '{for (i=1 ; i < NF ; i++) {tmp=tmp$i"/";} print tmp}'`$LINK_ORIGIN_NAME
			fi
			CHECK_PERM=`ls -aldA $LINK_ORIGIN_NAME`
		fi


		if [ `echo $CHECK_PERM | awk '{print $1}' | grep -v ".......---" | wc -l` -eq 0 ]
		then
			echo "양호: Other에 대한 권한이 없습니다."  >> $CREATE_XML_FILE 2>&1
		else
			echo "취약: Other에 대한 권한이 존재합니다."  >> $CREATE_XML_FILE 2>&1
			result="BAD"
		fi
	else
		echo $FILES"이 존재하지 않음"  >> $CREATE_XML_FILE 2>&1
	fi
done

for FILES in ${CHECK_CRONDIRS}
do
	if [ -d $FILES ]
	then
		echo "" >> $CREATE_XML_FILE 2>&1
		echo "-----"$FILES"------" >> $CREATE_XML_FILE 2>&1
		CHECK_PERM=`ls -aldA $FILES`
		echo "["$CHECK_PERM"]"  >> $CREATE_XML_FILE 2>&1
			
		echo "- 이하 파일 점검 -" >> $CREATE_XML_FILE 2>&1
		ls -alA $FILES  | awk '{ if ($NF != "." && $NF != ".." && NF > 4) print $0}' >> $CREATE_XML_FILE 2>&1
		if [ `ls -alA $FILES  | awk '{ if ($NF != "." && $NF != ".." && NF > 4) print $0}' | grep "^-" | wc -l` -eq 0 ]
		then
			echo "-- 이하 파일 없음" >> $CREATE_XML_FILE 2>&1
		else

			echo "-- 일반파일 점검" >> $CREATE_XML_FILE 2>&1
			if [ `ls -alA $FILES  | awk '{ if ($NF != "." && $NF != ".." && NF > 4) print $0}' | grep "^-" | grep -v ".......---" | wc -l` -eq 0 ]
			then
				echo "양호: Other에 대한 권한이 없습니다."  >> $CREATE_XML_FILE 2>&1
			else
				echo "취약: Other에 대한 권한이 존재합니다."  >> $CREATE_XML_FILE 2>&1
				result="BAD"
			fi
			
			if [ `ls -alA $FILES  | awk '{ if ($NF != "." && $NF != ".." && NF > 4) print $0}' | grep "^l" | wc -l` -gt 0 ]
			then
				echo "-- 링크파일의 원본파일 점검" >> $CREATE_XML_FILE 2>&1
				LINK_ORIGIN_NAMES=`ls -alA $FILES  | awk '{ if ($NF != "." && $NF != ".." && NF > 4) print $0}' | grep "^l" | awk '{print $NF}'` 
				for LINK_ORIGIN_NAME in $LINK_ORIGIN_NAMES
				do
					if [ `echo $LINK_ORIGIN_NAME | grep "/" | wc -l` -eq 0 ]
					then
						LINK_ORIGIN_NAME=`echo $FILES | awk -F"/" '{for (i=1 ; i < NF ; i++) {tmp=tmp$i"/";} print tmp}'`$LINK_ORIGIN_NAME
					fi
					if [ `echo ${LINK_ORIGIN_NAME} | grep "^../" | wc -l` -ne 0 ]
					then
						LINK_ORIGIN_NAME=${FILES}/${LINK_ORIGIN_NAME}
					fi
					CHECK_PERM=`ls -aldA $LINK_ORIGIN_NAME`
					echo $CHECK_PERM   >> $CREATE_XML_FILE 2>&1
					if [ `echo $CHECK_PERM | awk '{print $1}' | grep -v ".......---" | wc -l` -eq 0 ]
					then
						echo "양호: Other에 대한 권한이 없습니다."  >> $CREATE_XML_FILE 2>&1
					else
						echo "취약: Other에 대한 권한이 존재합니다."  >> $CREATE_XML_FILE 2>&1
						result="BAD"
					fi

				done
			fi
		fi
	else
		echo $FILES"이 존재하지 않음"  >> $CREATE_XML_FILE 2>&1
	fi
done

echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###






Classification="2. 파일시스템"
Item="2.06 /etc/profile 파일 권한 설정"
ItemCode="${SCRIPT_VERSION}_0206"
Risk="M"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "${PROFILE}의 소유주가 root 또는 bin이고, other에 쓰기권한이 없을 경우 양호" >> $CREATE_XML_FILE 2>&1
echo "그 외에는 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "${PROFILE}의 소유주=root 또는 bin, 권한=other의 쓰기권한 없음으로 설정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
CHECK_FILE=${PROFILE}
if [ -f ${CHECK_FILE} ] ; then
    ls -alLd ${CHECK_FILE}  >> $CREATE_XML_FILE 2>&1
    if [ `ls -alL ${CHECK_FILE} | awk '{print $3}' | egrep "root|bin" | wc -l` -eq 1 ] ; then
        echo "양호: ${CHECK_FILE}은 root 또는 bin 소유로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: ${CHECK_FILE}은 root 또는 bin 외 다른 사용자 소유로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
	result="BAD"
    fi

    if [ `ls -alL ${CHECK_FILE} | awk '{print $1}' | grep "........w." | wc -l` -eq 0 ] ; then
        echo "양호: ${CHECK_FILE}의 Other에 쓰기권한이 없습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: ${CHECK_FILE}의 Other에 쓰기권한이 있습니다." >> $CREATE_XML_FILE 2>&1
	result="BAD"
    fi
else
    echo "${CHECK_FILE}: 파일없음" >> $CREATE_XML_FILE 2>&1
fi

echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###






Classification="2. 파일시스템"
Item="2.07 /etc/hosts 파일 권한 설정"
ItemCode="${SCRIPT_VERSION}_0207"
Risk="M"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "${HOSTS}의 소유주가 root 또는 bin이고, other에 쓰기권한이 없을 경우 양호" >> $CREATE_XML_FILE 2>&1
echo "그 외에는 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "${HOSTS}의 소유주=root 또는 bin, 권한=other의 쓰기권한 없음으로 설정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
CHECK_FILE=${HOSTS}
if [ -f ${CHECK_FILE} ] ; then
    ls -alLd ${CHECK_FILE}  >> $CREATE_XML_FILE 2>&1
    if [ `ls -alL ${CHECK_FILE} | awk '{print $3}' | egrep "root|bin" | wc -l` -eq 1 ] ; then
        echo "양호: ${CHECK_FILE}은 root 또는 bin 소유로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: ${CHECK_FILE}은 root 또는 bin 외 다른 사용자 소유로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
	result="BAD"
    fi

    if [ `ls -alL ${CHECK_FILE} | awk '{print $1}' | grep "........w." | wc -l` -eq 0 ] ; then
        echo "양호: ${CHECK_FILE}의 Other에 쓰기권한이 없습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: ${CHECK_FILE}의 Other에 쓰기권한이 있습니다." >> $CREATE_XML_FILE 2>&1
	result="BAD"
    fi
else
    echo "${CHECK_FILE}: 파일없음" >> $CREATE_XML_FILE 2>&1
fi
echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###






Classification="2. 파일시스템"
Item="2.08 /etc/issue 파일권한 설정"
ItemCode="${SCRIPT_VERSION}_0208"
Risk="M"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1

NA_LIST="AIX"
if [ `NA_CHECK ${NA_LIST}` -eq 1 ]; then
    RESULT="N/A"
    ### 기준설명 ###
    echo "<Standard>" >> $CREATE_XML_FILE 2>&1
    echo "해당 OS는 해당사항 없음" >>  $CREATE_XML_FILE 2>&1
    echo "</Standard>" >> $CREATE_XML_FILE 2>&1
    ### 조치방법 ###
    echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
    echo "해당 OS는 해당사항 없음" >>  $CREATE_XML_FILE 2>&1
    echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
    ### 현재설정 ###
    echo "<Issue>" >> $CREATE_XML_FILE 2>&1
    echo "해당 OS는 해당사항 없음" >>  $CREATE_XML_FILE 2>&1
    echo "</Issue>" >> $CREATE_XML_FILE 2>&1
    ### 진단결과 ###
    echo "<Result>" >> $CREATE_XML_FILE 2>&1
    echo ${RESULT}
    echo ${RESULT} >> $CREATE_XML_FILE 2>&1
    echo "</Result>" >> $CREATE_XML_FILE 2>&1
    echo "</row>" >> $CREATE_XML_FILE 2>&1
    ### end ###
else
    ### 기준설명 ###
    echo "<Standard>" >> $CREATE_XML_FILE 2>&1
    echo "${ISSUE}의 소유주가 root 또는 bin이고, other에 쓰기권한이 없을 경우 양호" >> $CREATE_XML_FILE 2>&1
    echo "그 외에는 취약" >> $CREATE_XML_FILE 2>&1
    echo "</Standard>" >> $CREATE_XML_FILE 2>&1
    ### 조치방법 ###
    echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
    echo "${ISSUE}의 소유주=root 또는 bin, 권한=other의 쓰기권한 없음으로 설정" >> $CREATE_XML_FILE 2>&1
    echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
    ### 현재설정 ###
    echo "<Issue>" >> $CREATE_XML_FILE 2>&1
    result="GOOD"
    CHECK_FILE=${ISSUE}
    if [ -f ${ISSUE} ] ; then
        ls -alLd ${CHECK_FILE}  >> $CREATE_XML_FILE 2>&1
        if [ `ls -alL ${CHECK_FILE} | awk '{print $3}' | egrep "root|bin" | wc -l` -eq 1 ] ; then
            echo "양호: ${CHECK_FILE}은 root 또는 bin 소유로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
        else
            echo "취약: ${CHECK_FILE}은 root 또는 bin 외 다른 사용자 소유로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
        	result="BAD"
        fi

        if [ `ls -alL ${CHECK_FILE} | awk '{print $1}' | grep "........w." | wc -l` -eq 0 ] ; then
            echo "양호: ${CHECK_FILE}의 Other에 쓰기권한이 없습니다." >> $CREATE_XML_FILE 2>&1
        else
            echo "취약: ${CHECK_FILE}의 Other에 쓰기권한이 있습니다." >> $CREATE_XML_FILE 2>&1
    	result="BAD"
        fi
    else
        echo "${CHECK_FILE}: 파일없음" >> $CREATE_XML_FILE 2>&1
    fi
    echo "</Issue>" >> $CREATE_XML_FILE 2>&1
    ### 진단결과 ###
    echo "<Result>" >> $CREATE_XML_FILE 2>&1
    echo ${result}
    echo ${result} >> $CREATE_XML_FILE 2>&1
    echo "</Result>" >> $CREATE_XML_FILE 2>&1
    echo "</row>" >> $CREATE_XML_FILE 2>&1
    ### end ###
fi






Classification="2. 파일시스템"
Item="2.09 사용자 홈디렉토리 및 파일 관리"
ItemCode="${SCRIPT_VERSION}_0209"
Risk="M"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "- 홈디렉터리 권한중 Other에 아무런 권한도 부여되어 있지 않을 경우" >> $CREATE_XML_FILE 2>&1
echo "- 홈디렉터리 내 환경변수 파일 권한중 Other 에 쓰기권한이 부여되어 있지 않을 경우" >> $CREATE_XML_FILE 2>&1
echo "- 홈디렉터리가 존재하지 않는 계정이 발견되지 않는 경우" >> $CREATE_XML_FILE 2>&1
echo "위 모든 조건을 만족하지 않을 경우 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "1)홈디렉터리의 타사용자 모든권한 제거" >> $CREATE_XML_FILE 2>&1
echo "# chmod o-rwx [홈디렉토리]" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "2)홈디렉터리 내 파일의 타사용자 쓰기권한 제거" >> $CREATE_XML_FILE 2>&1
echo "# chmod o-w [파일명]" >> $CREATE_XML_FILE 2>&1
echo "# chmod o-w [홈디렉토리 경로] [파일명]  " >> $CREATE_XML_FILE 2>&1
echo "(홈디렉토리의 설정파일에서 권한을 제거할 경우)" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "3)홈 디렉터리가 없거나 [/]로 설정되어 있는 일반 사용자 계정 홈 디렉터리 지정 또는 계정 삭제" >> $CREATE_XML_FILE 2>&1
echo "# cat /etc/passwd" >> $CREATE_XML_FILE 2>&1
echo "# usermod -d /[홈디렉터리 경로][사용자ID]" >> $CREATE_XML_FILE 2>&1
echo "# userdel [사용자ID]" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
HOMEDIRS=''
NONHOMEDIRS=''
for USER_ID in ${CHECK_USER_LIST}
do	
    HOMEDIRS=$HOMEDIRS`cat /etc/passwd | grep "^${USER_ID}:" | egrep -v 'false|nologin' | awk -F":" 'length($6) > 0 {print $1":"$6}' | sort -u|uniq`' '
    NONHOMEDIRS=$NONHOMEDIRS`cat /etc/passwd | grep "^${USER_ID}:" | egrep -v 'false|nologin' | awk -F":" 'length($6) == 0 {print $0}' | sort -u|uniq`' '
done

FILES=".profile .kshrc .cshrc .bashrc .bash_profile .login .exrc .netrc .dtprofile .Xdefaults "

result="GOOD"
for HOMEDIR in $HOMEDIRS
do
    user_id=`echo ${HOMEDIR} | awk -F":" '{print $1}'`
    dir=`echo ${HOMEDIR} | awk -F":" '{print $2}'`
    echo "[ID: ${user_id}, HOMEDIR: ${dir}] 점검" >> $CREATE_XML_FILE 2>&1
    if [ -d $dir ] ;then
        if [ $dir = "/" ] ; then
	    echo "check ${dir} ... N/A : [/]에 대한 권한점검은 제외" >> $CREATE_XML_FILE 2>&1
	else
            if [ `ls -ald ${dir} | grep -v "^l"  | awk '{print $1}' | grep ".......---" | wc -l` -eq 1 ] ; then
                echo "check ${dir} ... 양호: Other에 대한 권한이 없습니다." >> $CREATE_XML_FILE 2>&1
            else
                echo "check ${dir} ... 취약: Other에 대한 권한이 있습니다." >> $CREATE_XML_FILE 2>&1
                result="BAD"
            fi
	fi
        for file in $FILES
        do
            FILE=${dir}/${file}
            if [ -f $FILE ] ; then
                if [ `ls -alL $FILE | grep -v "^l"  | awk '{print $1}' | grep "........-." | wc -l` -eq 1 ]; then
                    echo "check "$FILE" ... 양호: Other에 대한 쓰기권한이 없습니다." >> $CREATE_XML_FILE 2>&1
		else
		    echo "check "$FILE" ... 취약: Other에 대한 쓰기권한이 있습니다." >> $CREATE_XML_FILE 2>&1
		    result="BAD"
		fi
            else
	        echo "check "$FILE" ... N/A: 파일이 없습니다." >> $CREATE_XML_FILE 2>&1
            fi
	done
	echo "" >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: 실제 홈 디렉토리가 없습니다." >> $CREATE_XML_FILE 2>&1
	result="BAD"
    fi
done

echo "- 홈디렉토리가 없는 계정리스트" >> $CREATE_XML_FILE 2>&1
for NONUSER in $NONHOMEDIRS
do
	echo $NONUSER >> $CREATE_XML_FILE 2>&1
	result="BAD" >> $CREATE_XML_FILE 2>&1
done


echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###






Classification="2. 파일시스템"
Item="2.10 중요 디렉토리 파일 권한 설정"
ItemCode="${SCRIPT_VERSION}_0210"
Risk="M"
CHECKDIRS="/sbin /etc /bin /usr/bin /usr/lbin /usr/sbin"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "아래 디렉토리에 대해 root 또는 bin의 소유주가 아니거나 other의 쓰기권한이 있는 경우 취약" >> $CREATE_XML_FILE 2>&1
echo "${CHECKDIRS}" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "# chown root [디렉토리명]" >> $CREATE_XML_FILE 2>&1
echo "# chmod o-w [디렉토리명]" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1

result="GOOD"
for FILES in $CHECKDIRS
do
	if [ -d $FILES ]
	then
		ls -alLd $FILES  >> $CREATE_XML_FILE 2>&1
		if [ `ls -ald $FILES | awk '{print $3}' | egrep "root|bin" | wc -l` -eq 1 ] ; then
			echo "양호: ${FILES}은 root 또는 bin 소유로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
			
		else
			echo "취약: ${FILES}은 root 또는 bin 외 다른 사용자 소유로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
			result="BAD"
		fi
		perm=`ls -alLd $FILES | awk '{print $1}'`
		if [ `echo ${perm} | grep "........w." | wc -l` -eq 1 ] ; then
			echo "취약: ${FILES}의 Other에 쓰기권한이 있습니다." >> $CREATE_XML_FILE 2>&1
			result="BAD"
		else
			echo "양호: ${FILES}의 Other에 쓰기권한이 없습니다." >> $CREATE_XML_FILE 2>&1
		fi
	else
		echo $FILES": 디렉터리 없음" >> $CREATE_XML_FILE 2>&1
	fi

done
echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###






Classification="2. 파일시스템"
Item="2.11 PATH 환경변수 설정"
ItemCode="${SCRIPT_VERSION}_0211"
Risk="M"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "PATH 환경변수에 [.]이 맨 앞이나 중간에 포함되어 있을 경우" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "현재 디렉토리를 의미하는 “.”이 PATH 맨 앞이나 중간에 위치하면 안되며, 애플리케이션 구성상 [.]을 사용해야 하는 경우에는 [.]을 PATH 환경변수의 마지막으로 이동" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "/etc/profile, root 계정의 환경변수 파일, 일반계정의 환경변수 파일을 순차적으로 검색." >> $CREATE_XML_FILE 2>&1
echo "#env | grep PATH" >> $CREATE_XML_FILE 2>&1
echo "#cat /.profile | grep PATH" >> $CREATE_XML_FILE 2>&1
echo "#cat /etc/profile | grep PATH" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
echo $PATH >> $CREATE_XML_FILE 2>&1
if [ `echo $PATH | egrep "^\.:|:\.:" | wc -l` -eq 0 ] ; then
	echo "양호: PATH 중간에 [.]가 존재하지 않습니다. " >> $CREATE_XML_FILE 2>&1
	result="GOOD"
else
	echo "취약: PATH 중간에 [.]가 존재합니다. " >> $CREATE_XML_FILE 2>&1
	result="BAD"
fi
echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###






Classification="2. 파일시스템"
Item="2.12 FTP 접근제어 파일 권한설정"
ItemCode="${SCRIPT_VERSION}_0212"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "FTP서비스가 ${INETD_CONF} 등록되어있거나 LISTEN 포트 중 21번 또는 [ftp]가 있는 경우 FTP 동작중임" >> $CREATE_XML_FILE 2>&1
echo "FTP가 동작중일 경우, ftpusers파일이 root 소유이면서 other에 쓰기권한이 없을 경우 양호" >> $CREATE_XML_FILE 2>&1
echo "이 외의 경우 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "FTP를 중지하거나 ftpusers 파일의 소유주=root, 권한=other의 쓰기권한 없음으로 설정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
ftp_service="disable"

if [ -f ${INETD_CONF} ] ; then
    if [ `cat ${INETD_CONF} | grep -v "#" | grep ftp | wc -l` -eq 0 ] ; then
        echo "${INETD_CONF}에 ftp 서비스 설정 없음" >> $CREATE_XML_FILE 2>&1
    else
        echo "${INETD_CONF}에 ftp 서비스 설정 있음" >> $CREATE_XML_FILE 2>&1
        ftp_service="enable"
    fi
fi

if [ ${SYSTEM_OS} = "SunOS" ] ;then
	NET_STAT=`${Network_Status} | grep "LISTEN" | egrep ":21 |\*\.21 |ftp"`
else
	NET_STAT=`${Network_Status} | grep "LISTEN" | grep "tcp" | egrep ":21 |\*\.21 |ftp"`
fi

echo ${NET_STAT}>> $CREATE_XML_FILE 2>&1
if [ "${NET_STAT}-" = "-" ] ; then
    echo "FTP포트(21) 존재하지 않음" >> $CREATE_XML_FILE 2>&1
else
    echo "FTP포트(21) 또는 FTP관련 포트가 LISTEN 중임" >> $CREATE_XML_FILE 2>&1
    ftp_service="enable"
fi



if [ $ftp_service = "enable" ]; then 
    FTPUSERS="/etc/ftpusers /etc/ftpd/ftpusers /etc/vsftpd/ftpusers"
    for FILES in $FTPUSERS
    do
        if [ -f $FILES ] ; then
            if [ `ls -alL $FILES | awk '{print $3}' | grep "root" | wc -l` -eq 1 ] ; then
                echo "양호: "$FILES"은 root 소유로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
                result_1="GOOD"
            else
                echo "취약: "$FILES"은 root 외 다른 사용자 소유로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
                ls -alL $FILES  >> $CREATE_XML_FILE 2>&1
                result_1="BAD"
            fi

            if [ `ls -alL $FILES | awk '{print $1}' | grep "........w." | wc -l` -eq 0 ] ; then
                echo "양호: "$FILES"의 Other에 쓰기권한이 없습니다." >> $CREATE_XML_FILE 2>&1
                result_2="GOOD"
            else
                echo "취약: "$FILES"의 Other에 쓰기권한이 있습니다." >> $CREATE_XML_FILE 2>&1
                ls -alL $FILES >> $CREATE_XML_FILE 2>&1
                result_2="BAD"
            fi
        else
            echo $FILES": 파일없음" >> $CREATE_XML_FILE 2>&1
        fi

    done


    if [ $result_1 = "BAD" ] ; then
        result="BAD"
    else	
        if [ $result_2 = "CHECK" ] ; then
            result="CHECK"
	else
	    if [ $result_2 = "BAD" ] ; then
	        result="BAD"
	    else
	        result="GOOD"
            fi
        fi
    fi
else
    echo "현재 FTP 서비스가 존재하지 않으므로 점검 제외됨" >> $CREATE_XML_FILE 2>&1
    result="GOOD"
fi
echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###






Classification="2. 파일시스템"
Item="2.13 root 원격 접근제어 파일 권한"
ItemCode="${SCRIPT_VERSION}_0213"
Risk="M"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "${LOGIN_CONF}의 소유주가 root 또는 bin이고, other에 쓰기권한이 없을 경우 양호" >> $CREATE_XML_FILE 2>&1
echo "그 외에는 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "${LOGIN_CONF}의 소유주=root 또는 bin, 권한=other의 쓰기권한 없음으로 설정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
CHECK_FILE=${LOGIN_CONF}
if [ -f ${CHECK_FILE} ] ; then
    ls -alLd ${CHECK_FILE}  >> $CREATE_XML_FILE 2>&1
    if [ `ls -alL ${CHECK_FILE} | awk '{print $3}' | egrep "root|bin" | wc -l` -eq 1 ] ; then
        echo "양호: ${CHECK_FILE}은 root 또는 bin 소유로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: ${CHECK_FILE}은 root 또는 bin 외 다른 사용자 소유로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
	result="BAD"
    fi

    if [ `ls -alL ${CHECK_FILE} | awk '{print $1}' | egrep "........w.|.....w...." | wc -l` -eq 0 ] ; then
        echo "양호: ${CHECK_FILE}의 Group 또는 Other에 쓰기권한이 없습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: ${CHECK_FILE}의 Group 또는 Other에 쓰기권한이 있습니다." >> $CREATE_XML_FILE 2>&1
	result="BAD"
    fi
else
    echo "${CHECK_FILE}: 파일없음" >> $CREATE_XML_FILE 2>&1
fi
echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###






Classification="2. 파일시스템"
Item="2.14 NFS 접근제어 파일 권한 설정"
ItemCode="${SCRIPT_VERSION}_0214"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "${NFS_CONF}의 소유주가 root 또는 bin이고, other에 쓰기권한이 없을 경우 양호" >> $CREATE_XML_FILE 2>&1
echo "그 외에는 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "${NFS_CONF}의 소유주=root 또는 bin, 권한=other의 쓰기권한 없음으로 설정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
CHECK_FILE=${NFS_CONF}
if [ -f ${CHECK_FILE} ] ; then
    ls -alLd ${CHECK_FILE}  >> $CREATE_XML_FILE 2>&1
    if [ `ls -alL ${CHECK_FILE} | awk '{print $3}' | egrep "root|bin" | wc -l` -eq 1 ] ; then
        echo "양호: ${CHECK_FILE}은 root 또는 bin 소유로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: ${CHECK_FILE}은 root 또는 bin 외 다른 사용자 소유로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
	result="BAD"
    fi

    if [ `ls -alL ${CHECK_FILE} | awk '{print $1}' | egrep "........w.|.....w...." | wc -l` -eq 0 ] ; then
        echo "양호: ${CHECK_FILE}의 Group 또는 Other에 쓰기권한이 없습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: ${CHECK_FILE}의 Group 또는 Other에 쓰기권한이 있습니다." >> $CREATE_XML_FILE 2>&1
	result="BAD"
    fi
else
    echo "${CHECK_FILE}: 파일없음" >> $CREATE_XML_FILE 2>&1
fi
echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###






Classification="2. 파일시스템"
Item="2.15 /etc/services 파일 권한 설정"
ItemCode="${SCRIPT_VERSION}_0215"
Risk="M"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "${SERVICES}의 소유주가 root 또는 bin이고, other에 쓰기권한이 없을 경우 양호" >> $CREATE_XML_FILE 2>&1
echo "그 외에는 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "${SERVICES}의 소유주=root 또는 bin, 권한=other의 쓰기권한 없음으로 설정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
CHECK_FILE=${SERVICES}
if [ -f ${CHECK_FILE} ] ; then
    ls -alLd ${CHECK_FILE}  >> $CREATE_XML_FILE 2>&1
    if [ `ls -alL ${CHECK_FILE} | awk '{print $3}' | egrep "root|bin" | wc -l` -eq 1 ] ; then
        echo "양호: ${CHECK_FILE}은 root 또는 bin 소유로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: ${CHECK_FILE}은 root 또는 bin 외 다른 사용자 소유로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
	result="BAD"
    fi

	if [ `ls -alL ${CHECK_FILE} | awk '{print $1}' | egrep "........w.|.....w...." | wc -l` -eq 0 ] ; then
        echo "양호: ${CHECK_FILE}의 Group 또는 Other에 쓰기권한이 없습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: ${CHECK_FILE}의 Group 또는 Other에 쓰기권한이 있습니다." >> $CREATE_XML_FILE 2>&1
	result="BAD"
    fi
else
    echo "${CHECK_FILE}: 파일없음" >> $CREATE_XML_FILE 2>&1
fi
echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###






Classification="2. 파일시스템"
Item="2.16 부팅 스크립트 파일 권한 설정"
ItemCode="${SCRIPT_VERSION}_0216"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "부팅 스크립트의 소유주가 root 또는 bin이고, other에 쓰기권한이 없을 경우 양호" >> $CREATE_XML_FILE 2>&1
echo "그 외에는 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "부팅 스크립트의 소유주=root 또는 bin, 권한=other의 쓰기권한 없음으로 설정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
TMPDIR="/etc/inittab "`ls -ald /etc/rc* | grep "^l" | awk '{print $10}'`
CHECKDIR=`ls -ald /etc/rc* | egrep "^d|^-" | awk '{print $9}'`

for FILES in $TMPDIR
do
    CHECKDIR=$CHECKDIR" /etc/"$FILES
done


for FILES in $CHECKDIR
do
    if [ -f $FILES ] ; then
        ls -alL $FILES  >> $CREATE_XML_FILE 2>&1
        if [ `ls -alL $FILES | awk '{print $1}' | grep "........w." | wc -l` -eq 0 ] ; then
            echo "양호: Other에 대한 쓰기권한 없습니다."  >> $CREATE_XML_FILE 2>&1
        else
            echo "취약: Other에 대한 쓰기권한 있습니다."  >> $CREATE_XML_FILE 2>&1
            result="BAD"
        fi
	
    fi
	
    if [ -d $FILES ] ; then
        echo "----------------"  >> $CREATE_XML_FILE 2>&1
        echo "["`ls -ald ${FILES}`"]"  >> $CREATE_XML_FILE 2>&1
        echo "-----"$FILES"------"
        if [ `ls -alLd $FILES | awk '{print $1}' | grep "........w." | wc -l` -eq 0 ] ; then
            echo "양호: Other에 대한 쓰기권한 없습니다."  >> $CREATE_XML_FILE 2>&1
        else
            echo "취약: Other에 대한 쓰기권한 있습니다." >> $CREATE_XML_FILE 2>&1
            result="BAD"
        fi
        echo "(하위 양호한 파일은 제외됨)"  >> $CREATE_XML_FILE 2>&1
        CHECK_FILES=`ls -al ${FILES} | awk '{print $9}'`
        for CF in ${CHECK_FILES}
        do
            if [ ${CF} != "." ] && [ ${CF} != ".." ] ; then
                CHECK_FILE=${FILES}/${CF}
                CHECK_PERM=`ls -alLd ${CHECK_FILE} | awk '{print $1}'`
                if [ `echo ${CHECK_PERM} | grep "........w." | wc -l` -eq 1 ] ; then 
                    echo "취약: ${CHECK_FILE} (${CHECK_PERM})" >> $CREATE_XML_FILE 2>&1
	            result=BAD
                fi
            fi
        done
    fi
done
echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###






Classification="2. 파일시스템"
Item="2.17 /etc/hosts.allow, /etc/hosts.deny 설정"
ItemCode="${SCRIPT_VERSION}_0217"
Risk="L"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "${HOSTS_ALLOW} 및 ${HOSTS_DENY}의 소유주가 root이고, other에 쓰기권한이 없을 경우 양호" >> $CREATE_XML_FILE 2>&1
echo "${HOSTS_ALLOW}에 ALL 설정 없음" >> $CREATE_XML_FILE 2>&1
echo "${HOSTS_DENY}에 ALL:ALL 설정 있음" >> $CREATE_XML_FILE 2>&1
echo "그 외에는 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "${HOSTS_ALLOW} 및 ${HOSTS_DENY}의 소유주=root, 권한=other의 쓰기권한 없음으로 설정" >> $CREATE_XML_FILE 2>&1
echo "${HOSTS_ALLOW}에 ALL 설정제거 또는 소명필요" >> $CREATE_XML_FILE 2>&1
echo "${HOSTS_DENY}에 ALL:ALL 설정적용" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
TARGET_FILE=${HOSTS_ALLOW}
echo "*  ${TARGET_FILE} 점검..." >> $CREATE_XML_FILE 2>&1
if [ -f ${TARGET_FILE} ] ; then
    ls -alLd ${TARGET_FILE} >> $CREATE_XML_FILE 2>&1
    echo "가. ${TARGET_FILE} 파일의 소유가 root 여부 " >> $CREATE_XML_FILE 2>&1
    if [ `Check_Owner ${TARGET_FILE} "root"` -eq 1 ] ; then
        echo "양호: ${TARGET_FILE} 파일의 소유주는 root로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: ${TARGET_FILE} 파일의 소유주는 root와 다릅니다." >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi

    echo "나. ${TARGET_FILE} 파일의 권한이 Other에 대한 쓰기권한 제거 여부 " >> $CREATE_XML_FILE 2>&1
    if [ `Check_Permission ${TARGET_FILE} "........w."` -eq 1 ] ; then
        echo "취약: ${TARGET_FILE} 파일의 권한은 Other에 대한 쓰기권한이 존재합니다." >> $CREATE_XML_FILE 2>&1
        result="BAD"
    else    
        echo "양호: ${TARGET_FILE} 파일의 권한은 적절하게 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
    fi

    echo "다. ${TARGET_FILE} 전체허용 설정 제거 여부 " >> $CREATE_XML_FILE 2>&1

    if [ `cat ${TARGET_FILE} | grep -v "^#" | grep "ALL" | wc -l` -eq 0 ] ; then 
        echo "양호: ${TARGET_FILE}에 [ALL]이 없습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: ${TARGET_FILE}에 [ALL]이 있습니다." >> $CREATE_XML_FILE 2>&1
        cat ${TARGET_FILE} | grep -v "^#" | grep "ALL" >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi
else
    echo "취약: ${TARGET_FILE} 파일이 없습니다." >> $CREATE_XML_FILE 2>&1
    result="BAD"
fi
echo "____________________________________________________________" >> $CREATE_XML_FILE 2>&1
TARGET_FILE=${HOSTS_DENY}
echo "*  ${TARGET_FILE} 점검..." >> $CREATE_XML_FILE 2>&1
if [ -f ${TARGET_FILE} ] ; then
    ls -alLd ${TARGET_FILE} >> $CREATE_XML_FILE 2>&1
    echo "가. ${TARGET_FILE} 파일의 소유가 root 여부 " >> $CREATE_XML_FILE 2>&1
    if [ `Check_Owner ${TARGET_FILE} "root"` -eq 1 ] ; then
        echo "양호: ${TARGET_FILE} 파일의 소유주는 root로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: ${TARGET_FILE} 파일의 소유주는 root와 다릅니다." >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi

    echo "나. ${TARGET_FILE} 파일의 권한이 Other에 대한 쓰기권한 제거 여부 " >> $CREATE_XML_FILE 2>&1
    if [ `Check_Permission ${TARGET_FILE} "........w."` -eq 1 ] ; then
        echo "취약: ${TARGET_FILE} 파일의 권한은 Other에 대한 쓰기권한이 존재합니다." >> $CREATE_XML_FILE 2>&1
        result="BAD"
    else    
        echo "양호: ${TARGET_FILE} 파일의 권한은 적절하게 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
    fi

    echo "다. ${TARGET_FILE} 전체허용 설정 제거 여부 " >> $CREATE_XML_FILE 2>&1
    if [ `cat ${TARGET_FILE} | grep -v "^#" | grep "ALL:ALL" | wc -l` -eq 0 ] ; then
        echo "취약: ${TARGET_FILE}에 [ALL:ALL]이 없습니다." >> $CREATE_XML_FILE 2>&1
        result="BAD"
    else
        echo "양호: ${TARGET_FILE}에 [ALL:ALL]이 있습니다." >> $CREATE_XML_FILE 2>&1
    fi
else
    echo "취약: ${TARGET_FILE} 파일이 없습니다." >> $CREATE_XML_FILE 2>&1
    result="BAD"
fi



echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###






Classification="2. 파일시스템"
Item="2.18 기타 중요파일 권한 설정"
ItemCode="${SCRIPT_VERSION}_0218"
Risk="L"
TARGET_FILES=`ls -ad /etc/rc*.d/*`" /etc/inittab /etc/syslog.conf /etc/snmp/conf/snmpd.conf"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "아래 파일의 other에 쓰기권한이 없을 경우 양호" >> $CREATE_XML_FILE 2>&1
echo "${TARGET_FILES}" >> $CREATE_XML_FILE 2>&1
echo "그 외에는 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "위 파일에 대해 권한=other의 쓰기권한 없음으로 설정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
NA_CHECK_VALUE=1
if [ ${SYSTEM_OS} = "SunOS" ] ;then
    if [ `ToInt ${VERSION}` -ge 510 ] && [ `ToInt ${VERSION}` -lt 520 ]  ; then
	NA_CHECK_VALUE=0
    fi
fi

if [ ${NA_CHECK_VALUE} -eq 1 ]; then
    RESULT="N/A"
    ### 현재설정 ###
    echo "<Issue>" >> $CREATE_XML_FILE 2>&1
    echo "해당 OS는 해당사항 없음" >>  $CREATE_XML_FILE 2>&1
    echo "</Issue>" >> $CREATE_XML_FILE 2>&1
    ### 진단결과 ###
    echo "<Result>" >> $CREATE_XML_FILE 2>&1
    echo ${RESULT}
    echo ${RESULT} >> $CREATE_XML_FILE 2>&1
    echo "</Result>" >> $CREATE_XML_FILE 2>&1
    echo "</row>" >> $CREATE_XML_FILE 2>&1
    ### end ###
else
    ### 현재설정 ###
    echo "<Issue>" >> $CREATE_XML_FILE 2>&1
    result="GOOD"
    
    for FILE in ${TARGET_FILES}
    do
        if [ -f $FILE ] ; then
            if [ `ls -alL $FILE | awk '{print $1}' | grep "........w." | wc -l` -eq 0 ] ; then
                echo "양호: "$FILE"의 Other에 쓰기권한이 없습니다." >> $CREATE_XML_FILE 2>&1
            else
                echo "취약: "$FILE"의 Other에 쓰기권한이 있습니다." >> $CREATE_XML_FILE 2>&1
                result="BAD"
            fi
        else
            echo "취약: "$FILE" 파일이 없습니다." >> $CREATE_XML_FILE 2>&1
            result="BAD"
	
    fi
    done
    echo "</Issue>" >> $CREATE_XML_FILE 2>&1
    ### 진단결과 ###
    echo "<Result>" >> $CREATE_XML_FILE 2>&1
    echo ${result}
    echo ${result} >> $CREATE_XML_FILE 2>&1
    echo "</Result>" >> $CREATE_XML_FILE 2>&1
    echo "</row>" >> $CREATE_XML_FILE 2>&1
    ### end ###
fi






Classification="2. 파일시스템"
Item="2.19 at 파일 소유자 및 권한 설정"
ItemCode="${SCRIPT_VERSION}_0219"
Risk="M"
CHECK_FILES="${AT_ALLOW} ${AT_DENY}"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "${CHECK_FILES}의 소유주가 root이고, 640이하일 경우 양호" >> $CREATE_XML_FILE 2>&1
echo "그 외에는 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "${CHECK_FILES}의 소유주=root, 권한=640이하로 설정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
for TARGET_FILE in ${CHECK_FILES}
do
    if [ -f ${TARGET_FILE} ] ; then
        ls -alLd ${TARGET_FILE} >> $CREATE_XML_FILE 2>&1
        echo "가. ${TARGET_FILE} 파일의 소유가 root 여부 " >> $CREATE_XML_FILE 2>&1
        if [ `Check_Owner ${TARGET_FILE} "root"` -eq 1 ] ; then
            echo "양호: ${TARGET_FILE} 파일의 소유주는 root로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
        else
            echo "취약: ${TARGET_FILE} 파일의 소유주는 root와 다릅니다." >> $CREATE_XML_FILE 2>&1
            result="BAD"
        fi

        echo "나. ${TARGET_FILE} 파일의 권한이 Other에 대한 권한제거 여부 " >> $CREATE_XML_FILE 2>&1
        if [ `Check_Permission ${TARGET_FILE} ".....-----"` -eq 1 ] ; then
            echo "양호: ${TARGET_FILE} 파일의 권한은 적절하게 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
        else
            echo "취약: ${TARGET_FILE} 파일의 권한은 Other에 대한 권한이 존재합니다" >> $CREATE_XML_FILE 2>&1
            result="BAD"
        fi
        echo "____________________________________________________________" >> $CREATE_XML_FILE 2>&1
    else
        echo "확인: ${TARGET_FILE} 해당파일 없음" >> $CREATE_XML_FILE 2>&1
    fi
done


echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###






Classification="2. 파일시스템"
Item="2.20 hosts.lpd 파일 소유자 및 권한 설정"
ItemCode="${SCRIPT_VERSION}_0220"
Risk="L"
TARGET_FILE=${HOSTS_LPD}
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "${TARGET_FILE}의 소유주가 root이고, 600이하일 경우 양호" >> $CREATE_XML_FILE 2>&1
echo "그 외에는 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "${TARGET_FILE}의 소유주=root, 권한=600이하로 설정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
if [ -f ${TARGET_FILE} ] ; then
    ls -alLd ${TARGET_FILE} >> $CREATE_XML_FILE 2>&1
    echo "가. ${TARGET_FILE} 파일의 소유가 root 여부 " >> $CREATE_XML_FILE 2>&1
    if [ `Check_Owner ${TARGET_FILE} "root"` -eq 1 ] ; then
        echo "양호: ${TARGET_FILE} 파일의 소유주는 root로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: ${TARGET_FILE} 파일의 소유주는 root와 다릅니다." >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi

    echo "____________________________________________________________" >> $CREATE_XML_FILE 2>&1
    echo "나. ${TARGET_FILE} 파일의 권한이 600 이하 여부 " >> $CREATE_XML_FILE 2>&1
    if [ `Check_Permission ${TARGET_FILE} "...-------"` -eq 1 ] ; then
        echo "양호: ${TARGET_FILE} 파일의 권한은 적절하게 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: ${TARGET_FILE} 파일의 권한은 기준(600)와 다릅니다." >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi
else
    echo "확인: ${TARGET_FILE} 해당파일 없음" >> $CREATE_XML_FILE 2>&1
fi
echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###






Classification="3. 네트워크 서비스"
Item="3.01 RPC 서비스 제한"
ItemCode="${SCRIPT_VERSION}_0301"
Risk="M"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "아래 RPC 서비스가 구동중일 경우 취약" >> $CREATE_XML_FILE 2>&1
echo "${CHECK_RPC_LIST}" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "Inetd의 경우 아래 내용 추가 조치" >> $CREATE_XML_FILE 2>&1
echo "(1) /etc/inetd.conf 파일에서 해당 라인 # 처리(주석처리) 후 inetd 재 시동" >> $CREATE_XML_FILE 2>&1
echo "# vi /etc/inetd.conf" >> $CREATE_XML_FILE 2>&1
echo "(수정전)  rpc dgram  udp  wait root /usr/lib/netsvc/rstat/rpc.rstatd  100001 2-4  rpc.rstatd " >> $CREATE_XML_FILE 2>&1
echo "(수정후) #rpc dgram  udp  wait root  /usr/lib/netsvc/rstat/rpc.rstatd  100001 2-4  rpc.rstatd " >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "(2) # ps -ef | grep inetd" >> $CREATE_XML_FILE 2>&1
echo "        root   141     1  0 15:03:22 ?        0:01 /usr/sbin/inetd -s" >> $CREATE_XML_FILE 2>&1
echo "# kill -HUP 141 " >> $CREATE_XML_FILE 2>&1 
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
CHECK_FLAG="FALSE"
if [ ${SYSTEM_OS} = "SunOS" ] ;then
    if [ `ToInt ${VERSION}` -ge 510 ] && [ `ToInt ${VERSION}` -lt 520 ] ; then
        RPC_ON_LIST=`inetadm | grep "online" | egrep -i "${CHECK_RPC_LIST}"`
        if [ "${RPC_ON_LIST}-" = "-" ] ; then
            echo "양호: 불필요한 서비스가 없습니다." >> $CREATE_XML_FILE 2>&1
            result="GOOD"
        else
            echo "취약: 불필요한 서비스가 존재합니다." >> $CREATE_XML_FILE 2>&1
            echo ${RPC_ON_LIST} >> $CREATE_XML_FILE 2>&1
            result="BAD"
	fi
	CHECK_FLAG="TRUE"
    else
	CHECK_FLAG="FALSE"
    fi
elif [ ${SYSTEM_OS} = "Linux" ] ;then
    echo "[부팅스크립트 확인]" >> $CREATE_XML_FILE 2>&1
    if [ `chkconfig --list | egrep 'nfs|nfslock|portmap|rpcbind|rpcidmapd' | egrep -v 'umountnfs.sh' | egrep ":on|:활성" | wc -l` -eq 0 ] ; then
        echo "양호 : 부팅스크립트에 RPC서비스 on 상태 없음" >> $CREATE_XML_FILE 2>&1
    else	
        echo "---------------" >> $CREATE_XML_FILE 2>&1
        chkconfig --list | egrep 'nfs|nfslock|portmap|rpcbind|rpcidmapd' | egrep -v 'umountnfs.sh' | egrep ":on|:활성" >> $CREATE_XML_FILE 2>&1
        echo "---------------" >> $CREATE_XML_FILE 2>&1
        echo "취약 : 부팅스크립트에 RPC서비스 on 상태 있음" >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi
    echo "" >> $CREATE_XML_FILE 2>&1
    
    if [ -f ${INETD_CONF} ] ; then
        echo "[${INETD_CONF} 점검]" >> $CREATE_XML_FILE 2>&1
        if [ `cat ${INETD_CONF} | grep -v '^#' | egrep 'ttdb|cmsd|rstartd|sadmind|rusersd|rexd|rwalld|sprayd|kcms_server|cachefsd' | wc -l` -eq 0 ] ; then
            echo "양호 : ${INETD_CONF}에 RPC서비스 없음" >> $CREATE_XML_FILE 2>&1
        else
            echo "---------------" >> $CREATE_XML_FILE 2>&1
            cat ${INETD_CONF} | grep -v '^#' | egrep 'ttdb|cmsd|rstartd|sadmind|rusersd|rexd|rwalld|sprayd|kcms_server|cachefsd'
            echo "---------------" >> $CREATE_XML_FILE 2>&1
            echo "취약 : ${INETD_CONF}에 RPC서비스 있음" >> $CREATE_XML_FILE 2>&1
            result="BAD"
        fi
    else
        echo "확인: ${INETD_CONF} 파일 없음" >> $CREATE_XML_FILE 2>&1
    fi

    FILES="ttdb cmsd rstartd sadmind rusersd rexd rwalld sprayd kcms_server cachefsd"
    if [ -d ${XINETD_DIR} ] ; then
	echo "[${XINETD_DIR} 점검]" >> $CREATE_XML_FILE 2>&1
	for FILE in $FILES
	do
		CHECK_FILE=${XINETD_DIR}/$FILE
		if [ -f $CHECK_FILE ]
		then	
			echo "checking "$CHECK_FILE" ... " >> $CREATE_XML_FILE 2>&1
			ls -al $CHECK_FILE >> $CREATE_XML_FILE 2>&1
			cat $CHECK_FILE  >> $CREATE_XML_FILE 2>&1
			if [ `cat $CHECK_FILE | grep -i "disable" | grep -i "yes" | wc -l` -eq 0 ] 
			then
				echo "취약: disable = yes 설정이 없어 활성화 상태입니다." >> $CREATE_XML_FILE 2>&1
				result="BAD"
			else
				echo "양호: disable = yes 설정이 있어 비활성화 상태입니다." >> $CREATE_XML_FILE 2>&1
			fi
			echo "" >> $CREATE_XML_FILE 2>&1
		else
			echo "checking "$CHECK_FILE" ...  파일이 없습니다." >> $CREATE_XML_FILE 2>&1
		fi
		
	done
    else
	echo "${XINETD_DIR} 디렉토리가 없습니다." >> $CREATE_XML_FILE 2>&1
    fi
    CHECK_FLAG="TRUE"
else
    CHECK_FLAG="FALSE"
fi

if [ ${CHECK_FLAG} = "FALSE" ] ; then
    if [ -f ${INETD_CONF} ] ; then
        RPC_ON_LIST=`cat ${INETD_CONF} | grep -v '^#' | egrep -i "${CHECK_RPC_LIST}"`
        if [ "${RPC_ON_LIST}-" = "-" ] ; then
            echo "양호: 불필요한 서비스가 없습니다." >> $CREATE_XML_FILE 2>&1
            result="GOOD"
        else
            echo "취약: 불필요한 서비스가 존재합니다." >> $CREATE_XML_FILE 2>&1
            echo ${RPC_ON_LIST} >> $CREATE_XML_FILE 2>&1
            result="BAD"
        fi
    fi
fi




echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###








Classification="3. 네트워크 서비스"
Item="3.02 NFS 제한"
ItemCode="${SCRIPT_VERSION}_0302"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "NFS 서비스가 동작중인 경우, ${NFS_CONF}에 everyone 설정이 있는 경우 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "NFS 서비스를 중지하거나 ${NFS_CONF}에 everyone 설정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
CHECK_FLAG="FALSE"
if [ ${SYSTEM_OS} = "SunOS" ] ;then
    if [ `ToInt ${VERSION}` -ge 510 ] && [ `ToInt ${VERSION}` -lt 520 ]  ; then
        if [ `svcs -a | grep "nfs/server" | grep "online" | wc -l` -eq 0 ] ; then
            echo "NFS 서비스가 비실행중입니다" >> $CREATE_XML_FILE 2>&1
            result="GOOD"
        else
            svcs -a | grep "nfs/server" | grep "online" >> $CREATE_XML_FILE 2>&1
            echo " " >> $CREATE_XML_FILE 2>&1
            if [ -f /etc/dfs/dfstab ] ; then
                if [ `cat /etc/dfs/dfstab | grep -v "^#" | grep "/" | wc -l` -eq 0 ] ; then
                    echo "양호: NFS서비스가 실행중이나 공유리스트가 없음" >> $CREATE_XML_FILE 2>&1
                    result="GOOD"
                else
                    echo "확인필요: NFS서비스가 실행중이며 공유리스트의 필요여부 확인필요" >> $CREATE_XML_FILE 2>&1
                    result="CHECK"
                fi
            fi
        fi
        CHECK_FLAG="TRUE"
    else
        CHECK_FLAG="FALSE"
    fi
else
    CHECK_FLAG="FALSE"
fi

if [ ${CHECK_FLAG} = "FALSE" ] ; then
    CHECK_CONF="FALSE"
    echo "[NSF서비스 확인]" >> $CREATE_XML_FILE 2>&1
    echo "-----------" >> $CREATE_XML_FILE 2>&1
    ps -ef | grep nfsd | grep -v "grep" >> $CREATE_XML_FILE 2>&1
    echo "-----------" >> $CREATE_XML_FILE 2>&1
    if [ `ps -ef | grep nfsd | grep -v "grep" | wc -l` -eq 0 ] ; then
        echo "양호: NFS 서비스가 없습니다.">> $CREATE_XML_FILE 2>&1
        result="GOOD"
    else
        echo "확인필요: NFS 서비스가 존재하므로 확인이 필요합니다.">> $CREATE_XML_FILE 2>&1
        result="CHECK"
        CHECK_CONF="TRUE"
    fi

    if [ $CHECK_CONF = "TRUE" ] ; then
        echo "" >> $CREATE_XML_FILE 2>&1
        echo "[${NFS_CONF}서비스 확인]" >> $CREATE_XML_FILE 2>&1
        if [ -f ${NFS_CONF} ] ; then
            echo "-----------" >> $CREATE_XML_FILE 2>&1
            cat ${NFS_CONF} | grep -v "^#" >> $CREATE_XML_FILE 2>&1
            echo "-----------" >> $CREATE_XML_FILE 2>&1
            if [ `cat ${NFS_CONF} | grep -v "^#" | wc -l` -eq 0 ] ; then
                echo "양호: ${NFS_CONF} 에 설정내용이 없습니다.">> $CREATE_XML_FILE 2>&1
                result="GOOD"
            else
                echo "확인필요: 현재 설정된 공유 디렉토리가 인가된 설정인지 확인이 필요합니다.">> $CREATE_XML_FILE 2>&1
                result="CHECK"
                if [ `cat ${NFS_CONF} | grep -v "^#" | grep "everyone" | wc -l` -eq 0 ]; then
                    echo "양호: ${NFS_CONF}에 everyone이 없습니다.">> $CREATE_XML_FILE 2>&1
                else
                    echo "취약: ${NFS_CONF}에 everyone이 있습니다.">> $CREATE_XML_FILE 2>&1
                   result="BAD"
                fi
            fi
        else
            echo "${NFS_CONF} 파일이 없습니다.">> $CREATE_XML_FILE 2>&1
        fi
    fi
fi



echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###







Classification="3. 네트워크 서비스"
Item="3.03 Automountd 서비스 제거"
ItemCode="${SCRIPT_VERSION}_0303"
Risk="L"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "automountd 서비스가 동작중인 경우 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "automountd 서비스가 중지" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
CHECK_FLAG="FALSE"
if [ ${SYSTEM_OS} = "SunOS" ] ;then
    if [ `ToInt ${VERSION}` -ge 510 ] && [ `ToInt ${VERSION}` -lt 520 ]  ; then
        if [ `svcs -a | grep "auto*" | grep "online" | wc -l` -eq 0 ]; then
            echo "Automountd 서비스가 비실행중입니다" >> $CREATE_XML_FILE 2>&1
            result="GOOD"
        else
            if [ `showmount | egrep -v "Program not registered|프로그램이 등록되지 않음" | wc -l` -eq 0 ] ; then
                echo "Automountd 서비스가 비실행중입니다. " >> $CREATE_XML_FILE 2>&1
                result="GOOD"
            else
                showmount >> $CREATE_XML_FILE 2>&1
                result="CHECK"
            fi
        fi
        CHECK_FLAG="TRUE"
    else
        CHECK_FLAG="FALSE"
    fi
else
    CHECK_FLAG="FALSE"
fi

if [ ${CHECK_FLAG} = "FALSE" ] ; then
    echo "[Automount 서비스 확인]" >> $CREATE_XML_FILE 2>&1
    echo "-----------" >> $CREATE_XML_FILE 2>&1
    ps -ef | grep -v "grep" | egrep "automount|autofs" | grep -v "grep" | egrep -v "grep|statdaemon|emi" >> $CREATE_XML_FILE 2>&1
    echo "-----------" >> $CREATE_XML_FILE 2>&1
    if [ `ps -ef | grep -v "grep" | egrep "automount|autofs" | grep -v "grep" | egrep -v "grep|statdaemon|emi" | wc -l` -eq 0 ] ; then
        echo "양호: automount 서비스 없음" >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: automount 서비스 존재" >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi
    echo "[Automount 시작서비스 확인]" >> $CREATE_XML_FILE 2>&1
    echo "-----------" >> $CREATE_XML_FILE 2>&1
    ls -alR /etc/rc*.d/* | egrep "autofs|amd" | grep "/S" >> $CREATE_XML_FILE 2>&1
    echo "-----------" >> $CREATE_XML_FILE 2>&1
    if [ `ls -alR /etc/rc*.d/* | egrep "autofs|amd" | grep "/S" | wc -l` -eq 0 ] ; then
        echo "양호: /etc/rc*.d에 automount 시작프로그램 없음" >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: /etc/rc*.d에 automount 시작프로그램 존재" >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi
fi



echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###







Classification="3. 네트워크 서비스"
Item="3.04 NIS 제한"
ItemCode="${SCRIPT_VERSION}_0304"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "NIS, NIS+ 서비스가 동작중인 경우 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "NIS, NIS+ 서비스가 중지" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
CHECK_FLAG="FALSE"
if [ ${SYSTEM_OS} = "SunOS" ] ;then
    if [ `ToInt ${VERSION}` -ge 510 ] && [ `ToInt ${VERSION}` -lt 520 ]  ; then
        svcs -a | grep -i "nis" >> $CREATE_XML_FILE 2>&1
        if [ `svcs -a | grep -i "nis" | grep "online" |  wc -l` -eq 0 ] ; then
            echo "NIS, NIS+ 서비스가 비실행중입니다." >> $CREATE_XML_FILE 2>&1
            result="GOOD"
        else
            echo "NIS, NIS+ 서비스가 실행중입니다." >> $CREATE_XML_FILE 2>&1
            result="BAD"
	fi
        CHECK_FLAG="TRUE"
    else
        CHECK_FLAG="FALSE"
    fi
else
    CHECK_FLAG="FALSE"
fi

if [ ${CHECK_FLAG} = "FALSE" ] ; then
    echo "[NIS, NIS+ 서비스 확인]" >> $CREATE_XML_FILE 2>&1
    echo "-----------" >> $CREATE_XML_FILE 2>&1
    ps -ef | grep -v 'grep' | egrep -i 'Ypserv|Ypbind|rpc.yppasswd|ypxfrd|rpc.ypupdated' >> $CREATE_XML_FILE 2>&1
    echo "-----------" >> $CREATE_XML_FILE 2>&1
    if [ `ps -ef | grep -v 'grep' | egrep -i 'Ypserv|Ypbind|rpc.yppasswd|ypxfrd|rpc.ypupdated' | wc -l` -eq 0 ] ; then
        echo "양호: NIS, NIS+ 서비스 없음" >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: NIS, NIS+ 서비스 존재" >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi
fi



echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###







Classification="3. 네트워크 서비스"
Item="3.05 'r' commands 서비스 제거"
ItemCode="${SCRIPT_VERSION}_0305"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "login, shell, exec 등 r commands 서비스가 구동 중이지 않거나 사용시 /etc/hosts.equiv, ./$HOME/rhosts 파일 권한400 및 접근가능 고정 IP 설정된 경우" >> $CREATE_XML_FILE 2>&1
echo "r commands 서비스 사용시 위의 기준대로 설정되어 있지 않을 경우 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "r command 관련 서비스를 중지" >> $CREATE_XML_FILE 2>&1
echo ".rhosts 및 /etc/hosts.equifv는 소유주 외 다른 권한 제거" >> $CREATE_XML_FILE 2>&1
echo "/etc/hosts.equiv는 root소유주로 설정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
r_service="disable"
result="GOOD"

echo "[r 서비스 점검]"  >> $CREATE_XML_FILE 2>&1
CHECK_FLAG="FALSE"
if [ ${SYSTEM_OS} = "SunOS" ] ;then
    if [ `ToInt ${VERSION}` -ge 510 ] && [ `ToInt ${VERSION}` -lt 520 ]  ; then
        echo "-----------" >> $CREATE_XML_FILE 2>&1
        inetadm | egrep "login|shell|rexec" | egrep -v  "klogin|kshell|kexec" | grep "online" >> $CREATE_XML_FILE 2>&1
        echo "-----------" >> $CREATE_XML_FILE 2>&1
        if [ `inetadm | egrep "login|shell|rexec" | egrep -v  "klogin|kshell|kexec" | grep "online" | wc -l` -eq 0 ] ; then
            echo "양호: r 서비스가 비활성화 되어 있음" >> $CREATE_XML_FILE 2>&1
            r_service="disable"
        else
            echo "취약: r 서비스가 실행중임" >> $CREATE_XML_FILE 2>&1
            r_service="enable"
        fi
        CHECK_FLAG="TRUE"
    else
        CHECK_FLAG="FALSE"
    fi
else
    CHECK_FLAG="FALSE"
fi

if [ ${CHECK_FLAG} = "FALSE" ] ; then
    
    if [ -f ${INETD_CONF} ]; then
        echo "[${INETD_CONF} 점검]" >> $CREATE_XML_FILE 2>&1
        echo "-----------" >> $CREATE_XML_FILE 2>&1
        cat ${INETD_CONF} | egrep -i "shell|rlogin|rexec" | egrep -v "^#|^k" >> $CREATE_XML_FILE 2>&1
        echo "-----------" >> $CREATE_XML_FILE 2>&1
        if [ `cat ${INETD_CONF} | egrep -i "shell|rlogin|rexec" | egrep -v "^#|^k" | wc -l` -eq 0 ] ; then
            echo "양호: r command 설정이 없습니다." >> $CREATE_XML_FILE 2>&1
        else
            echo "취약: r command 설정이 있습니다." >> $CREATE_XML_FILE 2>&1
            r_service="enable"
        fi
    else
        echo "${INETD_CONF} 파일이 없습니다." >> $CREATE_XML_FILE 2>&1
    fi



    
    FILES="shell rlogin rexec"
    if [ -d ${XINETD_DIR} ] ; then
	echo "[${XINETD_DIR} 점검]" >> $CREATE_XML_FILE 2>&1
	for FILE in $FILES
	do
		CHECK_FILE=${XINETD_DIR}/$FILE
		if [ -f $CHECK_FILE ]
		then	
			echo "checking "$CHECK_FILE" ... " >> $CREATE_XML_FILE 2>&1
			ls -al $CHECK_FILE >> $CREATE_XML_FILE 2>&1
			cat $CHECK_FILE  >> $CREATE_XML_FILE 2>&1
			if [ `cat $CHECK_FILE | grep -i "disable" | grep -i "yes" | wc -l` -eq 0 ] 
			then
				echo "취약: disable = yes 설정이 없어 활성화 상태입니다." >> $CREATE_XML_FILE 2>&1
				result="BAD"
			else
				echo "양호: disable = yes 설정이 있어 비활성화 상태입니다." >> $CREATE_XML_FILE 2>&1
			fi
			echo "" >> $CREATE_XML_FILE 2>&1
		else
			echo "checking "$CHECK_FILE" ...  파일이 없습니다." >> $CREATE_XML_FILE 2>&1
		fi
		
	done
    else
	echo "${XINETD_DIR} 디렉토리가 없습니다." >> $CREATE_XML_FILE 2>&1
    fi
fi

if [ $r_service = "enable" ] ; then
    echo "[$HOME/.rhosts] 파일 점검"  >> $CREATE_XML_FILE 2>&1
    HOMEDIRS=`cat /etc/passwd | awk -F":" 'length($6) > 0 {print $6}' | sort -u | egrep -v 'false|nologin'`
    FILES=".rhosts"
    for dir in $HOMEDIRS
    do
        if [ -d $dir ] ; then 
            for file in $FILES
            do
                FILE=$dir/$file
                if [ -f $FILE ] ; then	
                    ls -alL $FILE >> $CREATE_XML_FILE 2>&1
                    if [ `ls -alL $FILE | awk '{print $1}' | grep "..--------" | wc -l` -eq 0 ] ; then
                    echo "취약: 소유주 외 다른 권한이 존재합니다."  >> $CREATE_XML_FILE 2>&1
                    result="BAD"
                    else
                        echo "양호: 소유주 외 다른 권한이 없습니다."  >> $CREATE_XML_FILE 2>&1
                    fi
                    if [ `cat $FILE | grep -v "^#" | grep "+" | wc -l` -eq 0 ] ; then
                        echo "양호: "$FILE"에 +설정이 없습니다." >> $CREATE_XML_FILE 2>&1
                    else
                        cat $FILE | grep -v "^#" | grep "+" >> $CREATE_XML_FILE 2>&1
                        echo "취약: "$FILE"에 +설정이 존재합니다." >> $CREATE_XML_FILE 2>&1
                    fi
                else
                    echo "양호: "$FILE" 파일이 없습니다." >> $CREATE_XML_FILE 2>&1
                fi
            done
        fi
    done

    echo "[/etc/hosts.equiv] 파일 점검"  >> $CREATE_XML_FILE 2>&1
    if [ -f $HOSTS_EQUIV ] ; then
        if [ `ls -alL $HOSTS_EQUIV | awk '{print $1}' | grep "..--------" | wc -l` -eq 0 ] ; then
            echo "취약: 소유주 외 다른 권한이 존재합니다."  >> $CREATE_XML_FILE 2>&1
            result="BAD"
        else
            echo "양호: 소유주 외 다른 권한이 없습니다."  >> $CREATE_XML_FILE 2>&1
        fi
        if [ `ls -alL $HOSTS_EQUIV | awk '{print $3}' | grep "root" | wc -l` -eq 1 ] ; then
            echo "양호: "$HOSTS_EQUIV"는 root 소유로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
        else
            echo "취약: "$HOSTS_EQUIV"는 root 외 다른 사용자 소유로 설정되어 있습니다." >> $CREATE_XML_FILE 2>&1
            result="BAD"
        fi
        if [ `cat $HOSTS_EQUIV | grep -v "^#" | grep "+" | wc -l` -eq 0 ] ; then
            echo "양호: "$HOSTS_EQUIV"에 +설정이 없습니다." >> $CREATE_XML_FILE 2>&1
        else
            cat $HOSTS_EQUIV | grep -v "^#" | grep "+" >> $CREATE_XML_FILE 2>&1
            echo "취약: "$HOSTS_EQUIV"에 +설정이 존재합니다." >> $CREATE_XML_FILE 2>&1
        fi
    else
        echo "양호: "$HOSTS_EQUIV" 파일이 없습니다." >> $CREATE_XML_FILE 2>&1
    fi
else
    echo "양호: r 서비스 비활성화 되어 있어 제외됨" >> $CREATE_XML_FILE 2>&1
    result="GOOD"
fi

echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###







Classification="3. 네트워크 서비스"
Item="3.06 불필요한 서비스 제거"
ItemCode="${SCRIPT_VERSION}_0306"
Risk="M"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "불필요한 서비스가 구동 중일 경우 취약" >> $CREATE_XML_FILE 2>&1
echo "${CHECK_NOT_NEED_SERVICE_LIST}" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "1) /etc/inetd.conf 파일에서 해당 라인 # 처리(주석처리) 후 inetd 재구동" >> $CREATE_XML_FILE 2>&1
echo "# vi /etc/inetd.conf" >> $CREATE_XML_FILE 2>&1
echo "(수정 전) echo   stream  tcp6    nowait  root    internal " >> $CREATE_XML_FILE 2>&1
echo "(수정 후) # echo   stream  tcp6    nowait  root    internal " >> $CREATE_XML_FILE 2>&1
echo "# ps -ef | grep inetd" >> $CREATE_XML_FILE 2>&1
echo "root   141     1  0 15:03:22 ?        0:01 /usr/sbin/inetd -s" >> $CREATE_XML_FILE 2>&1
echo "# kill -HUP 141" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "2) 부팅스크립트에서 불필요 서비스 완전 삭제" >> $CREATE_XML_FILE 2>&1
echo "# chkconfig --level 0123456 [불필요한 서비스명] off" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "사용해야 하는 서비스가 있을 경우 단기적으로는 네트워크 장비, 방화벽에서 1차적으로 접근제어를 강화하고 장기적으로는 서비스 제공의 타당성을 재검토하여 Application을 변경" >> $CREATE_XML_FILE 2>&1
echo "(해당 서비스를 사용하는 procedure call 변경)" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1

result="GOOD"
CHECK_FLAG="FALSE"
if [ ${SYSTEM_OS} = "SunOS" ] ;then
    if [ `ToInt ${VERSION}` -ge 510 ] && [ `ToInt ${VERSION}` -lt 520 ]  ; then
        if [ `inetadm | egrep '${CHECK_NOT_NEED_SERVICE_LIST}' | grep "online" | wc -l` -eq 0 ] ;  then
            echo "불필요한 서비스가 사용되고 있지 않습니다." >> $CREATE_XML_FILE 2>&1
        else
            echo "불필요한 서비스가 실행중임"  >> $CREATE_XML_FILE 2>&1
            result="BAD"
            inetadm | egrep '${CHECK_NOT_NEED_SERVICE_LIST}' | grep "online" >> $CREATE_XML_FILE 2>&1
        fi
        CHECK_FLAG="TRUE"
    else
        CHECK_FLAG="FALSE"
    fi
else
    CHECK_FLAG="FALSE"
fi

if [ ${SYSTEM_OS} = "Linux" ] ;then
    echo "[부팅스크립트 확인]" >> $CREATE_XML_FILE 2>&1
	for IP in ${IPADDR_LIST}
	do
		echo $IP" : monlist기능 활성화 확인" >> $CREATE_XML_FILE 2>&1
		if [ `ntpdc -n -c monlist ${IP} | grep "Request" | wc -l` -ge 1 ];then
			echo "취약 : monlist기능이 활성화 된 취약한 버전의 ntp 사용 중" >> $CREATE_XML_FILE 2>&1
			result="BAD"
		fi
	done
    if [ `chkconfig --list | egrep "${CHECK_NOT_NEED_SERVICE_LIST}" | egrep ":on|:활성" | wc -l` -eq 0 ];then
        echo "양호 : 부팅스크립트에 불필요한 서비스 on 상태 없음" >> $CREATE_XML_FILE 2>&1
        result="GOOD"
    else
		if [ `chkconfig --list | egrep "${CHECK_NOT_NEED_SERVICE_LIST}" | egrep ":on|:활성" | grep -v "ntp" | wc -l` -eq 0 ];then
			for IP in ${IPADDR_LIST}
			do
				if [ `ntpdc -n -c monlist ${IP} | grep "Request" | wc -l` -ge 1 ];then
					echo "취약 : monlist기능이 활성화 된 취약한 버전의 ntp 사용 중" >> $CREATE_XML_FILE 2>&1
					result="BAD"
				fi
			done
		else
			echo "---------------" >> $CREATE_XML_FILE 2>&1
			chkconfig --list | egrep "${CHECK_NOT_NEED_SERVICE_LIST}" | egrep ":on|:활성" >> $CREATE_XML_FILE 2>&1
			echo "---------------" >> $CREATE_XML_FILE 2>&1
			echo "취약 : 부팅스크립트에 불필요한 서비스 on 상태 있음" >> $CREATE_XML_FILE 2>&1
			result="BAD"
		fi
    fi
fi



if [ ${CHECK_FLAG} = "FALSE" ] ; then
    
    if [ -f ${INETD_CONF} ]; then
        echo "[${INETD_CONF} 점검]" >> $CREATE_XML_FILE 2>&1
        echo "-----------" >> $CREATE_XML_FILE 2>&1
        cat ${INETD_CONF} | egrep -i "${CHECK_NOT_NEED_SERVICE_LIST}" | egrep -v "^#|^k" >> $CREATE_XML_FILE 2>&1
        echo "-----------" >> $CREATE_XML_FILE 2>&1
        if [ `cat ${INETD_CONF} | egrep -i "${CHECK_NOT_NEED_SERVICE_LIST}" | egrep -v "^#" | wc -l` -eq 0 ] ; then
            echo "양호:불필요한 서비스는 실행설정 없음" >> $CREATE_XML_FILE 2>&1
        else
            echo "취약:불필요한 서비스 실행되도록 설정됨." >> $CREATE_XML_FILE 2>&1
            result="BAD"
        fi
    else
        echo "${INETD_CONF} 파일이 없습니다." >> $CREATE_XML_FILE 2>&1
    fi
   

    echo "[${XINETD_DIR} 점검]" >> $CREATE_XML_FILE 2>&1
    if [ -d ${XINETD_DIR} ] ; then
        for FILE in ${CHECK_NOT_NEED_SERVICE_LIST_2}
        do
            CHECK_FILE=${XINETD_DIR}/${FILE}
	    if [ -f ${CHECK_FILE} ] ; then	
	        echo "checking ${CHECK_FILE} ... " >> $CREATE_XML_FILE 2>&1
		ls -al ${CHECK_FILE} >> $CREATE_XML_FILE 2>&1
		cat ${CHECK_FILE}  >> $CREATE_XML_FILE 2>&1
		if [ `cat ${CHECK_FILE} | grep -i "disable" | grep -i "yes" | wc -l` -eq 0 ] ; then
		    echo "취약: disable = yes 설정이 없어 활성화 상태입니다." >> $CREATE_XML_FILE 2>&1
		    result="BAD"
		else
		    echo "양호: disable = yes 설정이 있어 비활성화 상태입니다." >> $CREATE_XML_FILE 2>&1
		fi
                echo "" >> $CREATE_XML_FILE 2>&1
	    else
	        echo "checking ${CHECK_FILE} ...  파일이 없습니다. (N/A)" >> $CREATE_XML_FILE 2>&1
	    fi
		
	done
    else
	echo "${XINETD_DIR} 디렉토리가 없습니다. (N/A)" >> $CREATE_XML_FILE 2>&1
    fi

fi




echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###







Classification="3. 네트워크 서비스"
Item="3.07 서비스 Banner 관리"
ItemCode="${SCRIPT_VERSION}_0307"
Risk="M"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "Telnet, FTP, SMTP, DNS 가 구동중이며 서비스 배너에 O/S 및 버전 정보가 있을 경우" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "Telnet, FTP, SMTP, DNS 중 사용중인 서비스일 경우 설정 파일에서 조치 후inetd 데몬 Refresh" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="CHECK"
echo "[Telnet Banner점검]" >> $CREATE_XML_FILE 2>&1
if [ -f $TELNET_BANNER ] ; then
    cat $TELNET_BANNER  >> $CREATE_XML_FILE 2>&1
    echo " 확인필요" >> $CREATE_XML_FILE 2>&1
else
    echo $TELNET_BANNER" 없음" >> $CREATE_XML_FILE 2>&1
fi
echo "" >> $CREATE_XML_FILE 2>&1
echo "[FTP Banner점검]" >> $CREATE_XML_FILE 2>&1
if [ -f $FTP_BANNER ] ; then
    if [ `cat $FTP_BANNER | grep -v "^#" | grep -i "banner" | wc -l` -eq 0 ] ; then
        echo $FTP_BANNER" 에 베너내용이 없음" >> $CREATE_XML_FILE 2>&1
    else
        cat $FTP_BANNER | grep -v "^#" | grep -i "banner" >> $CREATE_XML_FILE 2>&1
        FTP_B_F=`cat $FTP_BANNER | grep -v "^#" | grep -i "banner" | awk '{print $2}'`
        if [ -f $FTP_B_F ] ; then 
            echo $FTP_B_F >> $CREATE_XML_FILE 2>&1
            echo " 확인필요" >> $CREATE_XML_FILE 2>&1
            result="CHECK"
        else
            echo $FTP_B_F" 파일이 없음" >> $CREATE_XML_FILE 2>&1
        fi
    fi
else
    echo $FTP_BANNER" 없음" >> $CREATE_XML_FILE 2>&1
fi
echo "" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "[SNMP Banner점검]" >> $CREATE_XML_FILE 2>&1
echo "-Sendmail의 경우" >> $CREATE_XML_FILE 2>&1
if [ -f $SMTP_CONF ] ; then
    cat $SMTP_CONF | grep -i "SmtpGreetingMessage" >> $CREATE_XML_FILE 2>&1
    cat $SMTP_CONF  | grep -i "SmtpGreetingMessage" | grep -v "^#" | grep "\$v" > smtp.temp
    if [ `cat smtp.temp | wc -l` -gt 0 ] ; then
        echo "취약: \$v가 존재함" >> $CREATE_XML_FILE 2>&1
        result="BAD"
    else
        echo " 확인필요" >> $CREATE_XML_FILE 2>&1
    fi
else
    echo $SMTP_CONF" 없음" >> $CREATE_XML_FILE 2>&1
fi
echo "" >> $CREATE_XML_FILE 2>&1
rm -rf smtp.temp

echo "" >> $CREATE_XML_FILE 2>&1
echo "[DNS Banner점검]" >> $CREATE_XML_FILE 2>&1
if [ -f $DNS_CONF ] ; then
    cat $DNS_CONF >> $CREATE_XML_FILE 2>&1
    echo " 확인필요" >> $CREATE_XML_FILE 2>&1
else
    echo $DNS_CONF" 없음" >> $CREATE_XML_FILE 2>&1
fi
echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###







Classification="3. 네트워크 서비스"
Item="3.08 session timeout 설정"
ItemCode="${SCRIPT_VERSION}_0308"
Risk="L"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "Session Timeout 이 300 초 초과 설정되어 있을 경우 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "1) sh(born shell) 및 ksh(korn shell) 에서는 /etc/profile 또는 .profile 수정" >> $CREATE_XML_FILE 2>&1
echo "TMOUT=300, export TMOUT 삽입" >> $CREATE_XML_FILE 2>&1
echo "# vi /etc/profile" >> $CREATE_XML_FILE 2>&1
echo "  (수정 후) TMOUT = 300" >> $CREATE_XML_FILE 2>&1
echo "             export TMOUT" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "2) csh 및 tcsh 쉘을 사용하는 경우 (단위 : 분)" >> $CREATE_XML_FILE 2>&1
echo "   # vi /etc/.login 실행 후 아래 내용 적용" >> $CREATE_XML_FILE 2>&1
echo "     set autologout=5" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="BAD"


if [ ${SYSTEM_OS} = "SunOS" ] ;then
    CHECK_CHAR="TIMEOUT"
    CHECK_VALUE=300
    CHECK_SESSION_TIMEOUT=${LOGIN_CONF}
else
    CHECK_CHAR="autologout"
    CHECK_VALUE=5

fi
echo "[${CHECK_SESSION_TIMEOUT}  내 ${CHECK_CHAR} 점검]" >> $CREATE_XML_FILE 2>&1
if [ -f ${CHECK_SESSION_TIMEOUT} ] ; then
    if [ `cat ${CHECK_SESSION_TIMEOUT}  | grep "${CHECK_CHAR}" | grep -v "^#" | wc -l` -eq 0 ] ; then
        echo "취약: ${CHECK_SESSION_TIMEOUT}  내 ${CHECK_CHAR} 설정이 없음">> $CREATE_XML_FILE 2>&1
        result="BAD"
    else
        cat ${CHECK_SESSION_TIMEOUT}  | grep "${CHECK_CHAR}" | grep -v "^#" | grep "=" >> $CREATE_XML_FILE 2>&1
        if [ `cat ${CHECK_SESSION_TIMEOUT}  | grep "${CHECK_CHAR}" | grep -v "^#" | grep "=" | awk -F"=" '{if ($2 > ${CHECK_VALUE}) print $2}' | wc -l` -eq 0 ] ; then
            echo "양호: ${CHECK_CHAR} 설정이 ${CHECK_VALUE} 이하로 설정됨" >> $CREATE_XML_FILE 2>&1
        else
            echo "취약: ${CHECK_CHAR} 설정이 ${CHECK_VALUE} 보다 크게 설정됨" >> $CREATE_XML_FILE 2>&1
            result="BAD"
        fi
    fi
else
    echo ">> ${CHECK_SESSION_TIMEOUT} 파일이 없음" >> $CREATE_XML_FILE 2>&1
fi


echo "[${PROFILE} 내 TMOUT 점검]" >> $CREATE_XML_FILE 2>&1
if [ ${SYSTEM_OS} = "Linux" ] ; then
	echo "현재 TMOUT 값 : ${TMOUT}" >> $CREATE_XML_FILE 2>&1
	if [ ${TMOUT} -le 300 ] ; then
		echo "양호: TMEOUT 설정이 300 이하로 설정됨" >> $CREATE_XML_FILE 2>&1
		result="GOOD"
	else
		echo "취약: TMEOUT 설정이 300 보다 크게 설정됨" >> $CREATE_XML_FILE 2>&1
	fi

else 
	if [ -f ${PROFILE} ] ; then
	    if [ `cat ${PROFILE} | grep "TMOUT" | grep -v "^#" | wc -l` -eq 0 ]; then
		echo "취약: ${PROFILE} 내 TMOUT 설정이 없음">> $CREATE_XML_FILE 2>&1
	    else
		cat ${PROFILE}  | grep "TMOUT" | grep -v "^#" | grep "=" >> $CREATE_XML_FILE 2>&1
		if [ `cat ${PROFILE}  | grep "TMOUT" | grep -v "^#" | grep "=" | awk -F"=" '{if ($2 > 300) print $2}' | wc -l` -eq 0 ] ; then
		    echo "양호: TMEOUT 설정이 300 이하로 설정됨" >> $CREATE_XML_FILE 2>&1
		    result="GOOD"
		else
		    echo "취약: TMEOUT 설정이 300 보다 크게 설정됨" >> $CREATE_XML_FILE 2>&1
		fi
	    fi
	else
	    echo "${PROFILE} 파일이 없음" >> $CREATE_XML_FILE 2>&1
	fi
fi


echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###







Classification="3. 네트워크 서비스"
Item="3.09 root 계정 telnet, ssh 접근 제한"
ItemCode="${SCRIPT_VERSION}_0309"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "telnet 및ssh 접속시 root 로 바로 접속 가능할 경우 취약" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "[telnet]" >> $CREATE_XML_FILE 2>&1
echo "1) /etc/pam.d/login 파일 수정 (주석 제거 또는 신규 삽입)" >> $CREATE_XML_FILE 2>&1
echo "(수정 전) #auth required /lib/security/pam_securetty.so  또는 #auth required pam_securetty.so" >> $CREATE_XML_FILE 2>&1
echo "(수정 후)  auth required /lib/security/pam_securetty.so  또는  auth required pam_securetty.so" >> $CREATE_XML_FILE 2>&1
echo "2) /etc/securetty 파일이 반드시 존재해야 함 (삭제되어 있을 시 파일 생성 필요)" >> $CREATE_XML_FILE 2>&1
echo "3) /etc/securetty 파일명이 변경되어 있을 시 원상복구 " >> $CREATE_XML_FILE 2>&1
echo "# mv [변경되어 있는 파일명] /etc/securetty" >> $CREATE_XML_FILE 2>&1
echo "4) /etc/securetty 파일 내 pts 구문 삭제(삭제 시 담당자와 협의필요) " >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "[ssh]" >> $CREATE_XML_FILE 2>&1
echo "1) /etc/ssh/sshd_config 파일 수정 " >> $CREATE_XML_FILE 2>&1
echo "(수정 전) #PermitRootLogin yes" >> $CREATE_XML_FILE 2>&1
echo "(수정 후)  PermitRootLogin no" >> $CREATE_XML_FILE 2>&1
echo "2) sshd 재구동" >> $CREATE_XML_FILE 2>&1
echo "  # /etc/init.d/sshd  restart " >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
if [ -f $LOGIN_CONF ] ; then
    echo "[telnet 점검]" >> $CREATE_XML_FILE 2>&1
    cat $LOGIN_CONF | grep -v "^#" | grep -i "console" >> $CREATE_XML_FILE 2>&1
    if [ `cat $LOGIN_CONF | grep -v "^#" | grep -i "console" | wc -l` -eq 0 ] ; then
        echo "취약: CONSOLE의 값이 없음"  >> $CREATE_XML_FILE 2>&1
        result="BAD"
    else
        echo "양호"  >> $CREATE_XML_FILE 2>&1
    fi
fi
if [ -f $SSH_CONF ] ; then
    echo "[ssh 점검]" >> $CREATE_XML_FILE 2>&1
    cat $SSH_CONF | grep -v "^#" | grep -i "PermitRootLogin" >> $CREATE_XML_FILE 2>&1
    if [ `cat $SSH_CONF | grep -v "^#" | grep -i "PermitRootLogin" | grep -i "no" | wc -l` -eq 0 ] ; then
        echo "취약: PermitRootLogin 값이 없거나 no로 되어 있지 않음"  >> $CREATE_XML_FILE 2>&1
        result="BAD"
    else
        echo "양호"  >> $CREATE_XML_FILE 2>&1
    fi
fi

if [ ${SYSTEM_OS} = "Linux" ] ;then
    echo "[${LOGIN_CONF} 점검]" >> $CREATE_XML_FILE 2>&1
    if [ -f ${LOGIN_CONF} ] ; then
        echo "-------------"  >> $CREATE_XML_FILE 2>&1
        cat ${LOGIN_CONF} | grep -i pam_securetty.so   >> $CREATE_XML_FILE 2>&1
        echo "-------------"  >> $CREATE_XML_FILE 2>&1

        if [ `cat ${LOGIN_CONF} | grep -i pam_securetty.so | grep -v "^#" | wc -l` -eq 0 ] ; then
            echo "취약: ${LOGIN_CONF} 내 pam_securetty.so 설정이 없음">> $CREATE_XML_FILE 2>&1
            result="BAD"
        else
            echo "양호: ${LOGIN_CONF} 내 pam_securetty.so 설정이 있음" >> $CREATE_XML_FILE 2>&1
        fi
    else
        echo ">> "$FILE" 파일이 없음" >> $CREATE_XML_FILE 2>&1
    fi
fi

if [ ${SYSTEM_OS} = "HP-UX" ] ;then
    echo "[${LOGIN_CONF} 점검]" >> $CREATE_XML_FILE 2>&1
    if [ -f ${LOGIN_CONF} ] ; then
        echo "-------------"  >> $CREATE_XML_FILE 2>&1
        cat ${LOGIN_CONF} | grep -i pts  >> $CREATE_XML_FILE 2>&1
        echo "-------------"  >> $CREATE_XML_FILE 2>&1

        if [ `cat ${LOGIN_CONF} | grep -i pts | grep -v "^#" | wc -l` -eq 0 ] ; then
            echo "양호: ${LOGIN_CONF} 내 pts 설정이 없음" >> $CREATE_XML_FILE 2>&1
        else
            echo "취약: ${LOGIN_CONF} 내 pts 설정이 있음">> $CREATE_XML_FILE 2>&1
            result="BAD"
        fi
    else
        echo ">> ${LOGIN_CONF} 파일이 없음" >> $CREATE_XML_FILE 2>&1
    fi
fi

echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###







Classification="4. 로그관리"
Item="4.01 Inetd Services 로그 설정"
ItemCode="${SCRIPT_VERSION}_0401"
Risk="M"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1

if [ ${SYSTEM_OS} = "SunOS" ] ;then
    if [ `ToInt ${VERSION}` -ge 510 ] && [ `ToInt ${VERSION}` -lt 520 ]  ; then    
        ### 기준설명 ###
        echo "<Standard>" >> $CREATE_XML_FILE 2>&1
	echo "/usr/sbin/inetd -s -t 로 설정되지 않은 경우 취약" >> $CREATE_XML_FILE 2>&1
        echo "</Standard>" >> $CREATE_XML_FILE 2>&1
        ### 조치방법 ###
        echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
        echo "# inetadm -M tcp_trace=TRUE" >> $CREATE_XML_FILE 2>&1
        echo "" >> $CREATE_XML_FILE 2>&1
        echo "# inetadm -p | grep tcp_trace" >> $CREATE_XML_FILE 2>&1
        echo "(수정 전) tcp_trace=FALSE" >> $CREATE_XML_FILE 2>&1
        echo "(수정 후) tcp_trace=TRUE" >> $CREATE_XML_FILE 2>&1
        echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
        ### 현재설정 ###
        echo "<Issue>" >> $CREATE_XML_FILE 2>&1
        inetadm -p | grep -i "tcp_trace" >> $CREATE_XML_FILE 2>&1
        if [ `inetadm -p | grep -i "tcp_trace" | grep -i "true" | wc -l` -eq 0 ] ; then
            echo "취약: tcp_trace 값이 TRUE가 아님" >> $CREATE_XML_FILE 2>&1
            result="BAD"
        else
            echo "양호: tcp_trace 값이 TRUE 임" >> $CREATE_XML_FILE 2>&1
            result="GOOD"
        fi
        echo "</Issue>" >> $CREATE_XML_FILE 2>&1

    else
        ### 기준설명 ###
        echo "<Standard>" >> $CREATE_XML_FILE 2>&1
	echo "/usr/sbin/inetd -s -t 로 설정되지 않은 경우 취약" >> $CREATE_XML_FILE 2>&1
        echo "</Standard>" >> $CREATE_XML_FILE 2>&1
        ### 조치방법 ###
        echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
        echo "/etc/init.d/inetsvc 파일에 /usr/sbin/inetd -s에 -t를 추가" >> $CREATE_XML_FILE 2>&1
        echo "(수정 전) /usr/sbin/inetd -s &amp;" >> $CREATE_XML_FILE 2>&1
        echo "(수정 후) /usr/sbin/inetd -s -t &amp;" >> $CREATE_XML_FILE 2>&1
        echo "" >> $CREATE_XML_FILE 2>&1
        echo "[TCP 연결 로깅 예]" >> $CREATE_XML_FILE 2>&1
        echo "# ps -ef | grep inetd" >> $CREATE_XML_FILE 2>&1
        echo "root   141     1  0   Sep 27 ?        0:02 /usr/sbin/inetd -s" >> $CREATE_XML_FILE 2>&1
        echo "root  3309  3156  1 02:30:58 pts/4    0:00 grep inetd" >> $CREATE_XML_FILE 2>&1
        echo "# kill -9 141" >> $CREATE_XML_FILE 2>&1
        echo "# /usr/sbin/inetd -s -t" >> $CREATE_XML_FILE 2>&1
        echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
        ### 현재설정 ###
        echo "<Issue>" >> $CREATE_XML_FILE 2>&1
        result=N/A
        if [ -f /etc/init.d/inetsvc ] ; then
            cat /etc/init.d/inetsvc | grep -i "/usr/sbin/inetd" >> $CREATE_XML_FILE 2>&1

            if [ `cat /etc/init.d/inetsvc | grep "/usr/sbin/inetd" | grep "\-s \-t" | wc -l` -eq 0 ] ;then	
                echo "취약: /usr/sbin/inetd -s -t 으로 설정되지 않음" >> $CREATE_XML_FILE 2>&1
                result="BAD"
            else
                echo "양호: /usr/sbin/inetd -s -t 으로 설정됨" >> $CREATE_XML_FILE 2>&1
                result="GOOD"
            fi
        else
            echo "/etc/init.d/inetsvc 파일이 없습니다." >> $CREATE_XML_FILE 2>&1
        fi
        echo "</Issue>" >> $CREATE_XML_FILE 2>&1


    fi
    ### 진단결과 ###
    echo "<Result>" >> $CREATE_XML_FILE 2>&1
    echo ${result}
    echo ${result} >> $CREATE_XML_FILE 2>&1
    echo "</Result>" >> $CREATE_XML_FILE 2>&1
    echo "</row>" >> $CREATE_XML_FILE 2>&1
    ### end ###
else
    RESULT="N/A"
    ### 기준설명 ###
    echo "<Standard>" >> $CREATE_XML_FILE 2>&1
    echo "해당 OS는 해당사항 없음" >>  $CREATE_XML_FILE 2>&1
    echo "</Standard>" >> $CREATE_XML_FILE 2>&1
    ### 조치방법 ###
    echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
    echo "해당 OS는 해당사항 없음" >>  $CREATE_XML_FILE 2>&1
    echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
    ### 현재설정 ###
    echo "<Issue>" >> $CREATE_XML_FILE 2>&1
    echo "해당 OS는 해당사항 없음" >>  $CREATE_XML_FILE 2>&1
    echo "</Issue>" >> $CREATE_XML_FILE 2>&1
    ### 진단결과 ###
    echo "<Result>" >> $CREATE_XML_FILE 2>&1
    echo ${RESULT}
    echo ${RESULT} >> $CREATE_XML_FILE 2>&1
    echo "</Result>" >> $CREATE_XML_FILE 2>&1
    echo "</row>" >> $CREATE_XML_FILE 2>&1
    ### end ###
fi








Classification="4. 로그관리"
Item="4.02 시스템 로그 설정"
ItemCode="${SCRIPT_VERSION}_0402"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "- su 로깅기록을 별도의 양호 파일에 남기도록 설정하고" >> $CREATE_XML_FILE 2>&1
echo "- syslog에 중요 로그정보(*.notice, *.alert, *.emerg )에 대한 설정이 있으며" >> $CREATE_XML_FILE 2>&1
echo "- 로그 파일 및 디렉토리애 root 소유, other에 모든 권한이 부여되어 있지 않을 경우" >> $CREATE_XML_FILE 2>&1
echo "위의 기준을 하나라도 만족하지 않을 경우 " >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "1. su 로그 설정	" >> $CREATE_XML_FILE 2>&1
echo "# vi /etc/default/su 를 실행하여 아래와 같은 설정으로 변경" >> $CREATE_XML_FILE 2>&1
echo "(수정 전) # SULOG=/var/adm/sulog " >> $CREATE_XML_FILE 2>&1
echo "(수정 후)   SULOG=/var/adm/sulog " >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "su 로깅 설정의 다른 방법으로 아래와 같이 사용 가능" >> $CREATE_XML_FILE 2>&1
echo "# vi /etc/syslog.conf 를 실행하여 아래와 같이 수정" >> $CREATE_XML_FILE 2>&1
echo "auth.notice     /var/log/authlog" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "※ 반드시 빈칸을 입력할 때 Tap키를 이용" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "2. syslog 설정 " >> $CREATE_XML_FILE 2>&1
echo "1) # vi /etc/syslog.conf 파일을 점검" >> $CREATE_XML_FILE 2>&1
echo "*.notice         /var/log/syslog.log" >> $CREATE_XML_FILE 2>&1
echo "*.alert           /dev/console" >> $CREATE_XML_FILE 2>&1
echo "*.emerg          *" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "2) 위와 같이 /etc/syslog.conf 파일을 수정한 후에는 이것이 적용되도록 아래의 명령을 사용하여 syslogd 를 restart " >> $CREATE_XML_FILE 2>&1
echo "# ps -ef | grep syslogd" >> $CREATE_XML_FILE 2>&1
echo "root  7524  6970   0   Apr 23      -  0:02 /usr/sbin/syslogd" >> $CREATE_XML_FILE 2>&1
echo "# kill -HUP 7524" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "3. 로그 파일 권한 설정" >> $CREATE_XML_FILE 2>&1
echo "- 아래의 로그 파일 권한은 시스템 사용자(root, adm, bin 등) 소유자의 타사용자 모든 권한 제거 설정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
echo "[su로그설정]" >> $CREATE_XML_FILE 2>&1
if [ ${SYSTEM_OS} = "AIX" ] ;then
    if [ -f ${SULOG_CONF} ] ; then
        echo "- ${SULOG_CONF} 점검" >> $CREATE_XML_FILE 2>&1
        if [ `cat ${SULOG_CONF} | grep -i "^su" | grep -v "^#" | wc -l` -eq 0 ]; then
            echo "취약: ${SULOG_CONF}에 SU 설정이 없습니다." >> $CREATE_XML_FILE 2>&1
            result="BAD"
        else
            cat ${SULOG_CONF} | grep -i "^su" | grep -v "^#" >> $CREATE_XML_FILE 2>&1
            echo "양호: ${SULOG_CONF}에 SU 설정이 있습니다." >> $CREATE_XML_FILE 2>&1
        fi
    else
        echo "취약: ${SULOG_CONF}이 없음" >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi
elif [ ${SYSTEM_OS} = "HP-UX" ] ; then
    if [ `cat ${SYSLOG_CONF} | grep -i SULOG | wc -l` -eq 0 ] ; then
        echo "취약: ${SYSLOG_CONF}에 SULOG가 없음" >> $CREATE_XML_FILE 2>&1
        result="BAD"
    else
        echo "양호: ${SYSLOG_CONF}에 SULOG가 있음" >> $CREATE_XML_FILE 2>&1
    fi

    echo "---- 로그 내용(최근 5줄만) -----" >> $CREATE_XML_FILE 2>&1
    if [ -f ${SULOG} ] ; then
        tail -5 ${SULOG} | sed 's/>//g' | sed 's/<//g' >> $CREATE_XML_FILE 2>&1
    fi
    echo "---- 로그 내용(최근 5줄만) -----" >> $CREATE_XML_FILE 2>&1

elif [ ${SYSTEM_OS} = "Linux" ] ; then
    if [ -f ${PASSWD_CONF} ] ; then
        echo "- ${PASSWD_CONF}점검" >> $CREATE_XML_FILE 2>&1
        if [ `cat ${PASSWD_CONF} | grep "SULOG_FILE" | grep -v "^#" | wc -l` -eq 0 ] ; then
            echo "취약: ${PASSWD_CONF}에 SULOG_FILE 설정이 없습니다." >> $CREATE_XML_FILE 2>&1
            result="BAD"
        else
            cat ${PASSWD_CONF} | grep "SULOG_FILE" >> $CREATE_XML_FILE 2>&1
            echo "양호: ${PASSWD_CONF}에 SULOG_FILE 설정이 있습니다." >> $CREATE_XML_FILE 2>&1
            if [ `cat ${PASSWD_CONF} | grep "SULOG_FILE" | grep "=" | wc -l` -eq 0 ] ; then
                LOGFILE=`cat ${PASSWD_CONF} | grep "SULOG_FILE" | awk  '{print $2}'`
            else
                LOGFILE=`cat ${PASSWD_CONF} | grep "SULOG_FILE" | awk -F= '{print $2}'`
            fi
            if [ -f $LOGFILE ] ; then
                echo "---- 로그 내용(최근 5줄만) -----" >> $CREATE_XML_FILE 2>&1
                tail -n 5 $LOGFILE | sed 's/>//g' | sed 's/<//g' >> $CREATE_XML_FILE 2>&1
		echo "---- 로그 내용(최근 5줄만) -----" >> $CREATE_XML_FILE 2>&1
            fi
        fi
    else
        echo ">>"$FILE"이 없음" >> $CREATE_XML_FILE 2>&1
    fi
else
    if [ -f ${SULOG_CONF} ] ; then
        cat ${SULOG_CONF} | grep -i "SULOG" >> $CREATE_XML_FILE 2>&1
        if [ `cat ${SULOG_CONF} | grep -i "SULOG" | grep -v '^#' | wc -l` -eq 0 ] ; then
            echo "취약: su로그 설정이 없음." >> $CREATE_XML_FILE 2>&1
            result="BAD"
        else
            ssh_log=`cat ${SULOG_CONF} | grep -i "SULOG" | grep -v '^#' | awk -F"=" '{print $2}'`
            if [ -f $ssh_log ] ; then
                ls -al $ssh_log >> $CREATE_XML_FILE 2>&1
                echo "양호: su로그 설정이 올바르게 설정되어있음." >> $CREATE_XML_FILE 2>&1
            else
                echo "취약: su로그 설정은 존재하지만 실제 파일이 존재하지 않음" >> $CREATE_XML_FILE 2>&1
                result="BAD"
            fi
        fi
    else
        echo "/etc/default/su 파일없음" >> $CREATE_XML_FILE 2>&1
    fi
fi


echo "" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "[syslog 로그설정]" >> $CREATE_XML_FILE 2>&1
FILES="/etc/syslog.conf /etc/rsyslog.conf"
for FILE in FILES
do
    if [ -f $FILE ] ; then
            echo "- "$FILE" 점검" >> $CREATE_XML_FILE 2>&1
            if [ `cat $FILE | grep "notice" | grep -v "^#" | wc -l` -eq 0 ] ; then
                echo "취약: "$FILE"에 notice 설정이 없습니다." >> $CREATE_XML_FILE 2>&1
                result="BAD"
            else
                cat $FILE | grep "notice" >> $CREATE_XML_FILE 2>&1
                echo "양호: "$FILE"에 notice 설정이 있습니다." >> $CREATE_XML_FILE 2>&1
            fi
            if [ `cat $FILE | grep "alert" | grep -v "^#" | wc -l` -eq 0 ] ; then
                echo "취약: "$FILE"에 alert 설정이 없습니다." >> $CREATE_XML_FILE 2>&1
                result="BAD"
            else
                cat $FILE | grep "alert" >> $CREATE_XML_FILE 2>&1
                echo "양호: "$FILE"에 alert 설정이 있습니다." >> $CREATE_XML_FILE 2>&1
            fi
            if [ `cat $FILE | grep "emerg" | grep -v "^#" | wc -l` -eq 0 ] ; then
                echo "취약: "$FILE"에 emerg 설정이 없습니다." >> $CREATE_XML_FILE 2>&1
                result="BAD"
            else
                cat $FILE | grep "emerg" >> $CREATE_XML_FILE 2>&1
                echo "양호: "$FILE"에 emerg 설정이 있습니다." >> $CREATE_XML_FILE 2>&1
            fi
        fi
done
echo "" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "[로그 파일 권한 설정]" >> $CREATE_XML_FILE 2>&1
FILES=`ls -ad /var/log/*`" /var/adm/wtmpx /var/adm/utmpx /var/adm/wtmp /var/adm/utmp /var/log/syslog /var/adm/sulog /var/adm/pacct /var/log/authlog /var/adm/messages /var/adm/loginlog /var/adm/lastlog "
for FILE in $FILES
do
    if [ $FILE != "." ] && [ $FILE != ".." ]; then
        if [ -f $FILE ] ; then
            ls -alL $FILE >> $CREATE_XML_FILE 2>&1
            if [ `ls -alL $FILE | awk '{print $1}' | grep "........w." | wc -l` -eq 0 ] ; then
                echo "양호: "$FILE"에 Other에 쓰기 권한이 없습니다." >> $CREATE_XML_FILE 2>&1
            else
                echo "취약: "$FILE"에 Other에 쓰기 권한이 있습니다." >> $CREATE_XML_FILE 2>&1
                result="BAD"
            fi
        fi
    fi
done



echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###









Classification="4. 로그관리"
Item="4.03 로그 저장주기"
ItemCode="${SCRIPT_VERSION}_0403"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "가. 로그 파일의 최소 저장 기간 적용" >> $CREATE_XML_FILE 2>&1
echo "나. 로그 기록을 정기적으로 확인/감독" >> $CREATE_XML_FILE 2>&1
echo "다. 로그 파일을 별도 저장 장치에 백업 보관 및 쓰기 권한 제한" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "로그파일의 보유기관은 사업 환경에 따라 조정할 수 있으나, [정보통신망 이용촉진 및 정보보호 등에 관한 법률], [개인정보보호법], [회사 사규] 등에 따라 최소 아래 기간 이상을 보관해야 함" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "1) 사용자 접속정보 기록" >> $CREATE_XML_FILE 2>&1
echo "사용자 로그인/로그아웃/정보변경 = 6개월 이상" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "2) 개인정보취급자의 개인정보처리 시스템 접속 기록" >> $CREATE_XML_FILE 2>&1
echo "정보주체 식별정보/개인정보취급자 식별정보/접속일시/접속지 정보/ 부여된 권한 유형에 따른 수행업무 등 = 2년 이상" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "3) 개인정보취급자 권한 변경 기록 " >> $CREATE_XML_FILE 2>&1
echo "개인정보취급자 권한생성/변경/삭제 = 5년 이상" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "담당자는 로그기록을 정기적으로 확인/감독하여 사용자 접속과 관련하여 오류 및 부정행위가 발생하거나 예상되는 경우 즉각적인 보고 조치가 되도록 해야 함" >> $CREATE_XML_FILE 2>&1
echo "로그 파일이 위/변조되지 않도록 하기 위해 별도 저장 장치에 백업보관하고, 쓰기 권한을 제한하여 보관하는 것이 바람직함. 그 외 수정이 가능하더라도 위/변조 여부를 확인할 수 있는 정보(HMAC 값 또는 전자서명값) 등을 이용한 별도의 보호조치를 취할 수 있음" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="CHECK"
echo "인터뷰 필요" >> $CREATE_XML_FILE 2>&1
echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###









Classification="5. 주요 응용 설정"
Item="5.01 FTP 서비스 사용자 제한"
ItemCode="${SCRIPT_VERSION}_0501"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "가. root 및 불필요한 계정의 FTP 서비스 제한" >> $CREATE_XML_FILE 2>&1
echo "나. FTP UMASK [077] 설정" >> $CREATE_XML_FILE 2>&1
echo "다. Anonymous FTP 제한 설정" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "※ 가, 나, 다 항목 모두 적용 해야 함" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "1. root 및 불필요한 계정의 FTP 사용 제한" >> $CREATE_XML_FILE 2>&1
echo "root 및 불필요한 시스템 계정의 FTP 사용이 제한되고 있는지 점검" >> $CREATE_XML_FILE 2>&1
echo "설정파일 : /etc/ftpusers, /etc/ftpd/ftpusers" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "- /etc/ftpusers 파일에 root 계정 및 시스템 계정을 추가하여 FTP 로그인을 제한" >> $CREATE_XML_FILE 2>&1
echo "ftp 접속시 root 로 바로 접속 할 수 없도록 설정파일 수정" >> $CREATE_XML_FILE 2>&1
echo "# echo root >> /etc/ftpusers 를 수행" >> $CREATE_XML_FILE 2>&1
echo "vi로 /etc/ftpusers를 열어 root 를 넣어줌" >> $CREATE_XML_FILE 2>&1
echo "# vi /etc/ftpusers" >> $CREATE_XML_FILE 2>&1
echo "root" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "2.FTP UMASK 제한" >> $CREATE_XML_FILE 2>&1
echo "# vi /etc/ftpd/ftpaccess 파일에 아래 내용 설정 (값 없을 시 신규 삽입)" >> $CREATE_XML_FILE 2>&1
echo "defumask      077  (탭으로 구분)" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "3. Anonymous FTP 제한" >> $CREATE_XML_FILE 2>&1
echo "- /etc/passwd 파일에 ftp 계정이 삭제되어 있는지 확인하여 있을 경우에 삭제" >> $CREATE_XML_FILE 2>&1
echo "# cat /etc/passwd | grep ftp" >> $CREATE_XML_FILE 2>&1
echo "# cat /etc/shadow | grep ftp" >> $CREATE_XML_FILE 2>&1
echo "# userdel ftp" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
ftp_service="disable"

if [ -f $INETD_CONF ] ; then
    if [ `cat $INETD_CONF | grep -v "^#" | grep ftp | wc -l` -eq 0 ] ; then
        echo $INETD_CONF"에 ftp 서비스 설정 없음" >> $CREATE_XML_FILE 2>&1
    else
        echo $INETD_CONF"에 ftp 서비스 설정 있음" >> $CREATE_XML_FILE 2>&1
        ftp_service="enable"
    fi
fi

if [ ${SYSTEM_OS} = "SunOS" ] ;then
	NET_STAT=`${Network_Status} | grep "LISTEN" | egrep ":21 |\*\.21 |ftp"`
else
	NET_STAT=`${Network_Status} | grep "LISTEN" | grep "tcp" | egrep ":21 |\*\.21 |ftp"`
fi

if [ "${FTP_OPEN_LIST_PORT}-" = "-" ] ; then
    echo "FTP포트(21) 존재하지 않음" >> $CREATE_XML_FILE 2>&1
else
    echo ${FTP_OPEN_LIST_PORT} >> $CREATE_XML_FILE 2>&1
    echo "FTP포트(21) 또는 FTP관련 포트가 LISTEN 중임" >> $CREATE_XML_FILE 2>&1
    ftp_service="enable"
fi



if [ ${ftp_service} = "enable" ] ; then 
    echo "[root 및 불필요한 계정의 FTP 사용제한]" >> $CREATE_XML_FILE 2>&1

    FILES="/etc/ftpusers /etc/ftpd/ftpusers"
    for FILE in $FILES
    do
        echo "["$FILE"] 점검" >> $CREATE_XML_FILE 2>&1
        if [ -f $FILE ] ; then
            if [ `cat $FILE | grep -v "^#" | grep "root" | wc -l` -eq 0 ] ; then
                echo "취약: "$FILE"에 root가 없음" >> $CREATE_XML_FILE 2>&1
                result="BAD"
            else
                echo "양호: "$FILE"에 root가 있음" >> $CREATE_XML_FILE 2>&1
            fi
        else
            echo $FILE" 파일 없음" >> $CREATE_XML_FILE 2>&1
        fi
    done
    
    echo "" >> $CREATE_XML_FILE 2>&1
    echo "-vsftp 점검" >> $CREATE_XML_FILE 2>&1
    FILE="/etc/vsftpd/vsftpd.conf"
    flag="YES"
    if [ -f $FILE ] ; then
        cat /etc/vsftpd/vsftpd.conf | grep userlist_enable  >> $CREATE_XML_FILE 2>&1
        if [ `cat /etc/vsftpd/vsftpd.conf | grep userlist_enable | grep -i "YES" | wc -l` -eq 0 ] ; then
            FILES="/etc/vsftpd/ftpusers /etc/vsftpd.ftpusers"
        else
            FILES="/etc/vsftpd/user_list /etc/vsftpd.user_list"
        fi
    else
        echo $FILE" 파일 없음" >> $CREATE_XML_FILE 2>&1
        flag="NO"
    fi

    if [ $flag != "NO" ] ; then
        for FILE in $FILES
        do
            if [ -f $FILE ] ; then
                if [ `cat $FILE | grep -v "^#" | grep "root" | wc -l` -eq 0 ] ; then
                    echo "취약: "$FILE"에 root가 없음" >> $CREATE_XML_FILE 2>&1
                    result="BAD"
                else
                    echo "양호: "$FILE"에 root가 있음" >> $CREATE_XML_FILE 2>&1
                fi
            else
                echo $FILE" 파일 없음" >> $CREATE_XML_FILE 2>&1
            fi	
        done
    fi

    echo "" >> $CREATE_XML_FILE 2>&1
    echo "-wu-ftp 점검" >> $CREATE_XML_FILE 2>&1
    FILE="/etc/pam.d/wu-ftpd"
    if [ -f $FILE ] ; then
        if [ `cat $FILE | grep "auth" | grep "pam_listfile.so" | grep "item=user" | grep "sense=deny" | grep "onerr=succeed" | grep -v "^#" | wc -l` -eq 0 ] ; then
            echo "취약: "$FILE"에 auth  required pam_listfile.so item=user sense=deny file=/etc/ftpusers onerr=succeed 설정없음" >> $CREATE_XML_FILE 2>&1
            result="BAD"
        else
            echo " 양호"
        fi
    else
        echo $FILE" 파일 없음" >> $CREATE_XML_FILE 2>&1
    fi

    echo "" >> $CREATE_XML_FILE 2>&1
    echo "" >> $CREATE_XML_FILE 2>&1
    echo "[FTP UMASK]" >> $CREATE_XML_FILE 2>&1
    CHECK_OS="TRUE"
    if [ ${SYSTEM_OS} = "SunOS" ] ;then
	if [ `ToInt ${VERSION}` -ge 510 ] && [ `ToInt ${VERSION}` -lt 520 ]  ; then  
	    CHECK_OS="FALSE"
	    if [ -f /etc/ftpd/ftpaccess ] ; then
	        echo "------------- /etc/ftpd/ftpaccess -------------" >> $CREATE_XML_FILE 2>&1
		cat /etc/ftpd/ftpaccess >> $CREATE_XML_FILE 2>&1
		echo "------------- end -------------" >> $CREATE_XML_FILE 2>&1
		if [ `cat /etc/ftpd/ftpaccess | grep "077"  | wc -l` -eq 0 ] ; then
		    echo "취약: /etc/ftpd/ftpaccess에 UMASK 가 077로 설정되지 않음" >> $CREATE_XML_FILE 2>&1
		    result="BAD"
		else		
		    echo "양호: /etc/ftpd/ftpaccess에 UMASK 가 077로 설정됨" >> $CREATE_XML_FILE 2>&1
		fi
            else
	        echo $FILE" 파일 없음" >> $CREATE_XML_FILE 2>&1
	    fi
        fi
    fi

    if [ ${CHECK_OS} = "TRUE" ] ; then
        FILES="/etc/ftpd.conf /etc/vsftpd.conf /etc/vsftpd/vsftpd.conf /usr/local/etc/proftpd.conf /usr/local/proftpd/etc/proftpd.conf /etc/proftpd.conf /etc/proftpd/proftpd.conf"
        for FILE in $FILES
        do
            if [ -f $FILE ] ; then
                if [ `cat $FILE | grep -i "umask" | grep "077" | wc -l` -eq 0 ] ;then
                    echo "취약: "$FILE"에 UMASK 가 077로 설정되지 않음" >> $CREATE_XML_FILE 2>&1
                    result="BAD"
                else		
                    echo "양호: "$FILE"에 UMASK 가 077로 설정됨" >> $CREATE_XML_FILE 2>&1
                fi
            else
                echo $FILE" 파일 없음" >> $CREATE_XML_FILE 2>&1
            fi
        done
    
        if [ -f $INETD_CONF ] ; then
            if [ `cat $INETD_CONF | grep -v "^#" | grep "ftp" | grep "077" | wc -l` -eq 0 ] ; then
                echo "취약: "$INETD_CONF"에 ftp UMASK 값이 없거나 077로 설정되지 않음" >> $CREATE_XML_FILE 2>&1
                result="BAD"
            else
                echo "양호: "$INETD_CONF"에 ftp UMASK 값이 077로 설정되어 있음" >> $CREATE_XML_FILE 2>&1
            fi
        else
            echo $INETD_CONF"파일 없음" >> $CREATE_XML_FILE 2>&1
        fi
    fi

    echo "" >> $CREATE_XML_FILE 2>&1
    echo "" >> $CREATE_XML_FILE 2>&1
    echo "[Anonymouse FTP 제한]" >> $CREATE_XML_FILE 2>&1
    if [ `cat /etc/passwd | grep "ftp" | wc -l` -eq 0 ] ; then
        echo "양호: ftp계정이 존재하지 않음" >> $CREATE_XML_FILE 2>&1
    else
        echo "취약: ftp계정이 존재함" >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi

    FILE="/etc/vsftpd/vsftpd.conf"
    if [ -f $FILE ] ; then
        if [ `cat $FILE | grep "anonymous_enable" | grep "NO" | wc -l` -eq 0 ] ; then
            echo "취약: "$FILE"에 anonymous_enable가 NO로 설정되지 않음" >> $CREATE_XML_FILE 2>&1
            result="BAD"
        else
            echo "양호: "$FILE"에 anonymous_enable가 NO로 설정되어 있음" >> $CREATE_XML_FILE 2>&1
        fi
    else
        echo $FILE" 파일 없음" >> $CREATE_XML_FILE 2>&1
    fi
else
	result="GOOD"
	echo "현재 FTP 서비스가 존재하지 않으므로 점검 제외됨" >> $CREATE_XML_FILE 2>&1
fi


echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###










Classification="5. 주요 응용 설정"
Item="5.02 SNMP 서비스 설정"
ItemCode="${SCRIPT_VERSION}_0502"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "가. 서비스 필요 시" >> $CREATE_XML_FILE 2>&1
echo " - SNMP의 Community String 이 public private 아님" >> $CREATE_XML_FILE 2>&1
echo "  (SNMP BruteForce Attack 또는 SNMP Dictionary Attack이 가능하므로 반드시 8자리 이상의 자릿수와 숫자, 기호를 혼합하여 강력한 패스워드 형식으로 설정)" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "나. 서비스 불필요 시" >> $CREATE_XML_FILE 2>&1
echo " - 서비스 중지 및 시스템 재시작시 서비스가 실행되지 않도록 설정" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "SNMP 서비스를 중지하거나 COMMUNITY STRING 값을 유추하기 힘든 문자열로 설정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
CHECK_CONF="FALSE"
ps -ef | grep snmp | grep -v "dmi" | grep -v "grep" > snmpps.temp
if [ ${SYSTEM_OS} = "SunOS" ] ;then
    if [ `ToInt ${VERSION}` -ge 510 ] && [ `ToInt ${VERSION}` -lt 520 ]  ; then
        svcs -a | grep snmp | grep -v "dmi" | grep -v "grep" >> snmpps.temp
    fi
fi



if [ `cat snmpps.temp | grep snmp | grep -v "dmi" | grep -v "grep" | wc -l` -eq 0 ] ; then
    echo "양호 : 동작중인 snmpd 서비스 없음" >> $CREATE_XML_FILE 2>&1
    CHECK_CONF="FALSE"
else
    ps -ef | grep -v grep | grep snmpd >> $CREATE_XML_FILE 2>&1
    echo "확인필요 : 동작중인 snmpd 서비스 있음" >> $CREATE_XML_FILE 2>&1
    CHECK_CONF="TRUE"
fi
	
if [ $CHECK_CONF = "TRUE" ] ; then
    FILES="/etc/snmp/conf/snmpd.conf /etc/snmp/snmpd.conf /etc/snmpd.conf"
    for FILE in $FILES
    do
        if [ -f $FILE ] ; then
            if [ `cat $FILE |  grep community | grep -v '^#' | wc -l` -eq 0 ] ; then
                echo "취약 : "$FILE"에 community 설정이 없음" >> $CREATE_XML_FILE 2>&1
                result="BAD"
            else
                if [ `cat $FILE |  grep community | grep -v '^#' | egrep -i "public|private" | wc -l` -eq 0 ] ; then
                    echo "양호 : "$FILE"에 community string에 대해 public 또는 private 설정이 없음" >> $CREATE_XML_FILE 2>&1
                    result="GOOD"
                else
                    cat $FILE |  grep community | grep -v '^#' | egrep -i "public|private" >> $CREATE_XML_FILE 2>&1
                    echo "취약 : "$FILE"에 community string에 대해 public 또는 private 설정이 있음" >> $CREATE_XML_FILE 2>&1
                    result="BAD"
                fi
            fi
        else
            echo $FILE" 파일 없음" >> $CREATE_XML_FILE 2>&1
        fi
    done
fi
rm -rf snmpps.temp

echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###








Classification="5. 주요 응용 설정"
Item="5.03 SMTP 서비스 설정"
ItemCode="${SCRIPT_VERSION}_0503"
Risk="M"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "가. 서비스 필요 시" >> $CREATE_XML_FILE 2>&1
echo "- Sendmail Abuse 방지 방법 및 일반 사용자 q옵션 사용제한" >> $CREATE_XML_FILE 2>&1
echo "- 릴레이 방지 설정 또는, 릴레이 대상 접근 제어 설정" >> $CREATE_XML_FILE 2>&1
echo "- Sendmail 8.15..2 이상의 버전 사용" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "나. 서비스 불필요 시" >> $CREATE_XML_FILE 2>&1
echo "- 서비스 중지 및 시스템 재시작 시 서비스가 실행되지 않도록 설정" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "SMTP 서비스를 중지하거나 noexpn, novrfy제한 설정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
CHECK_CONF="FALSE"
SNMP_OPEN_LIST=`ps -ef | grep -v grep | egrep "smtp|sendmail"`

CHECK_CONF="FALSE"
if [ "${SNMP_OPEN_LIST}-" = "-" ] ; then
    echo "양호 : 동작중인 SMTP 서비스 없음" >> $CREATE_XML_FILE 2>&1
    CHECK_CONF="FALSE"
else
    echo ${SNMP_OPEN_LIST} >> $CREATE_XML_FILE 2>&1
    echo "확인필요 : 동작중인 SMTP 서비스 있음" >> $CREATE_XML_FILE 2>&1
    CHECK_CONF="TRUE"
fi

	

if [ $CHECK_CONF = "TRUE" ] ; then
    if [ -f sendmail.tmp ] ; then
        echo ""
    else
        echo \$Z | sendmail -bt -d0  > sendmail.tmp 2>&1
    fi

    
    if [ -f sendmail.tmp ] ; then
        SENDMAIL_VERSION=`cat sendmail.tmp | grep "^>" | grep "\." | awk '{print $2}'`
    else
        ( sleep 1; echo "quit"; ) | telnet 127.0.0.1 25 > sendmail.tmp
        if [ `cat sendmail.tmp | grep "^220" | grep "\." | wc -l` -eq 0 ] ; then
            echo "sendmail 실행 및 25번 포트 접근이 안되므로 점검불가"
        else
            SENDMAIL_VERSION=`cat sendmail.tmp | grep "^220" | grep "\." | awk '{print $5}' | awk -F"+" '{print $1}'`
        fi
    fi

    echo "- 버전점검 (기준: 8.15.2)" >> $CREATE_XML_FILE 2>&1
    cat sendmail.tmp | sed 's/>//g' | sed 's/<//g'| sed 's/&//g'   >> $CREATE_XML_FILE 2>&1
    if [ `echo $SENDMAIL_VERSION | grep "\." | wc -l` -eq 0 ] ; then
        echo "버전정보를 가져오지 못하므로 점검불가" >> $CREATE_XML_FILE 2>&1
	result_version="FALSE"
    else
        result_version="GOOD"
        s_ver1=`echo $SENDMAIL_VERSION | awk -F"." '{print $1}'`
        s_ver2=`echo $SENDMAIL_VERSION | awk -F"." '{print $2}'`
        s_ver3=`echo $SENDMAIL_VERSION | awk -F"." '{print $3}'`
		
        if [ $s_ver1 -lt 8 ] ; then
            echo "취약: 8 버전 보다 작은 버전으로 설치되어 있음" >> $CREATE_XML_FILE 2>&1
            result_version="BAD"
            result="BAD"
        else
            if [ $s_ver2 -lt 15 ] ;then
                echo "취약: 8.15 버전 보다 작은 버전으로 설치되어 있음" >> $CREATE_XML_FILE 2>&1
                result_version="BAD"
                result="BAD"
            else
                if [ %s_ver3 -lt 2 ] ; then
                    echo "취약: 8.15.1 버전 보다 작은 버전으로 설치되어 있음" >> $CREATE_XML_FILE 2>&1
                    result_version="BAD"
                    result="BAD"
                else
                    echo "양호: 8.15.1 버전 이상으로 설치되어 있음" >> $CREATE_XML_FILE 2>&1
		    result_version="GOOD"
                fi
            fi
        fi
    fi
fi

if [ $CHECK_CONF = "TRUE" ] ; then
    if [ -f ${SMTP_CONF} ] ; then
        echo "- noexpn, novrfy, restricqrun 옵션 점검" >> $CREATE_XML_FILE 2>&1
        if [ $result_version = "BAD" ] ; then			
            cat ${SMTP_CONF} |  grep -i "PrivacyOptions" | egrep -i "noexpn|novrfy|restricqrun" >> $CREATE_XML_FILE 2>&1
            if [ `cat ${SMTP_CONF} |  grep -i "PrivacyOptions" | grep -v '^#' | egrep -i "noexpn|novrfy|restricqrun" | wc -l` -eq 0 ] ; then
                echo "취약 : ${SMTP_CONF}에 PrivacyOptions에  noexpn, novrfy, restricqrun 설정이 없음" >> $CREATE_XML_FILE 2>&1
                result="BAD"
            else
                echo "양호 : ${SMTP_CONF}에 PrivacyOptions에  noexpn, novrfy, restricqrun 설정이 있음" >> $CREATE_XML_FILE 2>&1
            fi
        elif [ $result_version = "GOOD" ] ; then		    
            echo "8.15.2 이상 버전으로 설치되어 있으므로 생략함" >> $CREATE_XML_FILE 2>&1
        fi

        echo "- 릴레이제한 설정점검" >> $CREATE_XML_FILE 2>&1
        cat ${SMTP_CONF} | grep -i "Relaying denied" | sed 's/>//g' | sed 's/<//g'| sed 's/&//g' >> $CREATE_XML_FILE 2>&1
        if [ `cat ${SMTP_CONF} | grep -i "Relaying denied" | grep -v '^#' | wc -l` -eq 0 ] ; then
            echo "취약 : ${SMTP_CONF}에 Relaying denied 설정이 없음" >> $CREATE_XML_FILE 2>&1
            result="BAD"
        else
            echo "양호 : ${SMTP_CONF}에 Relaying denied 설정이 있음" >> $CREATE_XML_FILE 2>&1
        fi
    else
        echo "${SMTP_CONF} 파일 없음" >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi
fi

echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###








Classification="5. 주요 응용 설정"
Item="5.04 DNS 보안 설정"
ItemCode="${SCRIPT_VERSION}_0504"
Risk="M"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "가. 서비스 필요 시" >> $CREATE_XML_FILE 2>&1
echo " - 특정서버로만 전송 가능하도록 IP 제한" >> $CREATE_XML_FILE 2>&1
echo " - BIND 9.10.3-P3 이상의 최신 버전 업데이트 권고" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "나. 서비스 불필요 시" >> $CREATE_XML_FILE 2>&1
echo " - 서비스 중지 및 시스템 재시작시 서비스 시작되지 않도록 설정" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "DNS서비스 중지 또는 특정서버로만 전송가능하도록 IP제한 설정" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
CHECK_CONF="FALSE"
DNS_OPEN_LIST_PS=`ps -ef | grep -v grep | grep -w "named" | grep -v "(dns helper)"`

if [ "${DNS_OPEN_LIST_PS}-" = "-" ] ; then
    echo "양호 : 동작중인 DNS 서비스 없음" >> $CREATE_XML_FILE 2>&1
else
    echo ${DNS_OPEN_LIST_PS} >> $CREATE_XML_FILE 2>&1
    echo "확인필요 : 동작중인 DNS 서비스 있음" >> $CREATE_XML_FILE 2>&1
    CHECK_CONF="TRUE"
fi

DNS_OPEN_LIST_PORT=`${Network_Status} | grep "LISTEN" | egrep "\:53 |\*\.53 "`
if [ "${DNS_OPEN_LIST_PORT}-" = "-" ] ; then
    echo "DNS포트(53) 존재하지 않음" >> $CREATE_XML_FILE 2>&1
else
    echo ${DNS_OPEN_LIST_PORT} >> $CREATE_XML_FILE 2>&1
    echo "DNS포느(53) 또는 DNS관련 포트가 LISTEN 중임" >> $CREATE_XML_FILE 2>&1
    CHECK_CONF="TRUE"
fi

if [ $CHECK_CONF = "TRUE" ] ; then
    if [ -f ${DNS_CONF} ] ; then
        cat ${DNS_CONF} |  grep -v '^#' | egrep -i "allow-transfer|xfrnets" >> $CREATE_XML_FILE 2>&1
        if [ `cat ${DNS_CONF} |  grep -v '^#' | egrep -i "allow-transfer|xfrnets" | wc -l` -eq 0 ] ; then
            echo "취약 : ${DNS_CONF}에 특정서버만 전송가능하도록 IP설정이 없음" >> $CREATE_XML_FILE 2>&1
            result="BAD"
        else
            echo "양호 : ${DNS_CONF}에 특정서버만 전송가능하도록 IP설정이 있음" >> $CREATE_XML_FILE 2>&1
        fi
    else
        echo "${DNS_CONF} 파일 없음" >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi
fi
echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###








Classification="5. 주요 응용 설정"
Item="5.05 SWAT 보안 설정"
ItemCode="${SCRIPT_VERSION}_0505"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "가. SWAT 서비스 제거" >> $CREATE_XML_FILE 2>&1
echo "※ 침입차단시스템을 사용하여 901번 포트 필터링 시 예외처리" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "[SWAT 서비스 필요 시]" >> $CREATE_XML_FILE 2>&1
echo "침입차단시스템을 사용한다면 침입차단시스템 관리자에게 연락하여 901번 포트를 필터링 함으로써 외부 네트워크로부터의 SWAT 접근을 막기를 권장함" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "[SWAT 서비스 불필요 시]" >> $CREATE_XML_FILE 2>&1
echo "1) SWAT 데몬 중지" >> $CREATE_XML_FILE 2>&1
echo "# svcs -p *swat*" >> $CREATE_XML_FILE 2>&1
echo "# svcadm disable svc:/network/swat" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
CHECK_FLAG="FALSE"
if [ ${SYSTEM_OS} = "SunOS" ] ;then
    if [ `ToInt ${VERSION}` -ge 510 ] && [ `ToInt ${VERSION}` -lt 520 ]  ; then
        if [ `svcs -a | grep "swat" | grep "online" | wc -l` -eq 0 ] ; then
            echo "SWAT이 비실행중입니다" >> $CREATE_XML_FILE 2>&1
            result="GOOD"
        else
            svcs -a | grep "swat" | grep "online" >> $CREATE_XML_FILE 2>&1
            result="BAD"
        fi
        CHECK_FLAG="TRUE"
    else
        CHECK_FLAG="FALSE"
    fi
else
    CHECK_FLAG="FALSE"
fi

if [ ${CHECK_FLAG} = "FALSE" ] ; then
    if [ -f ${INETD_CONF} ] ; then
        echo "* ${INETD_CONF} 파일 확인...."  >> $CREATE_XML_FILE 2>&1
        cat ${INETD_CONF} | grep "swat" >> $CREATE_XML_FILE 2>&1
        if [ `cat ${INETD_CONF} | grep "swat" | grep -v "^#" | wc -l` -eq 0 ] ; then
            echo "SWAT이 비실행중입니다" >> $CREATE_XML_FILE 2>&1			
        else
            echo "취약:SWAT이 실행중입니다" >> $CREATE_XML_FILE 2>&1	
            result="BAD"
        fi
    fi
fi


echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###








Classification="5. 주요 응용 설정"
Item="5.06 Samba 버전 취약성"
ItemCode="${SCRIPT_VERSION}_0506"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "가. 서비스 필요 시" >> $CREATE_XML_FILE 2>&1
echo " - Version 4.3.4 업그레이드" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "나. 서비스 불필요 시" >> $CREATE_XML_FILE 2>&1
echo " - 서비스 제거" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "[Samba 서비스 필요 시]" >> $CREATE_XML_FILE 2>&1
echo "서비스를 위해 사용시에는 Version 4.3.4 업그레이드" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "[Samba 서비스 불필요 시]" >> $CREATE_XML_FILE 2>&1
echo "1) Samba를 사용할 필요가 없다면 아래와 같이 구동중지" >> $CREATE_XML_FILE 2>&1
echo "# svcadm disable svc:/network/samba" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
CHECK_CONF="FALSE"

SAMBA_OPEN_LIST=`${Network_Status} | egrep "smbd|nmbd|winbind"`
if [ "${SAMBA_OPEN_LIST}-" = "-" ] ; then
    echo "양호 : 동작중인 SAMBA 서비스 없음" >> $CREATE_XML_FILE 2>&1
    CHECK_CONF="FALSE"
else
    echo ${SAMBA_OPEN_LIST} >> $CREATE_XML_FILE 2>&1
    echo "확인필요 : 동작중인 SAMBA 서비스 있음" >> $CREATE_XML_FILE 2>&1
    CHECK_CONF="TRUE"
fi

if [ $CHECK_CONF = "TRUE" ]
then
	if [ `which smbd | grep -v "^no" | wc -l` -eq 0 ]
	then
		echo "smbd 파일이 존재하지 않습니다." >> $CREATE_XML_FILE 2>&1
	else
		echo " 현재 SAMBA 버전은 "`smbd -V | awk '{print $2}'`"입니다." >> $CREATE_XML_FILE 2>&1
		smb_ver1=`smbd -V | awk '{print $2}' | awk -F"-" '{print $1}' | awk -F"." '{print $1}'`
		smb_ver2=`smbd -V | awk '{print $2}' | awk -F"-" '{print $1}' | awk -F"." '{print $2}'`
		smb_ver3=`smbd -V | awk '{print $2}' | awk -F"-" '{print $1}' | awk -F"." '{print $3}'`

		if [ $smb_ver1 -lt 4 ]
		then
			echo "취약: 4 버전보다 낮은 버전으로 설치됨" >> $CREATE_XML_FILE 2>&1
			result="BAD"
		else
			if [ $smb_ver2 -lt 3 ] 
			then
				echo "취약: 4.3 버전보다 낮은 버전으로 설치됨" >> $CREATE_XML_FILE 2>&1
				result="BAD"
			else
				if [ $smb_ver3 -lt 4 ]
				then
					echo "취약: 4.3.4 버전보다 낮은 버전으로 설치됨" >> $CREATE_XML_FILE 2>&1
					result="BAD"
				else
					echo "양호: 4.3.4 이상 버전으로 설치됨" >> $CREATE_XML_FILE 2>&1
				fi
			fi
		fi
	fi
fi
echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###








Classification="5. 주요 응용 설정"
Item="5.07 SSH 버전 취약성"
ItemCode="${SCRIPT_VERSION}_0507"
Risk="M"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "가. 서비스 필요 시" >> $CREATE_XML_FILE 2>&1
echo " - 최신버전의 SSH 를 설치하여 운영 (openSSH 7.1p2 또는 sun_SSH_1.1.4)" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "나. 서비스 불필요 시" >> $CREATE_XML_FILE 2>&1
echo " - 실행중인 SSH 서비스 제거" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "[서비스 필요 시]" >> $CREATE_XML_FILE 2>&1
echo "1) 최신버전의 SSH를 설치하여 운영하는 것을 권고" >> $CREATE_XML_FILE 2>&1
echo "최신 SSH버전은 현재(2016.01)기준으로 openSSH 7.1p2이며, openSSH 7.1p2이상의 버전을 사용하거나 sun_SSH를 사용하는 경우 sun_SSH_1.1.4 이상을 사용할 것을 권장 " >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "[서비스 불필요 시]" >> $CREATE_XML_FILE 2>&1
echo "1) 실행중인 서비스를 중지" >> $CREATE_XML_FILE 2>&1
echo "# ps -ef | grep sshd" >> $CREATE_XML_FILE 2>&1
echo "root    414  0.0  0.7  2672 1692  /usr/sbin/sshd" >> $CREATE_XML_FILE 2>&1
echo "# kill -9 414" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="CHECK"
CHECK_CONF="FALSE"
if [ `ps -ef | grep -v grep | grep "sshd" | wc -l` -eq 0 ] ; then
    echo "양호 : 동작중인 SSH 서비스 없음" >> $CREATE_XML_FILE 2>&1
    CHECK_CONF="FALSE"
    result="GOOD" 
else
    echo "확인필요 : 동작중인 SSH 서비스 있음" >> $CREATE_XML_FILE 2>&1
    CHECK_CONF="TRUE"
    result="CHECK"
fi
rm -rf SSH_VERSION.temp
ssh -V 2> SSH_VERSION.temp

result="CHECK"
if [ $CHECK_CONF = "TRUE" ] ; then
    echo " 현재 SSH 버전은 "`cat SSH_VERSION.temp `"입니다." >> $CREATE_XML_FILE 2>&1
    if [ `cat SSH_VERSION.temp | wc -l` -eq 0 ] ; then
        echo "확인필요: 버전정보 가져오지 못해 [확인필요] 처리함" >> $CREATE_XML_FILE 2>&1
        result="CHECK"	
	CHECK_CONF="FALSE"
    fi
fi

if [ $CHECK_CONF = "TRUE" ] ; then
    if [ "${SYSTEM_OS}" = "Linux" ] ; then
        if [ "${SYSTEM_OS_MAKER}" = "CentOS" ] ; then
            echo "CentOS 버전정보"  >> $CREATE_XML_FILE 2>&1
            cat /etc/redhat-release  >> $CREATE_XML_FILE 2>&1
            CENT_VER=`cat /etc/redhat-release |awk -F"release" '{print $2}' |awk '{print $1}' |awk -F"." '{print $1}'`
            if [ $CENT_VER == 4 ] ; then
                STAND_VER1=3
                STAND_VER2=9p1
                echo "CentOS "$CENT_VER"버전이므로 openSSH "$STAND_VER1"."$STAND_VER2" 기준으로 점검" >> $CREATE_XML_FILE 2>&1
            else
                if [ $CENT_VER == 5 ] ; then
                    STAND_VER1=4
                    STAND_VER2=2p2
                    echo "CentOS "$CENT_VER"버전이므로 openSSH "$STAND_VER1"."$STAND_VER2" 기준으로 점검" >> $CREATE_XML_FILE 2>&1
                else
                    if [ $CENT_VER == 6 ] ; then
                        STAND_VER1=5
                        STAND_VER2=3p1
                        echo "CentOS "$CENT_VER"버전이므로 openSSH "$STAND_VER1"."$STAND_VER2" 기준으로 점검" >> $CREATE_XML_FILE 2>&1
                    else
                        if [ $CENT_VER == 7 ] ; then
                            STAND_VER1=6
                            STAND_VER2=61p1
                            echo "CentOS "$CENT_VER"버전이므로 openSSH "$STAND_VER1"."$STAND_VER2" 기준으로 점검" >> $CREATE_XML_FILE 2>&1
                        else
                            STAND_VER1=6
                            STAND_VER2=7
                            CENT_ETC_VER="4-7이 아닌 다른"
                            echo "CentOS "$CENT_ETC_VER"버전이므로 openSSH "$STAND_VER1"."$STAND_VER2" 기준으로 점검" >> $CREATE_XML_FILE 2>&1
                        fi
                    fi
                fi
            fi
	elif [ "${SYSTEM_OS_MAKER}" = "RedHat" ] || [ "${SYSTEM_OS_MAKER}" = "Red" ] ; then
            echo "RedHat 버전정보"  >> $CREATE_XML_FILE 2>&1
            cat /etc/redhat-release  >> $CREATE_XML_FILE 2>&1
            RED_VER=`cat /etc/redhat-release |awk -F"release" '{print $2}' |awk '{print $1}' |awk -F"." '{print $1}'`
            if [ $RED_VER == 4 ] ; then
                STAND_VER1=3
                STAND_VER2=9p1
                echo "Red Hat "$RED_VER"버전이므로 openSSH "$STAND_VER1"."$STAND_VER2" 기준으로 점검" >> $CREATE_XML_FILE 2>&1
            else
                if [ $RED_VER == 5 ] ; then
                    STAND_VER1=4
                    STAND_VER2=3p2
                    echo "Red Hat "$RED_VER"버전이므로 openSSH "$STAND_VER1"."$STAND_VER2" 기준으로 점검" >> $CREATE_XML_FILE 2>&1
                else
                    if [ $RED_VER == 6 ] ; then
                        STAND_VER1=5
                        STAND_VER2=3p1
                        echo "Red Hat "$RED_VER"버전이므로 openSSH "$STAND_VER1"."$STAND_VER2" 기준으로 점검" >> $CREATE_XML_FILE 2>&1
                    else
                        if [ $RED_VER == 7 ] ; 	then
                            STAND_VER1=6
                            STAND_VER2=61p1
                            echo "Red Hat "$RED_VER"버전이므로 openSSH "$STAND_VER1"."$STAND_VER2" 기준으로 점검" >> $CREATE_XML_FILE 2>&1
                        else
                            STAND_VER1=6
                            STAND_VER2=7
                            RED_ETC_VER="4-7이 아닌 다른"
                            echo "Red Hat "$RED_ETC_VER"버전이므로 openSSH "$STAND_VER1"."$STAND_VER2" 기준으로 점검" >> $CREATE_XML_FILE 2>&1
                        fi
                    fi
                fi
            fi

	else
            STAND_VER1=6
            STAND_VER2=7
            echo "리눅스 배포버전을 확인하지 못해 최신 openSSH "$STAND_VER1"."$STAND_VER2" 기준으로 점검" >> $CREATE_XML_FILE 2>&1
        fi

        if [ `cat SSH_VERSION.temp | grep "OpenSSH" | wc -l` -eq 1 ] ; then
            echo "Open_SSH 점검"	 >> $CREATE_XML_FILE 2>&1
            SSH_VER=`cat SSH_VERSION.temp | awk -F"," '{print $1}' | awk -F"_" '{print $NF}'`
            ssh_ver1=`echo $SSH_VER | awk -F"." '{print $1}'`
            ssh_ver2=`echo $SSH_VER | awk -F"." '{print $2}'` 
            if [ $ssh_ver1 -lt $STAND_VER1 ] ; 	then
                echo "취약: "$STAND_VER1" 버전보다 낮은 버전으로 설치됨"  >> $CREATE_XML_FILE 2>&1
                result="BAD"
            else		
                if [ $ssh_ver1 -gt $STAND_VER1 ] ; then
                    echo "양호: "$STAND_VER1"."$STAND_VER2" 이상 버전으로 설치됨"  >> $CREATE_XML_FILE 2>&1
                    result="GOOD"
                else
                    echo "양호: "$STAND_VER1"."$STAND_VER2" 이상 버전으로 설치됨"  >> $CREATE_XML_FILE 2>&1
                    result="GOOD"
                fi
            fi
	fi
    else
        #OpenSSH
        if [ `cat SSH_VERSION.temp | grep "OpenSSH" | wc -l` -eq 1 ] ; then
            echo "Open_SSH 점검"  >> $CREATE_XML_FILE 2>&1
            SSH_VER=`cat SSH_VERSION.temp | awk '{print $1}' | awk -F"_" '{print $2}' | awk -F"p" '{print $1}'`
            ssh_ver1=`echo $SSH_VER | awk -F"." '{print $1}'`
            ssh_ver2=`echo $SSH_VER | awk -F"." '{print $2}'`
            if [ $ssh_ver1 -lt 7 ] ;then
                echo "취약: 7 버전보다 낮은 버전으로 설치됨" >> $CREATE_XML_FILE 2>&1
                result="BAD"
            else
                if [ $ssh_ver2 -lt 1 ] ; then
                    echo "취약: 7.1 버전보다 낮은 버전으로 설치됨" >> $CREATE_XML_FILE 2>&1
                    result="BAD"
                else
                    echo "양호: 7.1 이상 버전으로 설치됨" >> $CREATE_XML_FILE 2>&1
                fi
            fi
        fi

        #Sun-SSH
        if [ `cat SSH_VERSION.temp | grep "Sun_SSH" | wc -l` -eq 1 ] ; then
            echo "Sun_SSH 점검"  >> $CREATE_XML_FILE 2>&1
            SSH_VER=`cat SSH_VERSION.temp | awk -F"," '{print $1}' | awk -F"_" '{print $NF}'`
            SSH_COUNT=`echo $SSH_VER | awk -F"." '{print NF}'`	
            if [ $SSH_COUNT -eq 3 ] ; then
                ssh_ver1=`echo $SSH_VER | awk -F"." '{print $1}'`
                ssh_ver2=`echo $SSH_VER | awk -F"." '{print $2}'`
                ssh_ver3=`echo $SSH_VER | awk -F"." '{print $3}'`
                if [ $ssh_ver1 -lt 1 ] ; then
                    echo "취약: 1 버전보다 낮은 버전으로 설치됨" >> $CREATE_XML_FILE 2>&1
                    result="BAD"
                else
                    if [ $ssh_ver2 -lt 1 ] ; then
                        echo "취약: 1.1 버전보다 낮은 버전으로 설치됨" >> $CREATE_XML_FILE 2>&1
	                result="BAD"
                    else
                        if [ $ssh_ver3 -lt 4 ] ; then
		            echo "취약: 1.1.4 버전보다 낮은 버전으로 설치됨" >> $CREATE_XML_FILE 2>&1
                            result="BAD"
                        else
                            echo "양호: 1.1.4 이상 버전으로 설치됨" >> $CREATE_XML_FILE 2>&1
                            result="GOOD" 
                        fi
                    fi
                fi
            else
                ssh_ver1=`echo $SSH_VER | awk -F"." '{print $1}'`
                ssh_ver2=`echo $SSH_VER | awk -F"." '{print $2}'`
                if [ $ssh_ver1 -lt 1 ] ; then
                    echo "취약: 1 버전보다 낮은 버전으로 설치됨" >> $CREATE_XML_FILE 2>&1
                    result="BAD"
                else
                    if [ $ssh_ver2 -ge 2 ]; then
                        echo "양호: 1.1.4 버전보다 높은 버전으로 설치됨" >> $CREATE_XML_FILE 2>&1
                        result="GOOD" 
                    else
                        echo "취약: 1.1.4 버전보다 낮은 버전으로 설치됨" >> $CREATE_XML_FILE 2>&1
                        result="BAD"
                    fi
                fi																
            fi				
        fi
    fi
fi
rm -rf SSH_VERSION.temp



echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###








Classification="5. 주요 응용 설정"
Item="5.08 x-server 접속 제한 설정"
ItemCode="${SCRIPT_VERSION}_0508"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "모든 사용자의 자동 실행파일 에서 [xhost +] 와 같은 x-server 접속 설정 제거" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "모든 사용자의 자동 실행파일(.login, .profile, .cshrc, .xinitrc, .xsession 등)에서 [xhost +]와 같은 명령은 모두 제거" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
HOMEDIRS=`cat ${PASSWD} | awk -F":" 'length($6) > 0 {print $6}' | sort -u | grep -v '/bin/false' `
FILES=".login .profile .cshrc .xinitrc .xsession"
for dir in $HOMEDIRS
do
    for file in $FILES
    do
        FILE=$dir/$file
        if [ -f $FILE ] ;then
            if [ `cat $FILE | grep "xhost +" | wc -l` -eq 0 ] ; then
                echo " 양호 : "$FILE"에 xhost + 설정이 없음" >> $CREATE_XML_FILE 2>&1
            else	
                echo "취약 : "$FILE"에 xhost + 설정이 있음" >> $CREATE_XML_FILE 2>&1
                result="BAD"
            fi
        else
            echo $FILE"  없음" >> $CREATE_XML_FILE 2>&1
        fi
    done
done
echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###








Classification="6. 시스템 보안설정"
Item="6.01 /etc/system 파일 보안 설정"
ItemCode="${SCRIPT_VERSION}_0601"
Risk="M"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "/etc/system 파일의 set noexec_user_stack = 1 설정" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "/etc/system 파일에 다음과 같은 설정 추가" >> $CREATE_XML_FILE 2>&1
echo "set noexec_user_stack = 1" >> $CREATE_XML_FILE 2>&1
echo "set noexec_user_stack_log = 1" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
NA_LIST="AIX HP-UX Linux"
if [ ${SYSTEM_OS} = "SunOS" ] ;then
    ### 현재설정 ###
    echo "<Issue>" >> $CREATE_XML_FILE 2>&1
    result="GOOD"
    if [ -f ${CHECK_SYSTEM} ] ; then
        cat ${CHECK_SYSTEM} | grep -i "noexec_user_stack" >> $CREATE_XML_FILE 2>&1
        if [ `cat ${CHECK_SYSTEM} | grep -i "noexec_user_stack" | grep "1" | grep -v "\*" | wc -l` -eq 0 ] ; then
            echo " noexec_user_stack=1 값이 없음" >> $CREATE_XML_FILE 2>&1
            result="BAD"
	else
	    cat ${CHECK_SYSTEM} | grep -i "noexec_user_stack_log" >> $CREATE_XML_FILE 2>&1
            if [ `cat ${CHECK_SYSTEM} | grep -i "noexec_user_stack_log" | grep "1" | grep -v "\*" | wc -l` -eq 0 ] ; then
                echo " noexec_user_stack=1 이지만 와 noexec_user_stack_log=1 값이 없음" >> $CREATE_XML_FILE 2>&1
                result="BAD"
            fi
        fi
    else
        echo "${CHECK_SYSTEM} 파일이 없습니다." >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi
    echo "</Issue>" >> $CREATE_XML_FILE 2>&1
    ### 진단결과 ###
    echo "<Result>" >> $CREATE_XML_FILE 2>&1
    echo ${result}
    echo ${result} >> $CREATE_XML_FILE 2>&1
    echo "</Result>" >> $CREATE_XML_FILE 2>&1
    echo "</row>" >> $CREATE_XML_FILE 2>&1
    ### end ###
else
    RESULT="N/A"
    ### 현재설정 ###
    echo "<Issue>" >> $CREATE_XML_FILE 2>&1
    echo "해당 OS는 해당사항 없음" >>  $CREATE_XML_FILE 2>&1
    echo "</Issue>" >> $CREATE_XML_FILE 2>&1
    ### 진단결과 ###
    echo "<Result>" >> $CREATE_XML_FILE 2>&1
    echo ${RESULT}
    echo ${RESULT} >> $CREATE_XML_FILE 2>&1
    echo "</Result>" >> $CREATE_XML_FILE 2>&1
    echo "</row>" >> $CREATE_XML_FILE 2>&1
    ### end ###
fi







Classification="6. 시스템 보안설정"
Item="6.02 Kernel 파라메터 설정"
ItemCode="${SCRIPT_VERSION}_0602"
Risk="L"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "Kernel 파라메터 설정을 rebooting 후에도 적용되도록 /etc/init.d/inetinit 파일에 설정" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "ip_respond_to_echo_broadcast = 0" >> $CREATE_XML_FILE 2>&1
echo "ip_forward_directed_broadcasts = 0" >> $CREATE_XML_FILE 2>&1
echo "ip_respond_to_timestamp = 0" >> $CREATE_XML_FILE 2>&1
echo "ip_respond_to_timestamp_broadcast = 0" >> $CREATE_XML_FILE 2>&1
echo "ip_forward_src_routed = 0" >> $CREATE_XML_FILE 2>&1
echo "ip_ignore_redirect = 1" >> $CREATE_XML_FILE 2>&1
echo "ip_forwarding = 0" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
if [ ${SYSTEM_OS} = "SunOS" ] ;then
    ### 현재설정 ###
    echo "<Issue>" >> $CREATE_XML_FILE 2>&1
    result="GOOD"

    echo "1) /dev/ip ip_respond_to_echo_broadcast 점검" >> $CREATE_XML_FILE 2>&1
    /usr/sbin/ndd -get /dev/ip ip_respond_to_echo_broadcast >> $CREATE_XML_FILE 2>&1
    if [ `/usr/sbin/ndd -get /dev/ip ip_respond_to_echo_broadcast | grep "0" | wc -l` -eq 0 ] ; then
        echo "취약: 0으로 설정되어 있지 않음" >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi

    echo "2) /dev/ip ip_forward_directed_broadcasts 점검" >> $CREATE_XML_FILE 2>&1
    /usr/sbin/ndd -get /dev/ip ip_forward_directed_broadcasts >> $CREATE_XML_FILE 2>&1
    if [ `/usr/sbin/ndd -get /dev/ip ip_forward_directed_broadcasts | grep "0" | wc -l` -eq 0 ] ; then
        echo "취약: 0으로 설정되어 있지 않음" >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi
    
    echo "3) /dev/ip ip_respond_to_timestamp 점검" >> $CREATE_XML_FILE 2>&1
    /usr/sbin/ndd -get /dev/ip ip_respond_to_timestamp >> $CREATE_XML_FILE 2>&1
    if [ `/usr/sbin/ndd -get /dev/ip ip_respond_to_timestamp | grep "0" | wc -l` -eq 0 ] ; then
        echo "취약: 0으로 설정되어 있지 않음" >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi

    echo "4) /dev/ip ip_respond_to_timestamp_broadcast 점검" >> $CREATE_XML_FILE 2>&1
    /usr/sbin/ndd -get /dev/ip ip_respond_to_timestamp_broadcast >> $CREATE_XML_FILE 2>&1
    if [ `/usr/sbin/ndd -get /dev/ip ip_respond_to_timestamp_broadcast | grep "0" | wc -l` -eq 0 ] ; then
        echo "취약: 0으로 설정되어 있지 않음" >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi

    echo "5) /dev/ip ip_forward_src_routed 점검" >> $CREATE_XML_FILE 2>&1
    /usr/sbin/ndd -get /dev/ip ip_forward_src_routed >> $CREATE_XML_FILE 2>&1
    if [ `/usr/sbin/ndd -get /dev/ip ip_forward_src_routed | grep "0" | wc -l` -eq 0 ] ; then
        echo "취약: 0으로 설정되어 있지 않음" >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi

    echo "6) /dev/ip ip_ignore_redirect 점검" >> $CREATE_XML_FILE 2>&1
    /usr/sbin/ndd -get /dev/ip ip_ignore_redirect >> $CREATE_XML_FILE 2>&1
    if [ `/usr/sbin/ndd -get /dev/ip ip_ignore_redirect | grep "1" | wc -l` -eq 0 ] ; then
        echo "취약: 1로 설정되어 있지 않음" >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi

    echo "7) /dev/ip ip_forwarding 점검" >> $CREATE_XML_FILE 2>&1
    /usr/sbin/ndd -get /dev/ip ip_forwarding >> $CREATE_XML_FILE 2>&1
    if [ `/usr/sbin/ndd -get /dev/ip ip_forwarding | grep "0" | wc -l` -eq 0 ] ; then
        echo "취약: 0으로 설정되어 있지 않음" >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi

    echo "</Issue>" >> $CREATE_XML_FILE 2>&1
    ### 진단결과 ###
    echo "<Result>" >> $CREATE_XML_FILE 2>&1
    echo ${result}
    echo ${result} >> $CREATE_XML_FILE 2>&1
    echo "</Result>" >> $CREATE_XML_FILE 2>&1
    echo "</row>" >> $CREATE_XML_FILE 2>&1
    ### end ###
else
    RESULT="N/A"
    ### 현재설정 ###
    echo "<Issue>" >> $CREATE_XML_FILE 2>&1
    echo "해당 OS는 해당사항 없음" >>  $CREATE_XML_FILE 2>&1
    echo "</Issue>" >> $CREATE_XML_FILE 2>&1
    ### 진단결과 ###
    echo "<Result>" >> $CREATE_XML_FILE 2>&1
    echo ${RESULT}
    echo ${RESULT} >> $CREATE_XML_FILE 2>&1
    echo "</Result>" >> $CREATE_XML_FILE 2>&1
    echo "</row>" >> $CREATE_XML_FILE 2>&1
    ### end ###
fi







Classification="6. 시스템 보안설정"
Item="6.03 ISN 파라메터 설정"
ItemCode="${SCRIPT_VERSION}_0603"
Risk="M"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
if [ ${SYSTEM_OS} = "SunOS" ] ;then
    ### 기준설명 ###
    echo "<Standard>" >> $CREATE_XML_FILE 2>&1
    echo "/etc/default/inetinit 파일 내 TCP_STRONG_ISS 값 2로 설정" >> $CREATE_XML_FILE 2>&1
    echo "</Standard>" >> $CREATE_XML_FILE 2>&1
    ### 조치방법 ###
    echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
    echo "# vi /etc/default/inetinit 파일 실행하여 아래와 같이 수정" >> $CREATE_XML_FILE 2>&1
    echo "(수정 전) TCP_STRONG_ISS=1" >> $CREATE_XML_FILE 2>&1
    echo "(수정 후) TCP_STRONG_ISS=2" >> $CREATE_XML_FILE 2>&1
    echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
    ### 현재설정 ###
    echo "<Issue>" >> $CREATE_XML_FILE 2>&1
    if [ -f ${CHECK_ISN} ] ; then
        if [ `cat ${CHECK_ISN} | grep -v "^#" | grep -i "TCP_STRONG_ISS" | wc -l` -eq 0 ] ; then
            echo "취약: TCP_STRONG_ISS 설정값이 없음" >> $CREATE_XML_FILE 2>&1
            result="BAD"
        else
            cat ${CHECK_ISN} | grep -v "^#" | grep -i "TCP_STRONG_ISS" >> $CREATE_XML_FILE 2>&1
            if [ `cat ${CHECK_ISN} | grep -v "^#" | grep -i "TCP_STRONG_ISS" | grep "2" | wc -l` -eq 0 ] ; then
                echo "취약: TCP_STRONG_ISS 값이 2로 설정되어 있지 않음" >> $CREATE_XML_FILE 2>&1
                result="BAD"
            else
                echo "양호: TCP_STRONG_ISS 값이 2로 설정되어 있음" >> $CREATE_XML_FILE 2>&1
            fi
        fi
    else
        echo "${CHECK_ISN} 파일이 존재하지 않음" >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi
    echo "</Issue>" >> $CREATE_XML_FILE 2>&1
    ### 진단결과 ###
    echo "<Result>" >> $CREATE_XML_FILE 2>&1
    echo ${result}
    echo ${result} >> $CREATE_XML_FILE 2>&1
    echo "</Result>" >> $CREATE_XML_FILE 2>&1
    echo "</row>" >> $CREATE_XML_FILE 2>&1
    ### end ###
else
    RESULT="N/A"
    ### 기준설명 ###
    echo "<Standard>" >> $CREATE_XML_FILE 2>&1
    echo "해당 OS는 해당사항 없음" >>  $CREATE_XML_FILE 2>&1
    echo "</Standard>" >> $CREATE_XML_FILE 2>&1
    ### 조치방법 ###
    echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
    echo "해당 OS는 해당사항 없음" >>  $CREATE_XML_FILE 2>&1
    echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
    ### 현재설정 ###
    echo "<Issue>" >> $CREATE_XML_FILE 2>&1
    echo "해당 OS는 해당사항 없음" >>  $CREATE_XML_FILE 2>&1
    echo "</Issue>" >> $CREATE_XML_FILE 2>&1
    ### 진단결과 ###
    echo "<Result>" >> $CREATE_XML_FILE 2>&1
    echo ${RESULT}
    echo ${RESULT} >> $CREATE_XML_FILE 2>&1
    echo "</Result>" >> $CREATE_XML_FILE 2>&1
    echo "</row>" >> $CREATE_XML_FILE 2>&1
    ### end ###
fi







Classification="7. 보안패치"
Item="7.01 보안 패치 적용"
ItemCode="${SCRIPT_VERSION}_0701"
Risk="M"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "<Standard>" >> $CREATE_XML_FILE 2>&1
echo "최신 보안패치 및 버그 Fix 된 패치 적용" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
echo "${SYSTEM_OS} 제조사 유지보수를 통해 최신 보안패치 적용" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
if [ ${SYSTEM_OS} = "Linux" ] ; then
    result="CHECK"
    rpm -qa |sort  > $CREATE_PATCH_FILE
    echo $CREATE_PATCH_FILE" 파일 확인" >> $CREATE_XML_FILE 2>&1
elif [ ${SYSTEM_OS} = "HP-UX" ] ; then
    result="GOOD"
    swlist -l product > $CREATE_PATCH_FILE
    VERSION="-"

    if [ `uname -a | grep "11.10" | wc -l` -eq 1 ] ; then
        VERSION="11.10"
        PATCH_LIST="PHNE_33790 PHNE_33791 PHNE_33792 PHNE_29460 PHSS_31178 PHKL_28060 PHKL_26450 PHCO_26449"
    fi
    if [ `uname -a | grep "11.04" | wc -l` -eq 1 ] ; then
        VERSION="11.04"
        PATCH_LIST="PHSS_32520 PHSS_32507 PHSS_30782 PHNE_31034"
    fi
    if [ `uname -a | grep "11.11" | wc -l` -eq 1 ] ; then
        VERSION="11.11"
        PATCH_LIST="PHCO_33822 PHNE_33790 PHNE_33791 PHNE_33792 PHNE_33159 PHNE_29461 PHSS_31179 PHNE_38458 PHCO_36562 PHSS_36004 PHCO_36809 PHKL_28025 PHKL_26269 PHCO_25841"
    fi
    if [ `uname -a | grep "11.22" | wc -l` -eq 1 ] ; then
        VERSION="11.22"
        PATCH_LIST="PHNE_29462 PHSS_31180"
    fi
    if [ `uname -a | grep "11.23" | wc -l` -eq 1 ] ; then
        VERSION="11.23"
        PATCH_LIST="PHNE_33790 PHNE_33791 PHNE_33792 PHNE_32606 PHNE_32443 PHSS_31181 PHCO_36563 PHSS_36005 PHCO_36808"
    fi
    if [ `uname -a | grep "11.31" | wc -l` -eq 1 ] ; then
        VERSION="11.31"
        PATCH_LIST="PHCO_36003"
    fi

    if [ $VERSION = "-" ] ; then
        result="CHECK"
        echo "스크립트 점검에 해당하는 버전이 아님, 확인필요함" >> $CREATE_XML_FILE 2>&1
        uname -a >> $CREATE_XML_FILE 2>&1
    else
        echo $VERSION
        for PN in $PATCH_LIST
        do
            if [ `cat $CREATE_PATCH_FILE | grep $PN | wc -l` -eq 0 ] ; then
                echo "["$PN" 패치 안됨]" >> $CREATE_XML_FILE 2>&1
                result="BAD"
            fi
        done
    fi
elif [ ${SYSTEM_OS} = "SunOS" ] ;then
    if [ `ToInt ${VERSION}` -ge 510 ] && [ `ToInt ${VERSION}` -lt 520 ]  ; then
        echo "확인필요" >> $CREATE_XML_FILE 2>&1
        result="CHECK"
    else
        echo "확인필요" >> $CREATE_XML_FILE 2>&1
        result="CHECK"
    fi
elif [ ${SYSTEM_OS} = "AIX" ] ; then
    result="CHECK"
    instfix -i  > $CREATE_PATCH_FILE
    echo $CREATE_PATCH_FILE" 파일 확인" >> $CREATE_XML_FILE 2>&1

    oslevel > $HOSTNAME.oslevel.log
    VERSION="-"

    if [ `cat $HOSTNAME.oslevel.log | grep "5.3.9" | wc -l` -eq 1 ] ; then
        VERSION="5.3.9"
        PATCH_LIST="IZ83252 IZ73874"
    fi

    if [ `cat $HOSTNAME.oslevel.log | grep "5.3.10" | wc -l` -eq 1 ] ; then
        VERSION="5.3.10"
        PATCH_LIST="IZ83274 IZ73757"
    fi

    if [ `cat $HOSTNAME.oslevel.log | grep "5.3.11" | wc -l` -eq 1 ] ; then
        VERSION="5.3.11"
        PATCH_LIST="IZ83275 IZ73590"
    fi

    if [ `cat $HOSTNAME.oslevel.log | grep "5.3.12" | wc -l` -eq 1 ] ; then
        VERSION="5.3.12"
        PATCH_LIST="IZ83276 IZ73590"
    fi

    if [ `cat $HOSTNAME.oslevel.log | grep "6.1.2" | wc -l` -eq 1 ] ; then
        VERSION="6.1.2"
        PATCH_LIST="IZ75465"
    fi

    if [ `cat $HOSTNAME.oslevel.log | grep "6.1.3" | wc -l` -eq 1 ] ; then
        VERSION="6.1.3"
        PATCH_LIST="IZ75440"
    fi

    if [ `cat $HOSTNAME.oslevel.log | grep "6.1.4" | wc -l` -eq 1 ] ; then
        VERSION="6.1.4"
        PATCH_LIST="IZ75369"
    fi

    if [ `cat $HOSTNAME.oslevel.log | grep "6.1.5" | wc -l` -eq 1 ] ; then
        VERSION="6.1.5"
        PATCH_LIST="IZ73599"
    fi

    if [ $VERSION == "-" ] ; then
        result="CHECK"
        if [ `cat $HOSTNAME.oslevel.log | wc -l` -eq 0 ] ; then
            echo "버전정보 없음"
        else
            cat $HOSTNAME.oslevel.log
        fi
    else
        echo $VERSION
        for PN in $PATCH_LIST
        do
            if [ `cat $CREATE_PATCH_FILE | grep $PN | wc -l` -eq 0 ]  ; then
                echo "["$PN" 패치 안됨]" >> $CREATE_XML_FILE 2>&1
                result="BAD"
            fi
        done
    fi
else
    echo "[-] In that OS it can not proceed."
    exit
fi


echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###








Classification="8. 이슈취약점"
Item="8.01 ShellShock 취약점"
ItemCode="${SCRIPT_VERSION}_0801"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "    <Standard>" >> $CREATE_XML_FILE 2>&1
echo "[기준]" >> $CREATE_XML_FILE 2>&1
echo "가. 최신버전의 GNU Bash 설치 (GNU Bash 버전 4.3 2015.03 기준)" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "1) GNU Bash 버전 확인" >> $CREATE_XML_FILE 2>&1
echo "대상 시스템의 터미널의 접속하여 아래 예시 방법으로 배쉬 버전 확인" >> $CREATE_XML_FILE 2>&1
echo "# bash --version" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "2) 업데이트 버전 설치" >> $CREATE_XML_FILE 2>&1
echo "취약한 bash 버전을 사용하고 있는 경우, GNU 공식 사이트에 방문하여 최신 패치 파일을 다운로드 받아 컴파일하여 설치를 진행하며 " >> $CREATE_XML_FILE 2>&1
echo "소스코드를 통한 설치시 bash는 매우 중요한 시스템 패키지이기 때문에 반드시 백업을 하고 진행하여야 함" >> $CREATE_XML_FILE 2>&1
echo "GNU Bash 다운로드 링크 : https://ftp.gnu.org/gnu/bash/" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
if [ `which bash | grep "/bash" | wc -l` -eq 0 ] ; then
    echo "양호: bash가 존재하지 않습니다." >> $CREATE_XML_FILE 2>&1
else
    bash_location=`which bash`
    echo "#!"$bash_location > bash_check.sh
    echo "env x='() { :;}; echo vulnerable_1' bash -c \"echo this is a test\" " >> bash_check.sh
    echo "env X='() { (a)=>\' bash -c \"echo date\"; cat echo ; rm -f echo " >> bash_check.sh
    echo "bash -c 'true <<EOF <<EOF <<EOF <<EOF <<EOF <<EOF <<EOF <<EOF <<EOF <<EOF <<EOF <<EOF <<EOF <<EOF' || echo \"CVE-2014-7186 vulnerable_3, redir_stack\"" >> bash_check.sh
    echo "(for x in {1..200} ; do echo \"for x$x in ; do :\"; done; for x in {1..200} ; do echo done ; done) | bash || echo \"CVE-2014-7187 vulnerable_4, word_lineno\" " >> bash_check.sh
    echo "foo=\'() { echo vulnerable_5; }\' bash -c foo" >> bash_check.sh
    chmod 755 bash_check.sh
    ./bash_check.sh > bash_result.log 2>/etc/null
    if [ `cat bash_result.log | egrep "vulnerable|2015|2016" | wc -l` -eq 0 ] ; then
        echo "양호: shellshock 취약점이 존재하지 않습니다." >> $CREATE_XML_FILE 2>&1
    else
        cat bash_result.log >> $CREATE_XML_FILE 2>&1
        echo "취약: shellshock 취약점이 존재합니다." >> $CREATE_XML_FILE 2>&1
        result="BAD"
    fi

    rm -rf bash_check.sh
    rm -rf bash_result.log
fi

echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###








Classification="8. 이슈취약점"
Item="8.02 OpenSSL 취약점"
ItemCode="${SCRIPT_VERSION}_0802"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "    <Standard>" >> $CREATE_XML_FILE 2>&1
echo "[기준]" >> $CREATE_XML_FILE 2>&1
echo "가. 최신버전의 OpenSSL 설치 (2016.03 기준)" >> $CREATE_XML_FILE 2>&1
echo "1.0.1 사용할 경우: 1.0.1s" >> $CREATE_XML_FILE 2>&1
echo "1.0.2 사용할 경우: 1.0.2g" >> $CREATE_XML_FILE 2>&1
echo "그 이하 버전은 모두 취약" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "나. 만약 현재 OS에서 제공하는 버전이 기준버전보다 낮을 경우" >> $CREATE_XML_FILE 2>&1
echo "- 서비스 영향도 확인 후 소스 설치가 가능한 경우, 소스설치 할 것을 권고" >> $CREATE_XML_FILE 2>&1
echo "- 서비스에 영향이 있어 소스 설치가 불가할 경우, 위험수용 또는 위험허용 처리 후 장기적으로 업데이트 할 수 있도록 계획수립 할 것을 권고" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "1) OpenSSL 버전 확인" >> $CREATE_XML_FILE 2>&1
echo "OpenSSl이 설치된 시스템에서 아래 예시 명령어를 입력하여 OpenSSL 버전 확인" >> $CREATE_XML_FILE 2>&1
echo "# openssl version -a" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "2) 업데이트 버전 설치" >> $CREATE_XML_FILE 2>&1
echo "- OpenSSL 취약점이 발표되었으므로 반드시 1.0.1s 또는 1.0.2g로 업데이트할 것을 권고" >> $CREATE_XML_FILE 2>&1
echo "출처 : http://www.krcert.or.kr/data/secNoticeView.do?bulletin_writing_sequence=24083  (KISA 보안공지)" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "- 최신버전의 업데이트가 어려운 시스템일 경우" >> $CREATE_XML_FILE 2>&1
echo "운영환경의 특수성 때문에 업데이트가 어려운 경우, 시스템 담당자와 확인 후 HeartBeat를 사용하지 않도록 컴파일 옵션을 설정한 후 재컴파일을 통한 조치 가능" >> $CREATE_XML_FILE 2>&1
echo "# ./config -DOPENSSL_NO_HEARTBEATS" >> $CREATE_XML_FILE 2>&1
echo "# make depend" >> $CREATE_XML_FILE 2>&1
echo "# make" >> $CREATE_XML_FILE 2>&1
echo "# make install" >> $CREATE_XML_FILE 2>&1

echo "" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="BAD"
DEF_OPENSSL_CHECK="FALSE"
STAND_VER1="1.0.1s"
STAND_VER2="1.0.2g"

if [ `which openssl | grep "/openssl" | wc -l` -eq 0 ] ; then
	echo "양호: openssl이 존재하지 않습니다." >> $CREATE_XML_FILE 2>&1
	result="GOOD"
else
	OPENSSL_VERSION=`openssl version`
	OPENSSL_BACK_VER=`rpm -qa | grep openssl`
	echo "OpenSSL버전: ${OPENSSL_BACK_VER}"  >> $CREATE_XML_FILE 2>&1
	
	if [ ${SYSTEM_OS} = "Linux" ] ; then
		
		if [ "${SYSTEM_OS_MAKER}" = "CentOS" ] ; then
			echo "CentOS 버전정보"  >> $CREATE_XML_FILE 2>&1
			cat /etc/redhat-release >> $CREATE_XML_FILE 2>&1 
			CENT_VER1=`cat /etc/redhat-release |awk -F"release" '{print $2}' |awk '{print $1}' |awk -F"." '{print $1}'`
			CENT_VER2=`cat /etc/redhat-release |awk -F"release" '{print $2}' |awk '{print $1}' |awk -F"." '{print $2}'`
			if [ $CENT_VER1 == 4 ] ; then
				CHECK_VER1="0.9.7a"
				if [ `echo ${OPENSSL_VERSION} | fgrep $CHECK_VER1 | wc -l` -ge 1 ] ; then
					CHECK_VER1_1="43.23.el4"
				else
					CENT_ETC_VER=$CHECK_VER1"이 아닌 다른"
					echo "CentOS "$CENT_ETC_VER"버전이므로 OpenSSL "$STAND_VER1" 또는 "$STAND_VER2" 기준으로 점검"
					DEF_OPENSSL_CHECK="TRUE"
				fi
			elif [ $CENT_VER1 == 5 ] ; then
				CHECK_VER1="0.9.8e"
				if [ `echo ${OPENSSL_VERSION} | fgrep $CHECK_VER1 | wc -l` -ge 1 ] ; then
					if [ $CENT_VER2 == 6 ] ; then
						CHECK_VER1_1="12.el5_6.13"
					elif [ $CENT_VER2 == 9 ] ; then
						CHECK_VER1_1="26.el5_9.5"
					else
						CHECK_VER1_1="39.el5_11"
					fi
				else
					CENT_ETC_VER=$CHECK_VER1"이 아닌 다른"
					echo "CentOS "$CENT_ETC_VER"버전이므로 OpenSSL "$STAND_VER1" 또는 "$STAND_VER2" 기준으로 점검" >> $CREATE_XML_FILE 2>&1
					DEF_OPENSSL_CHECK="TRUE"
				fi
			elif [ $CENT_VER1 == 6 ] ; then
				CHECK_VER1="1.0.1e"
				CHECK_VER2="1.0.0"
				if [ `echo ${OPENSSL_VERSION} | fgrep $CHECK_VER1 | wc -l` -ge 1 ] ; then
					if [ $CENT_VER2 == 5 ] ; then
						CHECK_VER1_1="16.el6_5.16"
					elif [ $CENT_VER2 == 6 ] ; then
						CHECK_VER1_1="30.el6_6.12"
					else
						CHECK_VER1_1="42.el6_7.4"
					fi
				elif [ `echo ${OPENSSL_VERSION} | fgrep $CHECK_VER2 | wc -l` -ge 1 ] ; then
					CHECK_VER1=$CHECK_VER2
					if [ $CENT_VER2 == 2 ] ; then
						CHECK_VER1_1="20.el6_2.8"
					elif [ $CENT_VER2 == 4 ] ; then
						CHECK_VER1_1="27.el6_4.5"
					else
						CHECK_VER1_1="42.el6_7.4"
					fi
				else
					CENT_ETC_VER=$CHECK_VER1"또는"$CHECK_VER2"이 아닌 다른"
					echo "CentOS "$CENT_ETC_VER"버전이므로 OpenSSL "$STAND_VER1" 또는 "$STAND_VER2" 기준으로 점검" >> $CREATE_XML_FILE 2>&1
					DEF_OPENSSL_CHECK="TRUE"
				fi
			elif [ $CENT_VER1 == 7 ] ; then
				CHECK_VER1="1.0.1e"
				CHECK_VER2="0.9.8e"
				if [ `echo ${OPENSSL_VERSION} | fgrep $CHECK_VER1 | wc -l` -ge 1 ] ; then
					if [ $CENT_VER2 == 1 ] ; then
						CHECK_VER1_1="42.el7_1.10"
					else
						CHECK_VER1_1="51.el7_2.4"
					fi
				elif [ `echo ${OPENSSL_VERSION} | fgrep $CHECK_VER2 | wc -l` -ge 1 ] ; then
					CHECK_VER1=$CHECK_VER2
					CHECK_VER1_1="29.el7_2.3"
				else
					CENT_ETC_VER=$CHECK_VER1"또는"$CHECK_VER2"이 아닌 다른"
					echo "CentOS "$CENT_ETC_VER"버전이므로 OpenSSL "$STAND_VER1" 또는 "$STAND_VER2" 기준으로 점검" >> $CREATE_XML_FILE 2>&1
					DEF_OPENSSL_CHECK="TRUE"
				fi
			else
				CENT_ETC_VER="4-7이 아닌 다른"
				echo "CentOS "$CENT_ETC_VER"버전이므로 OpenSSL "$STAND_VER1" 또는 "$STAND_VER2" 기준으로 점검" >> $CREATE_XML_FILE 2>&1
				DEF_OPENSSL_CHECK="TRUE"
			fi
		elif [ "${SYSTEM_OS_MAKER}" = "RedHat" ] || [ "${SYSTEM_OS_MAKER}" = "Red" ] ; then
			echo "RedHat 버전정보"  >> $CREATE_XML_FILE 2>&1
			cat /etc/redhat-release  >> $CREATE_XML_FILE 2>&1
			RED_VER1=`cat /etc/redhat-release |awk -F"release" '{print $2}' |awk '{print $1}' |awk -F"." '{print $1}'`
			RED_VER2=`cat /etc/redhat-release |awk -F"release" '{print $2}' |awk '{print $1}' |awk -F"." '{print $2}'`
			if [ $RED_VER1 == 4 ] ; then
				CHECK_VER1="0.9.7a"
				if [ `echo ${OPENSSL_VERSION} | fgrep $CHECK_VER1 | wc -l` -ge 1 ] ; then
					CHECK_VER1_1="43.23.el4"
				else
					RED_ETC_VER=$CHECK_VER1"이 아닌 다른"
					echo "RedHatOS "$RED_ETC_VER"버전이므로 OpenSSL "$STAND_VER1" 또는 "$STAND_VER2" 기준으로 점검" >> $CREATE_XML_FILE 2>&1
					DEF_OPENSSL_CHECK="TRUE"
				fi
			elif [ $RED_VER1 == 5 ] ; then
				CHECK_VER1="0.9.8e"
				if [ `echo ${OPENSSL_VERSION} | fgrep $CHECK_VER1 | wc -l` -ge 1 ] ; then
					if [ $RED_VER2 == 6 ] ; then
						CHECK_VER1_1="12.el5_6.13"
					elif [ $RED_VER2 == 9 ] ; then
						CHECK_VER1_1="26.el5_9.5"
					else
						CHECK_VER1_1="39.el5_11"
					fi
				else
					RED_ETC_VER=$CHECK_VER1"이 아닌 다른"
					echo "RedHatOS "$RED_ETC_VER"버전이므로 OpenSSL "$STAND_VER1" 또는 "$STAND_VER2" 기준으로 점검" >> $CREATE_XML_FILE 2>&1
					DEF_OPENSSL_CHECK="TRUE"
				fi
			elif [ $RED_VER1 == 6 ] ; then
				CHECK_VER1="1.0.1e"
				CHECK_VER2="1.0.0"
				if [ `echo ${OPENSSL_VERSION} | fgrep $CHECK_VER1 | wc -l` -ge 1 ] ; then
					if [ $RED_VER2 == 5 ] ; then
						CHECK_VER1_1="16.el6_5.16"
					elif [ $RED_VER2 == 6 ] ; then
						CHECK_VER1_1="30.el6_6.12"
					else
						CHECK_VER1_1="42.el6_7.4"
					fi
				elif [ `echo ${OPENSSL_VERSION} | fgrep $CHECK_VER2 | wc -l` -ge 1 ] ; then
					CHECK_VER1=$CHECK_VER2
					if [ $RED_VER2 == 2 ] ; then
						CHECK_VER1_1="20.el6_2.8"
					elif [ $RED_VER2 == 4 ] ; then
						CHECK_VER1_1="27.el6_4.5"
					else
						CHECK_VER1_1="42.el6_7.4"
					fi
				else
					RED_ETC_VER=$CHECK_VER1"또는"$CHECK_VER2"이 아닌 다른"
					echo "RedHatOS "$RED_ETC_VER"버전이므로 OpenSSL "$STAND_VER1" 또는 "$STAND_VER2" 기준으로 점검" >> $CREATE_XML_FILE 2>&1
					DEF_OPENSSL_CHECK="TRUE"
				fi
			elif [ $RED_VER1 == 7 ] ; then
				CHECK_VER1="1.0.1e"
				CHECK_VER2="0.9.8e"
				if [ `echo ${OPENSSL_VERSION} | fgrep $CHECK_VER1 | wc -l` -ge 1 ] ; then
					if [ $RED_VER2 == 1 ] ; then
						CHECK_VER1_1="42.el7_1.10"
					else
						CHECK_VER1_1="51.el7_2.4"
					fi
				elif [ `echo ${OPENSSL_VERSION} | fgrep $CHECK_VER2 | wc -l` -ge 1 ] ; then
					CHECK_VER1=$CHECK_VER2
					CHECK_VER1_1="29.el7_2.3"
				else
					RED_ETC_VER=$CHECK_VER1"또는"$CHECK_VER2"이 아닌 다른"
					echo "RedHatOS "$RED_ETC_VER"버전이므로 OpenSSL "$STAND_VER1" 또는 "$STAND_VER2" 기준으로 점검" >> $CREATE_XML_FILE 2>&1
					DEF_OPENSSL_CHECK="TRUE"
				fi
			else
				RED_ETC_VER="4-7이 아닌 다른"
				echo "RedHatOS "$RED_ETC_VER"버전이므로 OpenSSL "$STAND_VER1" 또는 "$STAND_VER2" 기준으로 점검" >> $CREATE_XML_FILE 2>&1
				DEF_OPENSSL_CHECK="TRUE"
			fi
		fi
	else
		DEF_OPENSSL_CHECK="TRUE"
	fi
	
	if [ ${DEF_OPENSSL_CHECK} = "TRUE" ] ; then
		if [ `echo ${OPENSSL_VERSION} | grep "1\.0\.1" | wc -l` -eq 1 ] ; then
			if [ `echo ${OPENSSL_VERSION} | grep "1\.0\.1[s-z]" | wc -l` -eq 1 ] ; then
				echo "양호: 기준버전("$STAND_VER1") 이상으로 설치됨" >> $CREATE_XML_FILE 2>&1
				result="GOOD"
			else
				echo "취약: 기준버전("$STAND_VER1") 미만으로 설치됨" >> $CREATE_XML_FILE 2>&1
			fi

		elif [ `echo ${OPENSSL_VERSION} | grep "1\.0\.2" | wc -l` -eq 1 ] ; then
			if [ `echo ${OPENSSL_VERSION} | grep "1\.0\.2[g-z]" | wc -l` -eq 1 ] ; then
				echo "양호: 기준버전("$STAND_VER2") 이상으로 설치됨" >> $CREATE_XML_FILE 2>&1
				result="GOOD"
			else
				echo "취약: 기준버전("$STAND_VER2") 미만으로 설치됨" >> $CREATE_XML_FILE 2>&1
			fi
		else
			echo "취약: 기준버전("$STAND_VER1" 또는 "$STAND_VER2") 미만으로 설치됨" >> $CREATE_XML_FILE 2>&1
		fi
	else
		CHECK_VAL=`echo ${CHECK_VER1_1} | awk -F"." '{print $1}'`
		if [ `echo ${OPENSSL_BACK_VER} | awk -F"${CHECK_VER1}-" '{print $2}' | awk -F"." '{print $1}'` -ge ${CHECK_VAL} ] ; then
			echo "양호: 기준버전(${CHECK_VER1}-${CHECK_VER1_1}) 이상으로 설치됨"  >> $CREATE_XML_FILE 2>&1
			result="GOOD"
		else
			echo "취약: 기준버전(${CHECK_VER1}-${CHECK_VER1_1}) 보다 낮은 버전으로 설치됨"  >> $CREATE_XML_FILE 2>&1
		fi
	fi
fi

echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###









Classification="8. 이슈취약점"
Item="8.03 Ghost 취약점"
ItemCode="${SCRIPT_VERSION}_0803"
Risk="H"
echo "###### ${Classification} - ${Item} ###############################"
echo "<row>" >> $CREATE_XML_FILE 2>&1
### 항목코드 ###
echo "<ItemCode>${ItemCode}</ItemCode>" >> $CREATE_XML_FILE 2>&1
### 항목구분 ###
echo "<Classification>${Classification}</Classification>" >> $CREATE_XML_FILE 2>&1
### 항목명 ###
echo "<Item>${Item}</Item>" >> $CREATE_XML_FILE 2>&1
### 위험도 ###
echo "<Risk>${Risk}</Risk>" >> $CREATE_XML_FILE 2>&1
### 기준설명 ###
echo "    <Standard>" >> $CREATE_XML_FILE 2>&1
echo "[기준]" >> $CREATE_XML_FILE 2>&1
echo "가. 최신버전의 glibc 설치 (GNU C 라이브러리 버전 2.21 2015.03기준)" >> $CREATE_XML_FILE 2>&1
echo "</Standard>" >> $CREATE_XML_FILE 2>&1
echo "<Resolve>" >> $CREATE_XML_FILE 2>&1
### 조치방법 ###
echo "1) GNU C라이브러리 버전 확인" >> $CREATE_XML_FILE 2>&1
echo "대상 시스템의 터미널에 접속하여 아래 예시 방법으로 glibc버전 확인" >> $CREATE_XML_FILE 2>&1
echo "# getconf -a| grep glibc" >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "2) 업데이트 버전 설치" >> $CREATE_XML_FILE 2>&1
echo "- 취약한 glibc 버전을 사용하고 있는 GNU 공식 사이트에 방문하여 최신 패치 파일을 다운로드 받아 컴파일하여 설치를 진행하며" >> $CREATE_XML_FILE 2>&1
echo "소스코드를 통한 설치시 glibc는 매우 중요한 시스템 패키지이기 때문에 반드시 백업을 하고 진행하여야 함 " >> $CREATE_XML_FILE 2>&1
echo "" >> $CREATE_XML_FILE 2>&1
echo "GNU glibc 다운로드 링크 : http://ftp.gnu.org/gnu/glibc/" >> $CREATE_XML_FILE 2>&1
echo "</Resolve>" >> $CREATE_XML_FILE 2>&1
### 현재설정 ###
echo "<Issue>" >> $CREATE_XML_FILE 2>&1
result="GOOD"
if [ `which getconf | grep "/getconf" |  wc -l` -eq 0 ]
then
	echo "양호: getconf 실행파일이 존재하지 않습니다." >> $CREATE_XML_FILE 2>&1
else
	if [ `getconf -a| grep glibc | wc -l` -eq 0 ]
	then
		echo "양호: glibc가 존재하지 않습니다." >> $CREATE_XML_FILE 2>&1
	else
		if [ `which gcc | grep "/gcc" | wc -l` -eq 0 ]
		then
			echo "양호: gcc가 존재하지 않습니다." >> $CREATE_XML_FILE 2>&1
		else
			echo "#include <netdb.h>" > GHOST.c
			echo "#include <stdio.h>" >> GHOST.c
			echo "#include <stdlib.h>" >> GHOST.c
			echo "#include <string.h>" >> GHOST.c
			echo "#include <errno.h>" >> GHOST.c
			echo " " >> GHOST.c
			echo "#define CANARY \"in_the_coal_mine\"" >> GHOST.c
			echo " " >> GHOST.c
			echo "struct {" >> GHOST.c
			echo "char buffer[1024];" >> GHOST.c
			echo "char canary[sizeof(CANARY)];" >> GHOST.c
			echo "} temp = { \"buffer\", CANARY };" >> GHOST.c
			echo "" >> GHOST.c
			echo "int main(void) {" >> GHOST.c
			echo "struct hostent resbuf;" >> GHOST.c
			echo "struct hostent *result;" >> GHOST.c
			echo "int herrno;" >> GHOST.c
			echo "int retval;" >> GHOST.c
			echo " " >> GHOST.c
			echo "/*** strlen (name) = size_needed - sizeof (*host_addr) - sizeof (*h_addr_ptrs) - 1; ***/" >> GHOST.c
			echo "size_t len = sizeof(temp.buffer) - 16*sizeof(unsigned char) - 2*sizeof(char *) - 1;" >> GHOST.c
			echo "char name[sizeof(temp.buffer)];" >> GHOST.c
			echo "memset(name, '0', len);" >> GHOST.c
			echo "name[len] = '\\0';" >> GHOST.c
			echo " " >> GHOST.c
			echo "retval = gethostbyname_r(name, &resbuf, temp.buffer, sizeof(temp.buffer), &result, &herrno);" >> GHOST.c
			echo " " >> GHOST.c
			echo "if (strcmp(temp.canary, CANARY) != 0) {" >> GHOST.c
			echo "puts(\"vulnerable\");" >> GHOST.c
			echo "exit(EXIT_SUCCESS);" >> GHOST.c
			echo "}" >> GHOST.c
			echo "if (retval == ERANGE) {" >> GHOST.c
			echo "puts(\"not vulnerable\");" >> GHOST.c
			echo "exit(EXIT_SUCCESS);" >> GHOST.c
			echo "}" >> GHOST.c
			echo "puts(\"should not happen\");" >> GHOST.c
			echo "exit(EXIT_FAILURE);" >> GHOST.c
 			echo "" >> GHOST.c
			echo "}" >> GHOST.c
			gcc -o GHOST GHOST.c
			chmod 755 GHOST
			./GHOST > GHOST_result.log
			if [ `cat GHOST_result.log | grep "vulnerable" | grep -v "not" | wc -l` -eq 1 ]
			then
				echo "취약: Ghost 취약점이 존재합니다." >> $CREATE_XML_FILE 2>&1
				result="BAD"
			else
				echo "양호: Ghost 취약점이 발견되지 않았습니다." >> $CREATE_XML_FILE 2>&1
			fi
			rm -rf GHOST
			rm -rf GHOST.c
			rm -rf GHOST_result.log
		fi
	fi
fi

echo "</Issue>" >> $CREATE_XML_FILE 2>&1
### 진단결과 ###
echo "<Result>" >> $CREATE_XML_FILE 2>&1
echo ${result}
echo ${result} >> $CREATE_XML_FILE 2>&1
echo "</Result>" >> $CREATE_XML_FILE 2>&1
echo "</row>" >> $CREATE_XML_FILE 2>&1
### end ###



echo "  </rows>" >> $CREATE_XML_FILE 2>&1

zip ${CREATE_TAR_FILE} ${CREATE_LOG_FILE} ${CREATE_XML_FILE} ${CREATE_PATCH_FILE} ${CREATE_PWD_FILE}
#tar cvf ${CREATE_TAR_FILE} ${CREATE_LOG_FILE} ${CREATE_XML_FILE} ${CREATE_PATCH_FILE} ${CREATE_PWD_FILE}
#rm -rf ${CREATE_LOG_FILE} ${CREATE_XML_FILE} ${CREATE_PATCH_FILE} ${CREATE_PWD_FILE}


</code>
